/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

/**
 * EBodySize enum.
 * @exports EBodySize
 * @enum {number}
 * @property {number} BodySizeNull=0 BodySizeNull value
 * @property {number} BodySizeS=1 BodySizeS value
 * @property {number} BodySizeM=2 BodySizeM value
 * @property {number} BodySizeL=3 BodySizeL value
 */
$root.EBodySize = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "BodySizeNull"] = 0;
    values[valuesById[1] = "BodySizeS"] = 1;
    values[valuesById[2] = "BodySizeM"] = 2;
    values[valuesById[3] = "BodySizeL"] = 3;
    return values;
})();

$root.BasicData = (function() {

    /**
     * Properties of a BasicData.
     * @exports IBasicData
     * @interface IBasicData
     * @property {number|Long|null} [CharID] BasicData CharID
     * @property {number|Long|null} [ShowId] BasicData ShowId
     * @property {string|null} [Name] BasicData Name
     * @property {number|null} [Gender] BasicData Gender
     * @property {EBodySize|null} [BodySize] BasicData BodySize
     * @property {number|null} [Level] BasicData Level
     * @property {number|null} [SceneId] BasicData SceneId
     * @property {Array.<number>|null} [PersonalState] BasicData PersonalState
     * @property {number|Long|null} [OfflineTime] BasicData OfflineTime
     * @property {string|null} [SceneGuid] BasicData SceneGuid
     * @property {number|Long|null} [CreateTime] BasicData CreateTime
     * @property {number|null} [CurTalentPoolId] BasicData CurTalentPoolId
     * @property {number|null} [BotAiId] BasicData BotAiId
     * @property {number|null} [RegisterChannel] BasicData RegisterChannel
     * @property {number|Long|null} [CharState] BasicData CharState
     * @property {number|Long|null} [OnlineTime] BasicData OnlineTime
     * @property {number|Long|null} [SumSaveDiamond] BasicData SumSaveDiamond
     * @property {boolean|null} [IsNewbie] BasicData IsNewbie
     */

    /**
     * Constructs a new BasicData.
     * @exports BasicData
     * @classdesc Represents a BasicData.
     * @implements IBasicData
     * @constructor
     * @param {IBasicData=} [properties] Properties to set
     */
    function BasicData(properties) {
        this.PersonalState = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BasicData CharID.
     * @member {number|Long|null|undefined} CharID
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.CharID = null;

    /**
     * BasicData ShowId.
     * @member {number|Long|null|undefined} ShowId
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.ShowId = null;

    /**
     * BasicData Name.
     * @member {string|null|undefined} Name
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.Name = null;

    /**
     * BasicData Gender.
     * @member {number|null|undefined} Gender
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.Gender = null;

    /**
     * BasicData BodySize.
     * @member {EBodySize|null|undefined} BodySize
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.BodySize = null;

    /**
     * BasicData Level.
     * @member {number|null|undefined} Level
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.Level = null;

    /**
     * BasicData SceneId.
     * @member {number|null|undefined} SceneId
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.SceneId = null;

    /**
     * BasicData PersonalState.
     * @member {Array.<number>} PersonalState
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.PersonalState = $util.emptyArray;

    /**
     * BasicData OfflineTime.
     * @member {number|Long|null|undefined} OfflineTime
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.OfflineTime = null;

    /**
     * BasicData SceneGuid.
     * @member {string|null|undefined} SceneGuid
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.SceneGuid = null;

    /**
     * BasicData CreateTime.
     * @member {number|Long|null|undefined} CreateTime
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.CreateTime = null;

    /**
     * BasicData CurTalentPoolId.
     * @member {number|null|undefined} CurTalentPoolId
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.CurTalentPoolId = null;

    /**
     * BasicData BotAiId.
     * @member {number|null|undefined} BotAiId
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.BotAiId = null;

    /**
     * BasicData RegisterChannel.
     * @member {number|null|undefined} RegisterChannel
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.RegisterChannel = null;

    /**
     * BasicData CharState.
     * @member {number|Long|null|undefined} CharState
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.CharState = null;

    /**
     * BasicData OnlineTime.
     * @member {number|Long|null|undefined} OnlineTime
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.OnlineTime = null;

    /**
     * BasicData SumSaveDiamond.
     * @member {number|Long|null|undefined} SumSaveDiamond
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.SumSaveDiamond = null;

    /**
     * BasicData IsNewbie.
     * @member {boolean|null|undefined} IsNewbie
     * @memberof BasicData
     * @instance
     */
    BasicData.prototype.IsNewbie = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * BasicData _CharID.
     * @member {"CharID"|undefined} _CharID
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_CharID", {
        get: $util.oneOfGetter($oneOfFields = ["CharID"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _ShowId.
     * @member {"ShowId"|undefined} _ShowId
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_ShowId", {
        get: $util.oneOfGetter($oneOfFields = ["ShowId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _Name.
     * @member {"Name"|undefined} _Name
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_Name", {
        get: $util.oneOfGetter($oneOfFields = ["Name"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _Gender.
     * @member {"Gender"|undefined} _Gender
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_Gender", {
        get: $util.oneOfGetter($oneOfFields = ["Gender"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _BodySize.
     * @member {"BodySize"|undefined} _BodySize
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_BodySize", {
        get: $util.oneOfGetter($oneOfFields = ["BodySize"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _Level.
     * @member {"Level"|undefined} _Level
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_Level", {
        get: $util.oneOfGetter($oneOfFields = ["Level"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _SceneId.
     * @member {"SceneId"|undefined} _SceneId
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_SceneId", {
        get: $util.oneOfGetter($oneOfFields = ["SceneId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _OfflineTime.
     * @member {"OfflineTime"|undefined} _OfflineTime
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_OfflineTime", {
        get: $util.oneOfGetter($oneOfFields = ["OfflineTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _SceneGuid.
     * @member {"SceneGuid"|undefined} _SceneGuid
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_SceneGuid", {
        get: $util.oneOfGetter($oneOfFields = ["SceneGuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _CreateTime.
     * @member {"CreateTime"|undefined} _CreateTime
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_CreateTime", {
        get: $util.oneOfGetter($oneOfFields = ["CreateTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _CurTalentPoolId.
     * @member {"CurTalentPoolId"|undefined} _CurTalentPoolId
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_CurTalentPoolId", {
        get: $util.oneOfGetter($oneOfFields = ["CurTalentPoolId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _BotAiId.
     * @member {"BotAiId"|undefined} _BotAiId
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_BotAiId", {
        get: $util.oneOfGetter($oneOfFields = ["BotAiId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _RegisterChannel.
     * @member {"RegisterChannel"|undefined} _RegisterChannel
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_RegisterChannel", {
        get: $util.oneOfGetter($oneOfFields = ["RegisterChannel"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _CharState.
     * @member {"CharState"|undefined} _CharState
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_CharState", {
        get: $util.oneOfGetter($oneOfFields = ["CharState"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _OnlineTime.
     * @member {"OnlineTime"|undefined} _OnlineTime
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_OnlineTime", {
        get: $util.oneOfGetter($oneOfFields = ["OnlineTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _SumSaveDiamond.
     * @member {"SumSaveDiamond"|undefined} _SumSaveDiamond
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_SumSaveDiamond", {
        get: $util.oneOfGetter($oneOfFields = ["SumSaveDiamond"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BasicData _IsNewbie.
     * @member {"IsNewbie"|undefined} _IsNewbie
     * @memberof BasicData
     * @instance
     */
    Object.defineProperty(BasicData.prototype, "_IsNewbie", {
        get: $util.oneOfGetter($oneOfFields = ["IsNewbie"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new BasicData instance using the specified properties.
     * @function create
     * @memberof BasicData
     * @static
     * @param {IBasicData=} [properties] Properties to set
     * @returns {BasicData} BasicData instance
     */
    BasicData.create = function create(properties) {
        return new BasicData(properties);
    };

    /**
     * Encodes the specified BasicData message. Does not implicitly {@link BasicData.verify|verify} messages.
     * @function encode
     * @memberof BasicData
     * @static
     * @param {IBasicData} message BasicData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BasicData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.CharID != null && Object.hasOwnProperty.call(message, "CharID"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.CharID);
        if (message.ShowId != null && Object.hasOwnProperty.call(message, "ShowId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.ShowId);
        if (message.Name != null && Object.hasOwnProperty.call(message, "Name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.Name);
        if (message.Gender != null && Object.hasOwnProperty.call(message, "Gender"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.Gender);
        if (message.BodySize != null && Object.hasOwnProperty.call(message, "BodySize"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.BodySize);
        if (message.Level != null && Object.hasOwnProperty.call(message, "Level"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.Level);
        if (message.SceneId != null && Object.hasOwnProperty.call(message, "SceneId"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.SceneId);
        if (message.PersonalState != null && message.PersonalState.length) {
            writer.uint32(/* id 8, wireType 2 =*/66).fork();
            for (var i = 0; i < message.PersonalState.length; ++i)
                writer.int32(message.PersonalState[i]);
            writer.ldelim();
        }
        if (message.OfflineTime != null && Object.hasOwnProperty.call(message, "OfflineTime"))
            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.OfflineTime);
        if (message.SceneGuid != null && Object.hasOwnProperty.call(message, "SceneGuid"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.SceneGuid);
        if (message.CreateTime != null && Object.hasOwnProperty.call(message, "CreateTime"))
            writer.uint32(/* id 11, wireType 0 =*/88).int64(message.CreateTime);
        if (message.CurTalentPoolId != null && Object.hasOwnProperty.call(message, "CurTalentPoolId"))
            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.CurTalentPoolId);
        if (message.BotAiId != null && Object.hasOwnProperty.call(message, "BotAiId"))
            writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.BotAiId);
        if (message.RegisterChannel != null && Object.hasOwnProperty.call(message, "RegisterChannel"))
            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.RegisterChannel);
        if (message.CharState != null && Object.hasOwnProperty.call(message, "CharState"))
            writer.uint32(/* id 15, wireType 0 =*/120).uint64(message.CharState);
        if (message.OnlineTime != null && Object.hasOwnProperty.call(message, "OnlineTime"))
            writer.uint32(/* id 16, wireType 0 =*/128).int64(message.OnlineTime);
        if (message.SumSaveDiamond != null && Object.hasOwnProperty.call(message, "SumSaveDiamond"))
            writer.uint32(/* id 17, wireType 0 =*/136).int64(message.SumSaveDiamond);
        if (message.IsNewbie != null && Object.hasOwnProperty.call(message, "IsNewbie"))
            writer.uint32(/* id 18, wireType 0 =*/144).bool(message.IsNewbie);
        return writer;
    };

    /**
     * Encodes the specified BasicData message, length delimited. Does not implicitly {@link BasicData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BasicData
     * @static
     * @param {IBasicData} message BasicData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BasicData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BasicData message from the specified reader or buffer.
     * @function decode
     * @memberof BasicData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BasicData} BasicData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BasicData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BasicData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.CharID = reader.int64();
                    break;
                }
            case 2: {
                    message.ShowId = reader.int64();
                    break;
                }
            case 3: {
                    message.Name = reader.string();
                    break;
                }
            case 4: {
                    message.Gender = reader.int32();
                    break;
                }
            case 5: {
                    message.BodySize = reader.int32();
                    break;
                }
            case 6: {
                    message.Level = reader.int32();
                    break;
                }
            case 7: {
                    message.SceneId = reader.int32();
                    break;
                }
            case 8: {
                    if (!(message.PersonalState && message.PersonalState.length))
                        message.PersonalState = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.PersonalState.push(reader.int32());
                    } else
                        message.PersonalState.push(reader.int32());
                    break;
                }
            case 9: {
                    message.OfflineTime = reader.int64();
                    break;
                }
            case 10: {
                    message.SceneGuid = reader.string();
                    break;
                }
            case 11: {
                    message.CreateTime = reader.int64();
                    break;
                }
            case 12: {
                    message.CurTalentPoolId = reader.uint32();
                    break;
                }
            case 13: {
                    message.BotAiId = reader.uint32();
                    break;
                }
            case 14: {
                    message.RegisterChannel = reader.int32();
                    break;
                }
            case 15: {
                    message.CharState = reader.uint64();
                    break;
                }
            case 16: {
                    message.OnlineTime = reader.int64();
                    break;
                }
            case 17: {
                    message.SumSaveDiamond = reader.int64();
                    break;
                }
            case 18: {
                    message.IsNewbie = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BasicData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BasicData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BasicData} BasicData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BasicData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BasicData message.
     * @function verify
     * @memberof BasicData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BasicData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.CharID != null && message.hasOwnProperty("CharID")) {
            properties._CharID = 1;
            if (!$util.isInteger(message.CharID) && !(message.CharID && $util.isInteger(message.CharID.low) && $util.isInteger(message.CharID.high)))
                return "CharID: integer|Long expected";
        }
        if (message.ShowId != null && message.hasOwnProperty("ShowId")) {
            properties._ShowId = 1;
            if (!$util.isInteger(message.ShowId) && !(message.ShowId && $util.isInteger(message.ShowId.low) && $util.isInteger(message.ShowId.high)))
                return "ShowId: integer|Long expected";
        }
        if (message.Name != null && message.hasOwnProperty("Name")) {
            properties._Name = 1;
            if (!$util.isString(message.Name))
                return "Name: string expected";
        }
        if (message.Gender != null && message.hasOwnProperty("Gender")) {
            properties._Gender = 1;
            if (!$util.isInteger(message.Gender))
                return "Gender: integer expected";
        }
        if (message.BodySize != null && message.hasOwnProperty("BodySize")) {
            properties._BodySize = 1;
            switch (message.BodySize) {
            default:
                return "BodySize: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        }
        if (message.Level != null && message.hasOwnProperty("Level")) {
            properties._Level = 1;
            if (!$util.isInteger(message.Level))
                return "Level: integer expected";
        }
        if (message.SceneId != null && message.hasOwnProperty("SceneId")) {
            properties._SceneId = 1;
            if (!$util.isInteger(message.SceneId))
                return "SceneId: integer expected";
        }
        if (message.PersonalState != null && message.hasOwnProperty("PersonalState")) {
            if (!Array.isArray(message.PersonalState))
                return "PersonalState: array expected";
            for (var i = 0; i < message.PersonalState.length; ++i)
                if (!$util.isInteger(message.PersonalState[i]))
                    return "PersonalState: integer[] expected";
        }
        if (message.OfflineTime != null && message.hasOwnProperty("OfflineTime")) {
            properties._OfflineTime = 1;
            if (!$util.isInteger(message.OfflineTime) && !(message.OfflineTime && $util.isInteger(message.OfflineTime.low) && $util.isInteger(message.OfflineTime.high)))
                return "OfflineTime: integer|Long expected";
        }
        if (message.SceneGuid != null && message.hasOwnProperty("SceneGuid")) {
            properties._SceneGuid = 1;
            if (!$util.isString(message.SceneGuid))
                return "SceneGuid: string expected";
        }
        if (message.CreateTime != null && message.hasOwnProperty("CreateTime")) {
            properties._CreateTime = 1;
            if (!$util.isInteger(message.CreateTime) && !(message.CreateTime && $util.isInteger(message.CreateTime.low) && $util.isInteger(message.CreateTime.high)))
                return "CreateTime: integer|Long expected";
        }
        if (message.CurTalentPoolId != null && message.hasOwnProperty("CurTalentPoolId")) {
            properties._CurTalentPoolId = 1;
            if (!$util.isInteger(message.CurTalentPoolId))
                return "CurTalentPoolId: integer expected";
        }
        if (message.BotAiId != null && message.hasOwnProperty("BotAiId")) {
            properties._BotAiId = 1;
            if (!$util.isInteger(message.BotAiId))
                return "BotAiId: integer expected";
        }
        if (message.RegisterChannel != null && message.hasOwnProperty("RegisterChannel")) {
            properties._RegisterChannel = 1;
            if (!$util.isInteger(message.RegisterChannel))
                return "RegisterChannel: integer expected";
        }
        if (message.CharState != null && message.hasOwnProperty("CharState")) {
            properties._CharState = 1;
            if (!$util.isInteger(message.CharState) && !(message.CharState && $util.isInteger(message.CharState.low) && $util.isInteger(message.CharState.high)))
                return "CharState: integer|Long expected";
        }
        if (message.OnlineTime != null && message.hasOwnProperty("OnlineTime")) {
            properties._OnlineTime = 1;
            if (!$util.isInteger(message.OnlineTime) && !(message.OnlineTime && $util.isInteger(message.OnlineTime.low) && $util.isInteger(message.OnlineTime.high)))
                return "OnlineTime: integer|Long expected";
        }
        if (message.SumSaveDiamond != null && message.hasOwnProperty("SumSaveDiamond")) {
            properties._SumSaveDiamond = 1;
            if (!$util.isInteger(message.SumSaveDiamond) && !(message.SumSaveDiamond && $util.isInteger(message.SumSaveDiamond.low) && $util.isInteger(message.SumSaveDiamond.high)))
                return "SumSaveDiamond: integer|Long expected";
        }
        if (message.IsNewbie != null && message.hasOwnProperty("IsNewbie")) {
            properties._IsNewbie = 1;
            if (typeof message.IsNewbie !== "boolean")
                return "IsNewbie: boolean expected";
        }
        return null;
    };

    /**
     * Creates a BasicData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BasicData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BasicData} BasicData
     */
    BasicData.fromObject = function fromObject(object) {
        if (object instanceof $root.BasicData)
            return object;
        var message = new $root.BasicData();
        if (object.CharID != null)
            if ($util.Long)
                (message.CharID = $util.Long.fromValue(object.CharID)).unsigned = false;
            else if (typeof object.CharID === "string")
                message.CharID = parseInt(object.CharID, 10);
            else if (typeof object.CharID === "number")
                message.CharID = object.CharID;
            else if (typeof object.CharID === "object")
                message.CharID = new $util.LongBits(object.CharID.low >>> 0, object.CharID.high >>> 0).toNumber();
        if (object.ShowId != null)
            if ($util.Long)
                (message.ShowId = $util.Long.fromValue(object.ShowId)).unsigned = false;
            else if (typeof object.ShowId === "string")
                message.ShowId = parseInt(object.ShowId, 10);
            else if (typeof object.ShowId === "number")
                message.ShowId = object.ShowId;
            else if (typeof object.ShowId === "object")
                message.ShowId = new $util.LongBits(object.ShowId.low >>> 0, object.ShowId.high >>> 0).toNumber();
        if (object.Name != null)
            message.Name = String(object.Name);
        if (object.Gender != null)
            message.Gender = object.Gender | 0;
        switch (object.BodySize) {
        default:
            if (typeof object.BodySize === "number") {
                message.BodySize = object.BodySize;
                break;
            }
            break;
        case "BodySizeNull":
        case 0:
            message.BodySize = 0;
            break;
        case "BodySizeS":
        case 1:
            message.BodySize = 1;
            break;
        case "BodySizeM":
        case 2:
            message.BodySize = 2;
            break;
        case "BodySizeL":
        case 3:
            message.BodySize = 3;
            break;
        }
        if (object.Level != null)
            message.Level = object.Level | 0;
        if (object.SceneId != null)
            message.SceneId = object.SceneId | 0;
        if (object.PersonalState) {
            if (!Array.isArray(object.PersonalState))
                throw TypeError(".BasicData.PersonalState: array expected");
            message.PersonalState = [];
            for (var i = 0; i < object.PersonalState.length; ++i)
                message.PersonalState[i] = object.PersonalState[i] | 0;
        }
        if (object.OfflineTime != null)
            if ($util.Long)
                (message.OfflineTime = $util.Long.fromValue(object.OfflineTime)).unsigned = false;
            else if (typeof object.OfflineTime === "string")
                message.OfflineTime = parseInt(object.OfflineTime, 10);
            else if (typeof object.OfflineTime === "number")
                message.OfflineTime = object.OfflineTime;
            else if (typeof object.OfflineTime === "object")
                message.OfflineTime = new $util.LongBits(object.OfflineTime.low >>> 0, object.OfflineTime.high >>> 0).toNumber();
        if (object.SceneGuid != null)
            message.SceneGuid = String(object.SceneGuid);
        if (object.CreateTime != null)
            if ($util.Long)
                (message.CreateTime = $util.Long.fromValue(object.CreateTime)).unsigned = false;
            else if (typeof object.CreateTime === "string")
                message.CreateTime = parseInt(object.CreateTime, 10);
            else if (typeof object.CreateTime === "number")
                message.CreateTime = object.CreateTime;
            else if (typeof object.CreateTime === "object")
                message.CreateTime = new $util.LongBits(object.CreateTime.low >>> 0, object.CreateTime.high >>> 0).toNumber();
        if (object.CurTalentPoolId != null)
            message.CurTalentPoolId = object.CurTalentPoolId >>> 0;
        if (object.BotAiId != null)
            message.BotAiId = object.BotAiId >>> 0;
        if (object.RegisterChannel != null)
            message.RegisterChannel = object.RegisterChannel | 0;
        if (object.CharState != null)
            if ($util.Long)
                (message.CharState = $util.Long.fromValue(object.CharState)).unsigned = true;
            else if (typeof object.CharState === "string")
                message.CharState = parseInt(object.CharState, 10);
            else if (typeof object.CharState === "number")
                message.CharState = object.CharState;
            else if (typeof object.CharState === "object")
                message.CharState = new $util.LongBits(object.CharState.low >>> 0, object.CharState.high >>> 0).toNumber(true);
        if (object.OnlineTime != null)
            if ($util.Long)
                (message.OnlineTime = $util.Long.fromValue(object.OnlineTime)).unsigned = false;
            else if (typeof object.OnlineTime === "string")
                message.OnlineTime = parseInt(object.OnlineTime, 10);
            else if (typeof object.OnlineTime === "number")
                message.OnlineTime = object.OnlineTime;
            else if (typeof object.OnlineTime === "object")
                message.OnlineTime = new $util.LongBits(object.OnlineTime.low >>> 0, object.OnlineTime.high >>> 0).toNumber();
        if (object.SumSaveDiamond != null)
            if ($util.Long)
                (message.SumSaveDiamond = $util.Long.fromValue(object.SumSaveDiamond)).unsigned = false;
            else if (typeof object.SumSaveDiamond === "string")
                message.SumSaveDiamond = parseInt(object.SumSaveDiamond, 10);
            else if (typeof object.SumSaveDiamond === "number")
                message.SumSaveDiamond = object.SumSaveDiamond;
            else if (typeof object.SumSaveDiamond === "object")
                message.SumSaveDiamond = new $util.LongBits(object.SumSaveDiamond.low >>> 0, object.SumSaveDiamond.high >>> 0).toNumber();
        if (object.IsNewbie != null)
            message.IsNewbie = Boolean(object.IsNewbie);
        return message;
    };

    /**
     * Creates a plain object from a BasicData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BasicData
     * @static
     * @param {BasicData} message BasicData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BasicData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.PersonalState = [];
        if (message.CharID != null && message.hasOwnProperty("CharID")) {
            if (typeof message.CharID === "number")
                object.CharID = options.longs === String ? String(message.CharID) : message.CharID;
            else
                object.CharID = options.longs === String ? $util.Long.prototype.toString.call(message.CharID) : options.longs === Number ? new $util.LongBits(message.CharID.low >>> 0, message.CharID.high >>> 0).toNumber() : message.CharID;
            if (options.oneofs)
                object._CharID = "CharID";
        }
        if (message.ShowId != null && message.hasOwnProperty("ShowId")) {
            if (typeof message.ShowId === "number")
                object.ShowId = options.longs === String ? String(message.ShowId) : message.ShowId;
            else
                object.ShowId = options.longs === String ? $util.Long.prototype.toString.call(message.ShowId) : options.longs === Number ? new $util.LongBits(message.ShowId.low >>> 0, message.ShowId.high >>> 0).toNumber() : message.ShowId;
            if (options.oneofs)
                object._ShowId = "ShowId";
        }
        if (message.Name != null && message.hasOwnProperty("Name")) {
            object.Name = message.Name;
            if (options.oneofs)
                object._Name = "Name";
        }
        if (message.Gender != null && message.hasOwnProperty("Gender")) {
            object.Gender = message.Gender;
            if (options.oneofs)
                object._Gender = "Gender";
        }
        if (message.BodySize != null && message.hasOwnProperty("BodySize")) {
            object.BodySize = options.enums === String ? $root.EBodySize[message.BodySize] === undefined ? message.BodySize : $root.EBodySize[message.BodySize] : message.BodySize;
            if (options.oneofs)
                object._BodySize = "BodySize";
        }
        if (message.Level != null && message.hasOwnProperty("Level")) {
            object.Level = message.Level;
            if (options.oneofs)
                object._Level = "Level";
        }
        if (message.SceneId != null && message.hasOwnProperty("SceneId")) {
            object.SceneId = message.SceneId;
            if (options.oneofs)
                object._SceneId = "SceneId";
        }
        if (message.PersonalState && message.PersonalState.length) {
            object.PersonalState = [];
            for (var j = 0; j < message.PersonalState.length; ++j)
                object.PersonalState[j] = message.PersonalState[j];
        }
        if (message.OfflineTime != null && message.hasOwnProperty("OfflineTime")) {
            if (typeof message.OfflineTime === "number")
                object.OfflineTime = options.longs === String ? String(message.OfflineTime) : message.OfflineTime;
            else
                object.OfflineTime = options.longs === String ? $util.Long.prototype.toString.call(message.OfflineTime) : options.longs === Number ? new $util.LongBits(message.OfflineTime.low >>> 0, message.OfflineTime.high >>> 0).toNumber() : message.OfflineTime;
            if (options.oneofs)
                object._OfflineTime = "OfflineTime";
        }
        if (message.SceneGuid != null && message.hasOwnProperty("SceneGuid")) {
            object.SceneGuid = message.SceneGuid;
            if (options.oneofs)
                object._SceneGuid = "SceneGuid";
        }
        if (message.CreateTime != null && message.hasOwnProperty("CreateTime")) {
            if (typeof message.CreateTime === "number")
                object.CreateTime = options.longs === String ? String(message.CreateTime) : message.CreateTime;
            else
                object.CreateTime = options.longs === String ? $util.Long.prototype.toString.call(message.CreateTime) : options.longs === Number ? new $util.LongBits(message.CreateTime.low >>> 0, message.CreateTime.high >>> 0).toNumber() : message.CreateTime;
            if (options.oneofs)
                object._CreateTime = "CreateTime";
        }
        if (message.CurTalentPoolId != null && message.hasOwnProperty("CurTalentPoolId")) {
            object.CurTalentPoolId = message.CurTalentPoolId;
            if (options.oneofs)
                object._CurTalentPoolId = "CurTalentPoolId";
        }
        if (message.BotAiId != null && message.hasOwnProperty("BotAiId")) {
            object.BotAiId = message.BotAiId;
            if (options.oneofs)
                object._BotAiId = "BotAiId";
        }
        if (message.RegisterChannel != null && message.hasOwnProperty("RegisterChannel")) {
            object.RegisterChannel = message.RegisterChannel;
            if (options.oneofs)
                object._RegisterChannel = "RegisterChannel";
        }
        if (message.CharState != null && message.hasOwnProperty("CharState")) {
            if (typeof message.CharState === "number")
                object.CharState = options.longs === String ? String(message.CharState) : message.CharState;
            else
                object.CharState = options.longs === String ? $util.Long.prototype.toString.call(message.CharState) : options.longs === Number ? new $util.LongBits(message.CharState.low >>> 0, message.CharState.high >>> 0).toNumber(true) : message.CharState;
            if (options.oneofs)
                object._CharState = "CharState";
        }
        if (message.OnlineTime != null && message.hasOwnProperty("OnlineTime")) {
            if (typeof message.OnlineTime === "number")
                object.OnlineTime = options.longs === String ? String(message.OnlineTime) : message.OnlineTime;
            else
                object.OnlineTime = options.longs === String ? $util.Long.prototype.toString.call(message.OnlineTime) : options.longs === Number ? new $util.LongBits(message.OnlineTime.low >>> 0, message.OnlineTime.high >>> 0).toNumber() : message.OnlineTime;
            if (options.oneofs)
                object._OnlineTime = "OnlineTime";
        }
        if (message.SumSaveDiamond != null && message.hasOwnProperty("SumSaveDiamond")) {
            if (typeof message.SumSaveDiamond === "number")
                object.SumSaveDiamond = options.longs === String ? String(message.SumSaveDiamond) : message.SumSaveDiamond;
            else
                object.SumSaveDiamond = options.longs === String ? $util.Long.prototype.toString.call(message.SumSaveDiamond) : options.longs === Number ? new $util.LongBits(message.SumSaveDiamond.low >>> 0, message.SumSaveDiamond.high >>> 0).toNumber() : message.SumSaveDiamond;
            if (options.oneofs)
                object._SumSaveDiamond = "SumSaveDiamond";
        }
        if (message.IsNewbie != null && message.hasOwnProperty("IsNewbie")) {
            object.IsNewbie = message.IsNewbie;
            if (options.oneofs)
                object._IsNewbie = "IsNewbie";
        }
        return object;
    };

    /**
     * Converts this BasicData to JSON.
     * @function toJSON
     * @memberof BasicData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BasicData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BasicData
     * @function getTypeUrl
     * @memberof BasicData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BasicData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BasicData";
    };

    return BasicData;
})();

$root.PictureVerify = (function() {

    /**
     * Properties of a PictureVerify.
     * @exports IPictureVerify
     * @interface IPictureVerify
     * @property {number|null} [Size] PictureVerify Size
     * @property {number|null} [ReviewStartTime] PictureVerify ReviewStartTime
     * @property {number|Long|null} [Version] PictureVerify Version
     */

    /**
     * Constructs a new PictureVerify.
     * @exports PictureVerify
     * @classdesc Represents a PictureVerify.
     * @implements IPictureVerify
     * @constructor
     * @param {IPictureVerify=} [properties] Properties to set
     */
    function PictureVerify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PictureVerify Size.
     * @member {number|null|undefined} Size
     * @memberof PictureVerify
     * @instance
     */
    PictureVerify.prototype.Size = null;

    /**
     * PictureVerify ReviewStartTime.
     * @member {number|null|undefined} ReviewStartTime
     * @memberof PictureVerify
     * @instance
     */
    PictureVerify.prototype.ReviewStartTime = null;

    /**
     * PictureVerify Version.
     * @member {number|Long|null|undefined} Version
     * @memberof PictureVerify
     * @instance
     */
    PictureVerify.prototype.Version = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * PictureVerify _Size.
     * @member {"Size"|undefined} _Size
     * @memberof PictureVerify
     * @instance
     */
    Object.defineProperty(PictureVerify.prototype, "_Size", {
        get: $util.oneOfGetter($oneOfFields = ["Size"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PictureVerify _ReviewStartTime.
     * @member {"ReviewStartTime"|undefined} _ReviewStartTime
     * @memberof PictureVerify
     * @instance
     */
    Object.defineProperty(PictureVerify.prototype, "_ReviewStartTime", {
        get: $util.oneOfGetter($oneOfFields = ["ReviewStartTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PictureVerify _Version.
     * @member {"Version"|undefined} _Version
     * @memberof PictureVerify
     * @instance
     */
    Object.defineProperty(PictureVerify.prototype, "_Version", {
        get: $util.oneOfGetter($oneOfFields = ["Version"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new PictureVerify instance using the specified properties.
     * @function create
     * @memberof PictureVerify
     * @static
     * @param {IPictureVerify=} [properties] Properties to set
     * @returns {PictureVerify} PictureVerify instance
     */
    PictureVerify.create = function create(properties) {
        return new PictureVerify(properties);
    };

    /**
     * Encodes the specified PictureVerify message. Does not implicitly {@link PictureVerify.verify|verify} messages.
     * @function encode
     * @memberof PictureVerify
     * @static
     * @param {IPictureVerify} message PictureVerify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PictureVerify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Size != null && Object.hasOwnProperty.call(message, "Size"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Size);
        if (message.ReviewStartTime != null && Object.hasOwnProperty.call(message, "ReviewStartTime"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ReviewStartTime);
        if (message.Version != null && Object.hasOwnProperty.call(message, "Version"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.Version);
        return writer;
    };

    /**
     * Encodes the specified PictureVerify message, length delimited. Does not implicitly {@link PictureVerify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PictureVerify
     * @static
     * @param {IPictureVerify} message PictureVerify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PictureVerify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PictureVerify message from the specified reader or buffer.
     * @function decode
     * @memberof PictureVerify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PictureVerify} PictureVerify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PictureVerify.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PictureVerify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Size = reader.uint32();
                    break;
                }
            case 2: {
                    message.ReviewStartTime = reader.uint32();
                    break;
                }
            case 3: {
                    message.Version = reader.int64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PictureVerify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PictureVerify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PictureVerify} PictureVerify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PictureVerify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PictureVerify message.
     * @function verify
     * @memberof PictureVerify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PictureVerify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Size != null && message.hasOwnProperty("Size")) {
            properties._Size = 1;
            if (!$util.isInteger(message.Size))
                return "Size: integer expected";
        }
        if (message.ReviewStartTime != null && message.hasOwnProperty("ReviewStartTime")) {
            properties._ReviewStartTime = 1;
            if (!$util.isInteger(message.ReviewStartTime))
                return "ReviewStartTime: integer expected";
        }
        if (message.Version != null && message.hasOwnProperty("Version")) {
            properties._Version = 1;
            if (!$util.isInteger(message.Version) && !(message.Version && $util.isInteger(message.Version.low) && $util.isInteger(message.Version.high)))
                return "Version: integer|Long expected";
        }
        return null;
    };

    /**
     * Creates a PictureVerify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PictureVerify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PictureVerify} PictureVerify
     */
    PictureVerify.fromObject = function fromObject(object) {
        if (object instanceof $root.PictureVerify)
            return object;
        var message = new $root.PictureVerify();
        if (object.Size != null)
            message.Size = object.Size >>> 0;
        if (object.ReviewStartTime != null)
            message.ReviewStartTime = object.ReviewStartTime >>> 0;
        if (object.Version != null)
            if ($util.Long)
                (message.Version = $util.Long.fromValue(object.Version)).unsigned = false;
            else if (typeof object.Version === "string")
                message.Version = parseInt(object.Version, 10);
            else if (typeof object.Version === "number")
                message.Version = object.Version;
            else if (typeof object.Version === "object")
                message.Version = new $util.LongBits(object.Version.low >>> 0, object.Version.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a PictureVerify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PictureVerify
     * @static
     * @param {PictureVerify} message PictureVerify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PictureVerify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Size != null && message.hasOwnProperty("Size")) {
            object.Size = message.Size;
            if (options.oneofs)
                object._Size = "Size";
        }
        if (message.ReviewStartTime != null && message.hasOwnProperty("ReviewStartTime")) {
            object.ReviewStartTime = message.ReviewStartTime;
            if (options.oneofs)
                object._ReviewStartTime = "ReviewStartTime";
        }
        if (message.Version != null && message.hasOwnProperty("Version")) {
            if (typeof message.Version === "number")
                object.Version = options.longs === String ? String(message.Version) : message.Version;
            else
                object.Version = options.longs === String ? $util.Long.prototype.toString.call(message.Version) : options.longs === Number ? new $util.LongBits(message.Version.low >>> 0, message.Version.high >>> 0).toNumber() : message.Version;
            if (options.oneofs)
                object._Version = "Version";
        }
        return object;
    };

    /**
     * Converts this PictureVerify to JSON.
     * @function toJSON
     * @memberof PictureVerify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PictureVerify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PictureVerify
     * @function getTypeUrl
     * @memberof PictureVerify
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PictureVerify.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PictureVerify";
    };

    return PictureVerify;
})();

$root.PictureInfo = (function() {

    /**
     * Properties of a PictureInfo.
     * @exports IPictureInfo
     * @interface IPictureInfo
     * @property {string|null} [Url] PictureInfo Url
     * @property {IPictureVerify|null} [Verify] PictureInfo Verify
     */

    /**
     * Constructs a new PictureInfo.
     * @exports PictureInfo
     * @classdesc Represents a PictureInfo.
     * @implements IPictureInfo
     * @constructor
     * @param {IPictureInfo=} [properties] Properties to set
     */
    function PictureInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PictureInfo Url.
     * @member {string|null|undefined} Url
     * @memberof PictureInfo
     * @instance
     */
    PictureInfo.prototype.Url = null;

    /**
     * PictureInfo Verify.
     * @member {IPictureVerify|null|undefined} Verify
     * @memberof PictureInfo
     * @instance
     */
    PictureInfo.prototype.Verify = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * PictureInfo _Url.
     * @member {"Url"|undefined} _Url
     * @memberof PictureInfo
     * @instance
     */
    Object.defineProperty(PictureInfo.prototype, "_Url", {
        get: $util.oneOfGetter($oneOfFields = ["Url"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PictureInfo _Verify.
     * @member {"Verify"|undefined} _Verify
     * @memberof PictureInfo
     * @instance
     */
    Object.defineProperty(PictureInfo.prototype, "_Verify", {
        get: $util.oneOfGetter($oneOfFields = ["Verify"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new PictureInfo instance using the specified properties.
     * @function create
     * @memberof PictureInfo
     * @static
     * @param {IPictureInfo=} [properties] Properties to set
     * @returns {PictureInfo} PictureInfo instance
     */
    PictureInfo.create = function create(properties) {
        return new PictureInfo(properties);
    };

    /**
     * Encodes the specified PictureInfo message. Does not implicitly {@link PictureInfo.verify|verify} messages.
     * @function encode
     * @memberof PictureInfo
     * @static
     * @param {IPictureInfo} message PictureInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PictureInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Url != null && Object.hasOwnProperty.call(message, "Url"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.Url);
        if (message.Verify != null && Object.hasOwnProperty.call(message, "Verify"))
            $root.PictureVerify.encode(message.Verify, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PictureInfo message, length delimited. Does not implicitly {@link PictureInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PictureInfo
     * @static
     * @param {IPictureInfo} message PictureInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PictureInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PictureInfo message from the specified reader or buffer.
     * @function decode
     * @memberof PictureInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PictureInfo} PictureInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PictureInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PictureInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Url = reader.string();
                    break;
                }
            case 2: {
                    message.Verify = $root.PictureVerify.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PictureInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PictureInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PictureInfo} PictureInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PictureInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PictureInfo message.
     * @function verify
     * @memberof PictureInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PictureInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Url != null && message.hasOwnProperty("Url")) {
            properties._Url = 1;
            if (!$util.isString(message.Url))
                return "Url: string expected";
        }
        if (message.Verify != null && message.hasOwnProperty("Verify")) {
            properties._Verify = 1;
            {
                var error = $root.PictureVerify.verify(message.Verify);
                if (error)
                    return "Verify." + error;
            }
        }
        return null;
    };

    /**
     * Creates a PictureInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PictureInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PictureInfo} PictureInfo
     */
    PictureInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.PictureInfo)
            return object;
        var message = new $root.PictureInfo();
        if (object.Url != null)
            message.Url = String(object.Url);
        if (object.Verify != null) {
            if (typeof object.Verify !== "object")
                throw TypeError(".PictureInfo.Verify: object expected");
            message.Verify = $root.PictureVerify.fromObject(object.Verify);
        }
        return message;
    };

    /**
     * Creates a plain object from a PictureInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PictureInfo
     * @static
     * @param {PictureInfo} message PictureInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PictureInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Url != null && message.hasOwnProperty("Url")) {
            object.Url = message.Url;
            if (options.oneofs)
                object._Url = "Url";
        }
        if (message.Verify != null && message.hasOwnProperty("Verify")) {
            object.Verify = $root.PictureVerify.toObject(message.Verify, options);
            if (options.oneofs)
                object._Verify = "Verify";
        }
        return object;
    };

    /**
     * Converts this PictureInfo to JSON.
     * @function toJSON
     * @memberof PictureInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PictureInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PictureInfo
     * @function getTypeUrl
     * @memberof PictureInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PictureInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PictureInfo";
    };

    return PictureInfo;
})();

$root.AvatarInfo = (function() {

    /**
     * Properties of an AvatarInfo.
     * @exports IAvatarInfo
     * @interface IAvatarInfo
     * @property {number|null} [AvatarId] AvatarInfo AvatarId
     * @property {IPictureInfo|null} [Profile] AvatarInfo Profile
     * @property {IPictureInfo|null} [HalfBody] AvatarInfo HalfBody
     * @property {number|null} [BusinessCardStyleId] AvatarInfo BusinessCardStyleId
     * @property {number|null} [AvatarFrameId] AvatarInfo AvatarFrameId
     */

    /**
     * Constructs a new AvatarInfo.
     * @exports AvatarInfo
     * @classdesc Represents an AvatarInfo.
     * @implements IAvatarInfo
     * @constructor
     * @param {IAvatarInfo=} [properties] Properties to set
     */
    function AvatarInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * AvatarInfo AvatarId.
     * @member {number|null|undefined} AvatarId
     * @memberof AvatarInfo
     * @instance
     */
    AvatarInfo.prototype.AvatarId = null;

    /**
     * AvatarInfo Profile.
     * @member {IPictureInfo|null|undefined} Profile
     * @memberof AvatarInfo
     * @instance
     */
    AvatarInfo.prototype.Profile = null;

    /**
     * AvatarInfo HalfBody.
     * @member {IPictureInfo|null|undefined} HalfBody
     * @memberof AvatarInfo
     * @instance
     */
    AvatarInfo.prototype.HalfBody = null;

    /**
     * AvatarInfo BusinessCardStyleId.
     * @member {number|null|undefined} BusinessCardStyleId
     * @memberof AvatarInfo
     * @instance
     */
    AvatarInfo.prototype.BusinessCardStyleId = null;

    /**
     * AvatarInfo AvatarFrameId.
     * @member {number|null|undefined} AvatarFrameId
     * @memberof AvatarInfo
     * @instance
     */
    AvatarInfo.prototype.AvatarFrameId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * AvatarInfo _AvatarId.
     * @member {"AvatarId"|undefined} _AvatarId
     * @memberof AvatarInfo
     * @instance
     */
    Object.defineProperty(AvatarInfo.prototype, "_AvatarId", {
        get: $util.oneOfGetter($oneOfFields = ["AvatarId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AvatarInfo _Profile.
     * @member {"Profile"|undefined} _Profile
     * @memberof AvatarInfo
     * @instance
     */
    Object.defineProperty(AvatarInfo.prototype, "_Profile", {
        get: $util.oneOfGetter($oneOfFields = ["Profile"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AvatarInfo _HalfBody.
     * @member {"HalfBody"|undefined} _HalfBody
     * @memberof AvatarInfo
     * @instance
     */
    Object.defineProperty(AvatarInfo.prototype, "_HalfBody", {
        get: $util.oneOfGetter($oneOfFields = ["HalfBody"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AvatarInfo _BusinessCardStyleId.
     * @member {"BusinessCardStyleId"|undefined} _BusinessCardStyleId
     * @memberof AvatarInfo
     * @instance
     */
    Object.defineProperty(AvatarInfo.prototype, "_BusinessCardStyleId", {
        get: $util.oneOfGetter($oneOfFields = ["BusinessCardStyleId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AvatarInfo _AvatarFrameId.
     * @member {"AvatarFrameId"|undefined} _AvatarFrameId
     * @memberof AvatarInfo
     * @instance
     */
    Object.defineProperty(AvatarInfo.prototype, "_AvatarFrameId", {
        get: $util.oneOfGetter($oneOfFields = ["AvatarFrameId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new AvatarInfo instance using the specified properties.
     * @function create
     * @memberof AvatarInfo
     * @static
     * @param {IAvatarInfo=} [properties] Properties to set
     * @returns {AvatarInfo} AvatarInfo instance
     */
    AvatarInfo.create = function create(properties) {
        return new AvatarInfo(properties);
    };

    /**
     * Encodes the specified AvatarInfo message. Does not implicitly {@link AvatarInfo.verify|verify} messages.
     * @function encode
     * @memberof AvatarInfo
     * @static
     * @param {IAvatarInfo} message AvatarInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AvatarInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.AvatarId != null && Object.hasOwnProperty.call(message, "AvatarId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.AvatarId);
        if (message.Profile != null && Object.hasOwnProperty.call(message, "Profile"))
            $root.PictureInfo.encode(message.Profile, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.HalfBody != null && Object.hasOwnProperty.call(message, "HalfBody"))
            $root.PictureInfo.encode(message.HalfBody, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.BusinessCardStyleId != null && Object.hasOwnProperty.call(message, "BusinessCardStyleId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.BusinessCardStyleId);
        if (message.AvatarFrameId != null && Object.hasOwnProperty.call(message, "AvatarFrameId"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.AvatarFrameId);
        return writer;
    };

    /**
     * Encodes the specified AvatarInfo message, length delimited. Does not implicitly {@link AvatarInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AvatarInfo
     * @static
     * @param {IAvatarInfo} message AvatarInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AvatarInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AvatarInfo message from the specified reader or buffer.
     * @function decode
     * @memberof AvatarInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AvatarInfo} AvatarInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AvatarInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AvatarInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.AvatarId = reader.int32();
                    break;
                }
            case 2: {
                    message.Profile = $root.PictureInfo.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.HalfBody = $root.PictureInfo.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.BusinessCardStyleId = reader.int32();
                    break;
                }
            case 5: {
                    message.AvatarFrameId = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an AvatarInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AvatarInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AvatarInfo} AvatarInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AvatarInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AvatarInfo message.
     * @function verify
     * @memberof AvatarInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AvatarInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.AvatarId != null && message.hasOwnProperty("AvatarId")) {
            properties._AvatarId = 1;
            if (!$util.isInteger(message.AvatarId))
                return "AvatarId: integer expected";
        }
        if (message.Profile != null && message.hasOwnProperty("Profile")) {
            properties._Profile = 1;
            {
                var error = $root.PictureInfo.verify(message.Profile);
                if (error)
                    return "Profile." + error;
            }
        }
        if (message.HalfBody != null && message.hasOwnProperty("HalfBody")) {
            properties._HalfBody = 1;
            {
                var error = $root.PictureInfo.verify(message.HalfBody);
                if (error)
                    return "HalfBody." + error;
            }
        }
        if (message.BusinessCardStyleId != null && message.hasOwnProperty("BusinessCardStyleId")) {
            properties._BusinessCardStyleId = 1;
            if (!$util.isInteger(message.BusinessCardStyleId))
                return "BusinessCardStyleId: integer expected";
        }
        if (message.AvatarFrameId != null && message.hasOwnProperty("AvatarFrameId")) {
            properties._AvatarFrameId = 1;
            if (!$util.isInteger(message.AvatarFrameId))
                return "AvatarFrameId: integer expected";
        }
        return null;
    };

    /**
     * Creates an AvatarInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AvatarInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AvatarInfo} AvatarInfo
     */
    AvatarInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.AvatarInfo)
            return object;
        var message = new $root.AvatarInfo();
        if (object.AvatarId != null)
            message.AvatarId = object.AvatarId | 0;
        if (object.Profile != null) {
            if (typeof object.Profile !== "object")
                throw TypeError(".AvatarInfo.Profile: object expected");
            message.Profile = $root.PictureInfo.fromObject(object.Profile);
        }
        if (object.HalfBody != null) {
            if (typeof object.HalfBody !== "object")
                throw TypeError(".AvatarInfo.HalfBody: object expected");
            message.HalfBody = $root.PictureInfo.fromObject(object.HalfBody);
        }
        if (object.BusinessCardStyleId != null)
            message.BusinessCardStyleId = object.BusinessCardStyleId | 0;
        if (object.AvatarFrameId != null)
            message.AvatarFrameId = object.AvatarFrameId | 0;
        return message;
    };

    /**
     * Creates a plain object from an AvatarInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AvatarInfo
     * @static
     * @param {AvatarInfo} message AvatarInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AvatarInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.AvatarId != null && message.hasOwnProperty("AvatarId")) {
            object.AvatarId = message.AvatarId;
            if (options.oneofs)
                object._AvatarId = "AvatarId";
        }
        if (message.Profile != null && message.hasOwnProperty("Profile")) {
            object.Profile = $root.PictureInfo.toObject(message.Profile, options);
            if (options.oneofs)
                object._Profile = "Profile";
        }
        if (message.HalfBody != null && message.hasOwnProperty("HalfBody")) {
            object.HalfBody = $root.PictureInfo.toObject(message.HalfBody, options);
            if (options.oneofs)
                object._HalfBody = "HalfBody";
        }
        if (message.BusinessCardStyleId != null && message.hasOwnProperty("BusinessCardStyleId")) {
            object.BusinessCardStyleId = message.BusinessCardStyleId;
            if (options.oneofs)
                object._BusinessCardStyleId = "BusinessCardStyleId";
        }
        if (message.AvatarFrameId != null && message.hasOwnProperty("AvatarFrameId")) {
            object.AvatarFrameId = message.AvatarFrameId;
            if (options.oneofs)
                object._AvatarFrameId = "AvatarFrameId";
        }
        return object;
    };

    /**
     * Converts this AvatarInfo to JSON.
     * @function toJSON
     * @memberof AvatarInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AvatarInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for AvatarInfo
     * @function getTypeUrl
     * @memberof AvatarInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    AvatarInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/AvatarInfo";
    };

    return AvatarInfo;
})();

$root.IntVec3 = (function() {

    /**
     * Properties of an IntVec3.
     * @exports IIntVec3
     * @interface IIntVec3
     * @property {number|null} [X] IntVec3 X
     * @property {number|null} [Y] IntVec3 Y
     * @property {number|null} [Z] IntVec3 Z
     */

    /**
     * Constructs a new IntVec3.
     * @exports IntVec3
     * @classdesc Represents an IntVec3.
     * @implements IIntVec3
     * @constructor
     * @param {IIntVec3=} [properties] Properties to set
     */
    function IntVec3(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * IntVec3 X.
     * @member {number|null|undefined} X
     * @memberof IntVec3
     * @instance
     */
    IntVec3.prototype.X = null;

    /**
     * IntVec3 Y.
     * @member {number|null|undefined} Y
     * @memberof IntVec3
     * @instance
     */
    IntVec3.prototype.Y = null;

    /**
     * IntVec3 Z.
     * @member {number|null|undefined} Z
     * @memberof IntVec3
     * @instance
     */
    IntVec3.prototype.Z = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * IntVec3 _X.
     * @member {"X"|undefined} _X
     * @memberof IntVec3
     * @instance
     */
    Object.defineProperty(IntVec3.prototype, "_X", {
        get: $util.oneOfGetter($oneOfFields = ["X"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * IntVec3 _Y.
     * @member {"Y"|undefined} _Y
     * @memberof IntVec3
     * @instance
     */
    Object.defineProperty(IntVec3.prototype, "_Y", {
        get: $util.oneOfGetter($oneOfFields = ["Y"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * IntVec3 _Z.
     * @member {"Z"|undefined} _Z
     * @memberof IntVec3
     * @instance
     */
    Object.defineProperty(IntVec3.prototype, "_Z", {
        get: $util.oneOfGetter($oneOfFields = ["Z"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new IntVec3 instance using the specified properties.
     * @function create
     * @memberof IntVec3
     * @static
     * @param {IIntVec3=} [properties] Properties to set
     * @returns {IntVec3} IntVec3 instance
     */
    IntVec3.create = function create(properties) {
        return new IntVec3(properties);
    };

    /**
     * Encodes the specified IntVec3 message. Does not implicitly {@link IntVec3.verify|verify} messages.
     * @function encode
     * @memberof IntVec3
     * @static
     * @param {IIntVec3} message IntVec3 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    IntVec3.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.X != null && Object.hasOwnProperty.call(message, "X"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.X);
        if (message.Y != null && Object.hasOwnProperty.call(message, "Y"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Y);
        if (message.Z != null && Object.hasOwnProperty.call(message, "Z"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Z);
        return writer;
    };

    /**
     * Encodes the specified IntVec3 message, length delimited. Does not implicitly {@link IntVec3.verify|verify} messages.
     * @function encodeDelimited
     * @memberof IntVec3
     * @static
     * @param {IIntVec3} message IntVec3 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    IntVec3.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an IntVec3 message from the specified reader or buffer.
     * @function decode
     * @memberof IntVec3
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {IntVec3} IntVec3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    IntVec3.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.IntVec3();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.X = reader.int32();
                    break;
                }
            case 2: {
                    message.Y = reader.int32();
                    break;
                }
            case 3: {
                    message.Z = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an IntVec3 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof IntVec3
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {IntVec3} IntVec3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    IntVec3.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an IntVec3 message.
     * @function verify
     * @memberof IntVec3
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    IntVec3.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.X != null && message.hasOwnProperty("X")) {
            properties._X = 1;
            if (!$util.isInteger(message.X))
                return "X: integer expected";
        }
        if (message.Y != null && message.hasOwnProperty("Y")) {
            properties._Y = 1;
            if (!$util.isInteger(message.Y))
                return "Y: integer expected";
        }
        if (message.Z != null && message.hasOwnProperty("Z")) {
            properties._Z = 1;
            if (!$util.isInteger(message.Z))
                return "Z: integer expected";
        }
        return null;
    };

    /**
     * Creates an IntVec3 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof IntVec3
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {IntVec3} IntVec3
     */
    IntVec3.fromObject = function fromObject(object) {
        if (object instanceof $root.IntVec3)
            return object;
        var message = new $root.IntVec3();
        if (object.X != null)
            message.X = object.X | 0;
        if (object.Y != null)
            message.Y = object.Y | 0;
        if (object.Z != null)
            message.Z = object.Z | 0;
        return message;
    };

    /**
     * Creates a plain object from an IntVec3 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof IntVec3
     * @static
     * @param {IntVec3} message IntVec3
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    IntVec3.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.X != null && message.hasOwnProperty("X")) {
            object.X = message.X;
            if (options.oneofs)
                object._X = "X";
        }
        if (message.Y != null && message.hasOwnProperty("Y")) {
            object.Y = message.Y;
            if (options.oneofs)
                object._Y = "Y";
        }
        if (message.Z != null && message.hasOwnProperty("Z")) {
            object.Z = message.Z;
            if (options.oneofs)
                object._Z = "Z";
        }
        return object;
    };

    /**
     * Converts this IntVec3 to JSON.
     * @function toJSON
     * @memberof IntVec3
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    IntVec3.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for IntVec3
     * @function getTypeUrl
     * @memberof IntVec3
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    IntVec3.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/IntVec3";
    };

    return IntVec3;
})();

$root.Vector3 = (function() {

    /**
     * Properties of a Vector3.
     * @exports IVector3
     * @interface IVector3
     * @property {number|null} [X] Vector3 X
     * @property {number|null} [Y] Vector3 Y
     * @property {number|null} [Z] Vector3 Z
     */

    /**
     * Constructs a new Vector3.
     * @exports Vector3
     * @classdesc Represents a Vector3.
     * @implements IVector3
     * @constructor
     * @param {IVector3=} [properties] Properties to set
     */
    function Vector3(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Vector3 X.
     * @member {number|null|undefined} X
     * @memberof Vector3
     * @instance
     */
    Vector3.prototype.X = null;

    /**
     * Vector3 Y.
     * @member {number|null|undefined} Y
     * @memberof Vector3
     * @instance
     */
    Vector3.prototype.Y = null;

    /**
     * Vector3 Z.
     * @member {number|null|undefined} Z
     * @memberof Vector3
     * @instance
     */
    Vector3.prototype.Z = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * Vector3 _X.
     * @member {"X"|undefined} _X
     * @memberof Vector3
     * @instance
     */
    Object.defineProperty(Vector3.prototype, "_X", {
        get: $util.oneOfGetter($oneOfFields = ["X"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Vector3 _Y.
     * @member {"Y"|undefined} _Y
     * @memberof Vector3
     * @instance
     */
    Object.defineProperty(Vector3.prototype, "_Y", {
        get: $util.oneOfGetter($oneOfFields = ["Y"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Vector3 _Z.
     * @member {"Z"|undefined} _Z
     * @memberof Vector3
     * @instance
     */
    Object.defineProperty(Vector3.prototype, "_Z", {
        get: $util.oneOfGetter($oneOfFields = ["Z"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new Vector3 instance using the specified properties.
     * @function create
     * @memberof Vector3
     * @static
     * @param {IVector3=} [properties] Properties to set
     * @returns {Vector3} Vector3 instance
     */
    Vector3.create = function create(properties) {
        return new Vector3(properties);
    };

    /**
     * Encodes the specified Vector3 message. Does not implicitly {@link Vector3.verify|verify} messages.
     * @function encode
     * @memberof Vector3
     * @static
     * @param {IVector3} message Vector3 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    Vector3.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.X != null && Object.hasOwnProperty.call(message, "X"))
            writer.uint32(/* id 1, wireType 5 =*/13).float(message.X);
        if (message.Y != null && Object.hasOwnProperty.call(message, "Y"))
            writer.uint32(/* id 2, wireType 5 =*/21).float(message.Y);
        if (message.Z != null && Object.hasOwnProperty.call(message, "Z"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.Z);
        return writer;
    };

    /**
     * Encodes the specified Vector3 message, length delimited. Does not implicitly {@link Vector3.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Vector3
     * @static
     * @param {IVector3} message Vector3 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    Vector3.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a Vector3 message from the specified reader or buffer.
     * @function decode
     * @memberof Vector3
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Vector3} Vector3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    Vector3.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Vector3();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.X = reader.float();
                    break;
                }
            case 2: {
                    message.Y = reader.float();
                    break;
                }
            case 3: {
                    message.Z = reader.float();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a Vector3 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Vector3
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Vector3} Vector3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    Vector3.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a Vector3 message.
     * @function verify
     * @memberof Vector3
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    Vector3.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.X != null && message.hasOwnProperty("X")) {
            properties._X = 1;
            if (typeof message.X !== "number")
                return "X: number expected";
        }
        if (message.Y != null && message.hasOwnProperty("Y")) {
            properties._Y = 1;
            if (typeof message.Y !== "number")
                return "Y: number expected";
        }
        if (message.Z != null && message.hasOwnProperty("Z")) {
            properties._Z = 1;
            if (typeof message.Z !== "number")
                return "Z: number expected";
        }
        return null;
    };

    /**
     * Creates a Vector3 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Vector3
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Vector3} Vector3
     */
    Vector3.fromObject = function fromObject(object) {
        if (object instanceof $root.Vector3)
            return object;
        var message = new $root.Vector3();
        if (object.X != null)
            message.X = Number(object.X);
        if (object.Y != null)
            message.Y = Number(object.Y);
        if (object.Z != null)
            message.Z = Number(object.Z);
        return message;
    };

    /**
     * Creates a plain object from a Vector3 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Vector3
     * @static
     * @param {Vector3} message Vector3
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    Vector3.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.X != null && message.hasOwnProperty("X")) {
            object.X = options.json && !isFinite(message.X) ? String(message.X) : message.X;
            if (options.oneofs)
                object._X = "X";
        }
        if (message.Y != null && message.hasOwnProperty("Y")) {
            object.Y = options.json && !isFinite(message.Y) ? String(message.Y) : message.Y;
            if (options.oneofs)
                object._Y = "Y";
        }
        if (message.Z != null && message.hasOwnProperty("Z")) {
            object.Z = options.json && !isFinite(message.Z) ? String(message.Z) : message.Z;
            if (options.oneofs)
                object._Z = "Z";
        }
        return object;
    };

    /**
     * Converts this Vector3 to JSON.
     * @function toJSON
     * @memberof Vector3
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    Vector3.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for Vector3
     * @function getTypeUrl
     * @memberof Vector3
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    Vector3.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/Vector3";
    };

    return Vector3;
})();

$root.Vector2 = (function() {

    /**
     * Properties of a Vector2.
     * @exports IVector2
     * @interface IVector2
     * @property {number|null} [X] Vector2 X
     * @property {number|null} [Y] Vector2 Y
     */

    /**
     * Constructs a new Vector2.
     * @exports Vector2
     * @classdesc Represents a Vector2.
     * @implements IVector2
     * @constructor
     * @param {IVector2=} [properties] Properties to set
     */
    function Vector2(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Vector2 X.
     * @member {number|null|undefined} X
     * @memberof Vector2
     * @instance
     */
    Vector2.prototype.X = null;

    /**
     * Vector2 Y.
     * @member {number|null|undefined} Y
     * @memberof Vector2
     * @instance
     */
    Vector2.prototype.Y = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * Vector2 _X.
     * @member {"X"|undefined} _X
     * @memberof Vector2
     * @instance
     */
    Object.defineProperty(Vector2.prototype, "_X", {
        get: $util.oneOfGetter($oneOfFields = ["X"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Vector2 _Y.
     * @member {"Y"|undefined} _Y
     * @memberof Vector2
     * @instance
     */
    Object.defineProperty(Vector2.prototype, "_Y", {
        get: $util.oneOfGetter($oneOfFields = ["Y"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new Vector2 instance using the specified properties.
     * @function create
     * @memberof Vector2
     * @static
     * @param {IVector2=} [properties] Properties to set
     * @returns {Vector2} Vector2 instance
     */
    Vector2.create = function create(properties) {
        return new Vector2(properties);
    };

    /**
     * Encodes the specified Vector2 message. Does not implicitly {@link Vector2.verify|verify} messages.
     * @function encode
     * @memberof Vector2
     * @static
     * @param {IVector2} message Vector2 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    Vector2.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.X != null && Object.hasOwnProperty.call(message, "X"))
            writer.uint32(/* id 1, wireType 5 =*/13).float(message.X);
        if (message.Y != null && Object.hasOwnProperty.call(message, "Y"))
            writer.uint32(/* id 2, wireType 5 =*/21).float(message.Y);
        return writer;
    };

    /**
     * Encodes the specified Vector2 message, length delimited. Does not implicitly {@link Vector2.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Vector2
     * @static
     * @param {IVector2} message Vector2 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    Vector2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a Vector2 message from the specified reader or buffer.
     * @function decode
     * @memberof Vector2
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Vector2} Vector2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    Vector2.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Vector2();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.X = reader.float();
                    break;
                }
            case 2: {
                    message.Y = reader.float();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a Vector2 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Vector2
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Vector2} Vector2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    Vector2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a Vector2 message.
     * @function verify
     * @memberof Vector2
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    Vector2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.X != null && message.hasOwnProperty("X")) {
            properties._X = 1;
            if (typeof message.X !== "number")
                return "X: number expected";
        }
        if (message.Y != null && message.hasOwnProperty("Y")) {
            properties._Y = 1;
            if (typeof message.Y !== "number")
                return "Y: number expected";
        }
        return null;
    };

    /**
     * Creates a Vector2 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Vector2
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Vector2} Vector2
     */
    Vector2.fromObject = function fromObject(object) {
        if (object instanceof $root.Vector2)
            return object;
        var message = new $root.Vector2();
        if (object.X != null)
            message.X = Number(object.X);
        if (object.Y != null)
            message.Y = Number(object.Y);
        return message;
    };

    /**
     * Creates a plain object from a Vector2 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Vector2
     * @static
     * @param {Vector2} message Vector2
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    Vector2.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.X != null && message.hasOwnProperty("X")) {
            object.X = options.json && !isFinite(message.X) ? String(message.X) : message.X;
            if (options.oneofs)
                object._X = "X";
        }
        if (message.Y != null && message.hasOwnProperty("Y")) {
            object.Y = options.json && !isFinite(message.Y) ? String(message.Y) : message.Y;
            if (options.oneofs)
                object._Y = "Y";
        }
        return object;
    };

    /**
     * Converts this Vector2 to JSON.
     * @function toJSON
     * @memberof Vector2
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    Vector2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for Vector2
     * @function getTypeUrl
     * @memberof Vector2
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    Vector2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/Vector2";
    };

    return Vector2;
})();

$root.FaceData = (function() {

    /**
     * Properties of a FaceData.
     * @exports IFaceData
     * @interface IFaceData
     * @property {Object.<string,number>|null} [FaceInfo] FaceData FaceInfo
     * @property {Object.<string,IIntVec3>|null} [ColorInfo] FaceData ColorInfo
     * @property {number|null} [Height] FaceData Height
     */

    /**
     * Constructs a new FaceData.
     * @exports FaceData
     * @classdesc Represents a FaceData.
     * @implements IFaceData
     * @constructor
     * @param {IFaceData=} [properties] Properties to set
     */
    function FaceData(properties) {
        this.FaceInfo = {};
        this.ColorInfo = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FaceData FaceInfo.
     * @member {Object.<string,number>} FaceInfo
     * @memberof FaceData
     * @instance
     */
    FaceData.prototype.FaceInfo = $util.emptyObject;

    /**
     * FaceData ColorInfo.
     * @member {Object.<string,IIntVec3>} ColorInfo
     * @memberof FaceData
     * @instance
     */
    FaceData.prototype.ColorInfo = $util.emptyObject;

    /**
     * FaceData Height.
     * @member {number|null|undefined} Height
     * @memberof FaceData
     * @instance
     */
    FaceData.prototype.Height = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * FaceData _Height.
     * @member {"Height"|undefined} _Height
     * @memberof FaceData
     * @instance
     */
    Object.defineProperty(FaceData.prototype, "_Height", {
        get: $util.oneOfGetter($oneOfFields = ["Height"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new FaceData instance using the specified properties.
     * @function create
     * @memberof FaceData
     * @static
     * @param {IFaceData=} [properties] Properties to set
     * @returns {FaceData} FaceData instance
     */
    FaceData.create = function create(properties) {
        return new FaceData(properties);
    };

    /**
     * Encodes the specified FaceData message. Does not implicitly {@link FaceData.verify|verify} messages.
     * @function encode
     * @memberof FaceData
     * @static
     * @param {IFaceData} message FaceData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FaceData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.FaceInfo != null && Object.hasOwnProperty.call(message, "FaceInfo"))
            for (var keys = Object.keys(message.FaceInfo), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.FaceInfo[keys[i]]).ldelim();
        if (message.ColorInfo != null && Object.hasOwnProperty.call(message, "ColorInfo"))
            for (var keys = Object.keys(message.ColorInfo), i = 0; i < keys.length; ++i) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]);
                $root.IntVec3.encode(message.ColorInfo[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
            }
        if (message.Height != null && Object.hasOwnProperty.call(message, "Height"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.Height);
        return writer;
    };

    /**
     * Encodes the specified FaceData message, length delimited. Does not implicitly {@link FaceData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FaceData
     * @static
     * @param {IFaceData} message FaceData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FaceData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FaceData message from the specified reader or buffer.
     * @function decode
     * @memberof FaceData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FaceData} FaceData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FaceData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FaceData(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (message.FaceInfo === $util.emptyObject)
                        message.FaceInfo = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = 0;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = reader.int32();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.FaceInfo[key] = value;
                    break;
                }
            case 2: {
                    if (message.ColorInfo === $util.emptyObject)
                        message.ColorInfo = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = null;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = $root.IntVec3.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.ColorInfo[key] = value;
                    break;
                }
            case 3: {
                    message.Height = reader.float();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FaceData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FaceData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FaceData} FaceData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FaceData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FaceData message.
     * @function verify
     * @memberof FaceData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FaceData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.FaceInfo != null && message.hasOwnProperty("FaceInfo")) {
            if (!$util.isObject(message.FaceInfo))
                return "FaceInfo: object expected";
            var key = Object.keys(message.FaceInfo);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "FaceInfo: integer key{k:int32} expected";
                if (!$util.isInteger(message.FaceInfo[key[i]]))
                    return "FaceInfo: integer{k:int32} expected";
            }
        }
        if (message.ColorInfo != null && message.hasOwnProperty("ColorInfo")) {
            if (!$util.isObject(message.ColorInfo))
                return "ColorInfo: object expected";
            var key = Object.keys(message.ColorInfo);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "ColorInfo: integer key{k:int32} expected";
                {
                    var error = $root.IntVec3.verify(message.ColorInfo[key[i]]);
                    if (error)
                        return "ColorInfo." + error;
                }
            }
        }
        if (message.Height != null && message.hasOwnProperty("Height")) {
            properties._Height = 1;
            if (typeof message.Height !== "number")
                return "Height: number expected";
        }
        return null;
    };

    /**
     * Creates a FaceData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FaceData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FaceData} FaceData
     */
    FaceData.fromObject = function fromObject(object) {
        if (object instanceof $root.FaceData)
            return object;
        var message = new $root.FaceData();
        if (object.FaceInfo) {
            if (typeof object.FaceInfo !== "object")
                throw TypeError(".FaceData.FaceInfo: object expected");
            message.FaceInfo = {};
            for (var keys = Object.keys(object.FaceInfo), i = 0; i < keys.length; ++i)
                message.FaceInfo[keys[i]] = object.FaceInfo[keys[i]] | 0;
        }
        if (object.ColorInfo) {
            if (typeof object.ColorInfo !== "object")
                throw TypeError(".FaceData.ColorInfo: object expected");
            message.ColorInfo = {};
            for (var keys = Object.keys(object.ColorInfo), i = 0; i < keys.length; ++i) {
                if (typeof object.ColorInfo[keys[i]] !== "object")
                    throw TypeError(".FaceData.ColorInfo: object expected");
                message.ColorInfo[keys[i]] = $root.IntVec3.fromObject(object.ColorInfo[keys[i]]);
            }
        }
        if (object.Height != null)
            message.Height = Number(object.Height);
        return message;
    };

    /**
     * Creates a plain object from a FaceData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FaceData
     * @static
     * @param {FaceData} message FaceData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FaceData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults) {
            object.FaceInfo = {};
            object.ColorInfo = {};
        }
        var keys2;
        if (message.FaceInfo && (keys2 = Object.keys(message.FaceInfo)).length) {
            object.FaceInfo = {};
            for (var j = 0; j < keys2.length; ++j)
                object.FaceInfo[keys2[j]] = message.FaceInfo[keys2[j]];
        }
        if (message.ColorInfo && (keys2 = Object.keys(message.ColorInfo)).length) {
            object.ColorInfo = {};
            for (var j = 0; j < keys2.length; ++j)
                object.ColorInfo[keys2[j]] = $root.IntVec3.toObject(message.ColorInfo[keys2[j]], options);
        }
        if (message.Height != null && message.hasOwnProperty("Height")) {
            object.Height = options.json && !isFinite(message.Height) ? String(message.Height) : message.Height;
            if (options.oneofs)
                object._Height = "Height";
        }
        return object;
    };

    /**
     * Converts this FaceData to JSON.
     * @function toJSON
     * @memberof FaceData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FaceData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FaceData
     * @function getTypeUrl
     * @memberof FaceData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FaceData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FaceData";
    };

    return FaceData;
})();

$root.ProfessionData = (function() {

    /**
     * Properties of a ProfessionData.
     * @exports IProfessionData
     * @interface IProfessionData
     * @property {number|null} [ProfessionId] ProfessionData ProfessionId
     * @property {number|null} [WeaponSkin] ProfessionData WeaponSkin
     */

    /**
     * Constructs a new ProfessionData.
     * @exports ProfessionData
     * @classdesc Represents a ProfessionData.
     * @implements IProfessionData
     * @constructor
     * @param {IProfessionData=} [properties] Properties to set
     */
    function ProfessionData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProfessionData ProfessionId.
     * @member {number|null|undefined} ProfessionId
     * @memberof ProfessionData
     * @instance
     */
    ProfessionData.prototype.ProfessionId = null;

    /**
     * ProfessionData WeaponSkin.
     * @member {number|null|undefined} WeaponSkin
     * @memberof ProfessionData
     * @instance
     */
    ProfessionData.prototype.WeaponSkin = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * ProfessionData _ProfessionId.
     * @member {"ProfessionId"|undefined} _ProfessionId
     * @memberof ProfessionData
     * @instance
     */
    Object.defineProperty(ProfessionData.prototype, "_ProfessionId", {
        get: $util.oneOfGetter($oneOfFields = ["ProfessionId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * ProfessionData _WeaponSkin.
     * @member {"WeaponSkin"|undefined} _WeaponSkin
     * @memberof ProfessionData
     * @instance
     */
    Object.defineProperty(ProfessionData.prototype, "_WeaponSkin", {
        get: $util.oneOfGetter($oneOfFields = ["WeaponSkin"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new ProfessionData instance using the specified properties.
     * @function create
     * @memberof ProfessionData
     * @static
     * @param {IProfessionData=} [properties] Properties to set
     * @returns {ProfessionData} ProfessionData instance
     */
    ProfessionData.create = function create(properties) {
        return new ProfessionData(properties);
    };

    /**
     * Encodes the specified ProfessionData message. Does not implicitly {@link ProfessionData.verify|verify} messages.
     * @function encode
     * @memberof ProfessionData
     * @static
     * @param {IProfessionData} message ProfessionData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProfessionData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ProfessionId != null && Object.hasOwnProperty.call(message, "ProfessionId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ProfessionId);
        if (message.WeaponSkin != null && Object.hasOwnProperty.call(message, "WeaponSkin"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.WeaponSkin);
        return writer;
    };

    /**
     * Encodes the specified ProfessionData message, length delimited. Does not implicitly {@link ProfessionData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProfessionData
     * @static
     * @param {IProfessionData} message ProfessionData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProfessionData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProfessionData message from the specified reader or buffer.
     * @function decode
     * @memberof ProfessionData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProfessionData} ProfessionData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProfessionData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProfessionData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.ProfessionId = reader.int32();
                    break;
                }
            case 2: {
                    message.WeaponSkin = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProfessionData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProfessionData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProfessionData} ProfessionData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProfessionData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProfessionData message.
     * @function verify
     * @memberof ProfessionData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProfessionData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.ProfessionId != null && message.hasOwnProperty("ProfessionId")) {
            properties._ProfessionId = 1;
            if (!$util.isInteger(message.ProfessionId))
                return "ProfessionId: integer expected";
        }
        if (message.WeaponSkin != null && message.hasOwnProperty("WeaponSkin")) {
            properties._WeaponSkin = 1;
            if (!$util.isInteger(message.WeaponSkin))
                return "WeaponSkin: integer expected";
        }
        return null;
    };

    /**
     * Creates a ProfessionData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProfessionData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProfessionData} ProfessionData
     */
    ProfessionData.fromObject = function fromObject(object) {
        if (object instanceof $root.ProfessionData)
            return object;
        var message = new $root.ProfessionData();
        if (object.ProfessionId != null)
            message.ProfessionId = object.ProfessionId | 0;
        if (object.WeaponSkin != null)
            message.WeaponSkin = object.WeaponSkin | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProfessionData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProfessionData
     * @static
     * @param {ProfessionData} message ProfessionData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProfessionData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.ProfessionId != null && message.hasOwnProperty("ProfessionId")) {
            object.ProfessionId = message.ProfessionId;
            if (options.oneofs)
                object._ProfessionId = "ProfessionId";
        }
        if (message.WeaponSkin != null && message.hasOwnProperty("WeaponSkin")) {
            object.WeaponSkin = message.WeaponSkin;
            if (options.oneofs)
                object._WeaponSkin = "WeaponSkin";
        }
        return object;
    };

    /**
     * Converts this ProfessionData to JSON.
     * @function toJSON
     * @memberof ProfessionData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProfessionData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProfessionData
     * @function getTypeUrl
     * @memberof ProfessionData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProfessionData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProfessionData";
    };

    return ProfessionData;
})();

$root.EquipNine = (function() {

    /**
     * Properties of an EquipNine.
     * @exports IEquipNine
     * @interface IEquipNine
     * @property {number|null} [Slot] EquipNine Slot
     * @property {number|null} [EquipID] EquipNine EquipID
     */

    /**
     * Constructs a new EquipNine.
     * @exports EquipNine
     * @classdesc Represents an EquipNine.
     * @implements IEquipNine
     * @constructor
     * @param {IEquipNine=} [properties] Properties to set
     */
    function EquipNine(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * EquipNine Slot.
     * @member {number|null|undefined} Slot
     * @memberof EquipNine
     * @instance
     */
    EquipNine.prototype.Slot = null;

    /**
     * EquipNine EquipID.
     * @member {number|null|undefined} EquipID
     * @memberof EquipNine
     * @instance
     */
    EquipNine.prototype.EquipID = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * EquipNine _Slot.
     * @member {"Slot"|undefined} _Slot
     * @memberof EquipNine
     * @instance
     */
    Object.defineProperty(EquipNine.prototype, "_Slot", {
        get: $util.oneOfGetter($oneOfFields = ["Slot"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * EquipNine _EquipID.
     * @member {"EquipID"|undefined} _EquipID
     * @memberof EquipNine
     * @instance
     */
    Object.defineProperty(EquipNine.prototype, "_EquipID", {
        get: $util.oneOfGetter($oneOfFields = ["EquipID"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new EquipNine instance using the specified properties.
     * @function create
     * @memberof EquipNine
     * @static
     * @param {IEquipNine=} [properties] Properties to set
     * @returns {EquipNine} EquipNine instance
     */
    EquipNine.create = function create(properties) {
        return new EquipNine(properties);
    };

    /**
     * Encodes the specified EquipNine message. Does not implicitly {@link EquipNine.verify|verify} messages.
     * @function encode
     * @memberof EquipNine
     * @static
     * @param {IEquipNine} message EquipNine message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EquipNine.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Slot != null && Object.hasOwnProperty.call(message, "Slot"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Slot);
        if (message.EquipID != null && Object.hasOwnProperty.call(message, "EquipID"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.EquipID);
        return writer;
    };

    /**
     * Encodes the specified EquipNine message, length delimited. Does not implicitly {@link EquipNine.verify|verify} messages.
     * @function encodeDelimited
     * @memberof EquipNine
     * @static
     * @param {IEquipNine} message EquipNine message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EquipNine.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an EquipNine message from the specified reader or buffer.
     * @function decode
     * @memberof EquipNine
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {EquipNine} EquipNine
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EquipNine.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EquipNine();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Slot = reader.int32();
                    break;
                }
            case 2: {
                    message.EquipID = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an EquipNine message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof EquipNine
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {EquipNine} EquipNine
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EquipNine.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an EquipNine message.
     * @function verify
     * @memberof EquipNine
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    EquipNine.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Slot != null && message.hasOwnProperty("Slot")) {
            properties._Slot = 1;
            if (!$util.isInteger(message.Slot))
                return "Slot: integer expected";
        }
        if (message.EquipID != null && message.hasOwnProperty("EquipID")) {
            properties._EquipID = 1;
            if (!$util.isInteger(message.EquipID))
                return "EquipID: integer expected";
        }
        return null;
    };

    /**
     * Creates an EquipNine message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof EquipNine
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {EquipNine} EquipNine
     */
    EquipNine.fromObject = function fromObject(object) {
        if (object instanceof $root.EquipNine)
            return object;
        var message = new $root.EquipNine();
        if (object.Slot != null)
            message.Slot = object.Slot | 0;
        if (object.EquipID != null)
            message.EquipID = object.EquipID | 0;
        return message;
    };

    /**
     * Creates a plain object from an EquipNine message. Also converts values to other types if specified.
     * @function toObject
     * @memberof EquipNine
     * @static
     * @param {EquipNine} message EquipNine
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    EquipNine.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Slot != null && message.hasOwnProperty("Slot")) {
            object.Slot = message.Slot;
            if (options.oneofs)
                object._Slot = "Slot";
        }
        if (message.EquipID != null && message.hasOwnProperty("EquipID")) {
            object.EquipID = message.EquipID;
            if (options.oneofs)
                object._EquipID = "EquipID";
        }
        return object;
    };

    /**
     * Converts this EquipNine to JSON.
     * @function toJSON
     * @memberof EquipNine
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    EquipNine.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for EquipNine
     * @function getTypeUrl
     * @memberof EquipNine
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    EquipNine.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/EquipNine";
    };

    return EquipNine;
})();

$root.EquipData = (function() {

    /**
     * Properties of an EquipData.
     * @exports IEquipData
     * @interface IEquipData
     * @property {Array.<IEquipNine>|null} [EquipInfos] EquipData EquipInfos
     */

    /**
     * Constructs a new EquipData.
     * @exports EquipData
     * @classdesc Represents an EquipData.
     * @implements IEquipData
     * @constructor
     * @param {IEquipData=} [properties] Properties to set
     */
    function EquipData(properties) {
        this.EquipInfos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * EquipData EquipInfos.
     * @member {Array.<IEquipNine>} EquipInfos
     * @memberof EquipData
     * @instance
     */
    EquipData.prototype.EquipInfos = $util.emptyArray;

    /**
     * Creates a new EquipData instance using the specified properties.
     * @function create
     * @memberof EquipData
     * @static
     * @param {IEquipData=} [properties] Properties to set
     * @returns {EquipData} EquipData instance
     */
    EquipData.create = function create(properties) {
        return new EquipData(properties);
    };

    /**
     * Encodes the specified EquipData message. Does not implicitly {@link EquipData.verify|verify} messages.
     * @function encode
     * @memberof EquipData
     * @static
     * @param {IEquipData} message EquipData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EquipData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.EquipInfos != null && message.EquipInfos.length)
            for (var i = 0; i < message.EquipInfos.length; ++i)
                $root.EquipNine.encode(message.EquipInfos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified EquipData message, length delimited. Does not implicitly {@link EquipData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof EquipData
     * @static
     * @param {IEquipData} message EquipData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EquipData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an EquipData message from the specified reader or buffer.
     * @function decode
     * @memberof EquipData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {EquipData} EquipData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EquipData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EquipData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.EquipInfos && message.EquipInfos.length))
                        message.EquipInfos = [];
                    message.EquipInfos.push($root.EquipNine.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an EquipData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof EquipData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {EquipData} EquipData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EquipData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an EquipData message.
     * @function verify
     * @memberof EquipData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    EquipData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.EquipInfos != null && message.hasOwnProperty("EquipInfos")) {
            if (!Array.isArray(message.EquipInfos))
                return "EquipInfos: array expected";
            for (var i = 0; i < message.EquipInfos.length; ++i) {
                var error = $root.EquipNine.verify(message.EquipInfos[i]);
                if (error)
                    return "EquipInfos." + error;
            }
        }
        return null;
    };

    /**
     * Creates an EquipData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof EquipData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {EquipData} EquipData
     */
    EquipData.fromObject = function fromObject(object) {
        if (object instanceof $root.EquipData)
            return object;
        var message = new $root.EquipData();
        if (object.EquipInfos) {
            if (!Array.isArray(object.EquipInfos))
                throw TypeError(".EquipData.EquipInfos: array expected");
            message.EquipInfos = [];
            for (var i = 0; i < object.EquipInfos.length; ++i) {
                if (typeof object.EquipInfos[i] !== "object")
                    throw TypeError(".EquipData.EquipInfos: object expected");
                message.EquipInfos[i] = $root.EquipNine.fromObject(object.EquipInfos[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from an EquipData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof EquipData
     * @static
     * @param {EquipData} message EquipData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    EquipData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.EquipInfos = [];
        if (message.EquipInfos && message.EquipInfos.length) {
            object.EquipInfos = [];
            for (var j = 0; j < message.EquipInfos.length; ++j)
                object.EquipInfos[j] = $root.EquipNine.toObject(message.EquipInfos[j], options);
        }
        return object;
    };

    /**
     * Converts this EquipData to JSON.
     * @function toJSON
     * @memberof EquipData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    EquipData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for EquipData
     * @function getTypeUrl
     * @memberof EquipData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    EquipData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/EquipData";
    };

    return EquipData;
})();

$root.FashionColorInfo = (function() {

    /**
     * Properties of a FashionColorInfo.
     * @exports IFashionColorInfo
     * @interface IFashionColorInfo
     * @property {number|null} [Id] FashionColorInfo Id
     * @property {Object.<string,IIntVec3>|null} [Colors] FashionColorInfo Colors
     * @property {Object.<string,IIntVec3>|null} [AttachmentColor] FashionColorInfo AttachmentColor
     */

    /**
     * Constructs a new FashionColorInfo.
     * @exports FashionColorInfo
     * @classdesc Represents a FashionColorInfo.
     * @implements IFashionColorInfo
     * @constructor
     * @param {IFashionColorInfo=} [properties] Properties to set
     */
    function FashionColorInfo(properties) {
        this.Colors = {};
        this.AttachmentColor = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FashionColorInfo Id.
     * @member {number|null|undefined} Id
     * @memberof FashionColorInfo
     * @instance
     */
    FashionColorInfo.prototype.Id = null;

    /**
     * FashionColorInfo Colors.
     * @member {Object.<string,IIntVec3>} Colors
     * @memberof FashionColorInfo
     * @instance
     */
    FashionColorInfo.prototype.Colors = $util.emptyObject;

    /**
     * FashionColorInfo AttachmentColor.
     * @member {Object.<string,IIntVec3>} AttachmentColor
     * @memberof FashionColorInfo
     * @instance
     */
    FashionColorInfo.prototype.AttachmentColor = $util.emptyObject;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * FashionColorInfo _Id.
     * @member {"Id"|undefined} _Id
     * @memberof FashionColorInfo
     * @instance
     */
    Object.defineProperty(FashionColorInfo.prototype, "_Id", {
        get: $util.oneOfGetter($oneOfFields = ["Id"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new FashionColorInfo instance using the specified properties.
     * @function create
     * @memberof FashionColorInfo
     * @static
     * @param {IFashionColorInfo=} [properties] Properties to set
     * @returns {FashionColorInfo} FashionColorInfo instance
     */
    FashionColorInfo.create = function create(properties) {
        return new FashionColorInfo(properties);
    };

    /**
     * Encodes the specified FashionColorInfo message. Does not implicitly {@link FashionColorInfo.verify|verify} messages.
     * @function encode
     * @memberof FashionColorInfo
     * @static
     * @param {IFashionColorInfo} message FashionColorInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FashionColorInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Id != null && Object.hasOwnProperty.call(message, "Id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
        if (message.Colors != null && Object.hasOwnProperty.call(message, "Colors"))
            for (var keys = Object.keys(message.Colors), i = 0; i < keys.length; ++i) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]);
                $root.IntVec3.encode(message.Colors[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
            }
        if (message.AttachmentColor != null && Object.hasOwnProperty.call(message, "AttachmentColor"))
            for (var keys = Object.keys(message.AttachmentColor), i = 0; i < keys.length; ++i) {
                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]);
                $root.IntVec3.encode(message.AttachmentColor[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
            }
        return writer;
    };

    /**
     * Encodes the specified FashionColorInfo message, length delimited. Does not implicitly {@link FashionColorInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FashionColorInfo
     * @static
     * @param {IFashionColorInfo} message FashionColorInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FashionColorInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FashionColorInfo message from the specified reader or buffer.
     * @function decode
     * @memberof FashionColorInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FashionColorInfo} FashionColorInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FashionColorInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FashionColorInfo(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Id = reader.int32();
                    break;
                }
            case 2: {
                    if (message.Colors === $util.emptyObject)
                        message.Colors = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = null;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = $root.IntVec3.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.Colors[key] = value;
                    break;
                }
            case 3: {
                    if (message.AttachmentColor === $util.emptyObject)
                        message.AttachmentColor = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = null;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = $root.IntVec3.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.AttachmentColor[key] = value;
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FashionColorInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FashionColorInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FashionColorInfo} FashionColorInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FashionColorInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FashionColorInfo message.
     * @function verify
     * @memberof FashionColorInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FashionColorInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Id != null && message.hasOwnProperty("Id")) {
            properties._Id = 1;
            if (!$util.isInteger(message.Id))
                return "Id: integer expected";
        }
        if (message.Colors != null && message.hasOwnProperty("Colors")) {
            if (!$util.isObject(message.Colors))
                return "Colors: object expected";
            var key = Object.keys(message.Colors);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "Colors: integer key{k:int32} expected";
                {
                    var error = $root.IntVec3.verify(message.Colors[key[i]]);
                    if (error)
                        return "Colors." + error;
                }
            }
        }
        if (message.AttachmentColor != null && message.hasOwnProperty("AttachmentColor")) {
            if (!$util.isObject(message.AttachmentColor))
                return "AttachmentColor: object expected";
            var key = Object.keys(message.AttachmentColor);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "AttachmentColor: integer key{k:int32} expected";
                {
                    var error = $root.IntVec3.verify(message.AttachmentColor[key[i]]);
                    if (error)
                        return "AttachmentColor." + error;
                }
            }
        }
        return null;
    };

    /**
     * Creates a FashionColorInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FashionColorInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FashionColorInfo} FashionColorInfo
     */
    FashionColorInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.FashionColorInfo)
            return object;
        var message = new $root.FashionColorInfo();
        if (object.Id != null)
            message.Id = object.Id | 0;
        if (object.Colors) {
            if (typeof object.Colors !== "object")
                throw TypeError(".FashionColorInfo.Colors: object expected");
            message.Colors = {};
            for (var keys = Object.keys(object.Colors), i = 0; i < keys.length; ++i) {
                if (typeof object.Colors[keys[i]] !== "object")
                    throw TypeError(".FashionColorInfo.Colors: object expected");
                message.Colors[keys[i]] = $root.IntVec3.fromObject(object.Colors[keys[i]]);
            }
        }
        if (object.AttachmentColor) {
            if (typeof object.AttachmentColor !== "object")
                throw TypeError(".FashionColorInfo.AttachmentColor: object expected");
            message.AttachmentColor = {};
            for (var keys = Object.keys(object.AttachmentColor), i = 0; i < keys.length; ++i) {
                if (typeof object.AttachmentColor[keys[i]] !== "object")
                    throw TypeError(".FashionColorInfo.AttachmentColor: object expected");
                message.AttachmentColor[keys[i]] = $root.IntVec3.fromObject(object.AttachmentColor[keys[i]]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a FashionColorInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FashionColorInfo
     * @static
     * @param {FashionColorInfo} message FashionColorInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FashionColorInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults) {
            object.Colors = {};
            object.AttachmentColor = {};
        }
        if (message.Id != null && message.hasOwnProperty("Id")) {
            object.Id = message.Id;
            if (options.oneofs)
                object._Id = "Id";
        }
        var keys2;
        if (message.Colors && (keys2 = Object.keys(message.Colors)).length) {
            object.Colors = {};
            for (var j = 0; j < keys2.length; ++j)
                object.Colors[keys2[j]] = $root.IntVec3.toObject(message.Colors[keys2[j]], options);
        }
        if (message.AttachmentColor && (keys2 = Object.keys(message.AttachmentColor)).length) {
            object.AttachmentColor = {};
            for (var j = 0; j < keys2.length; ++j)
                object.AttachmentColor[keys2[j]] = $root.IntVec3.toObject(message.AttachmentColor[keys2[j]], options);
        }
        return object;
    };

    /**
     * Converts this FashionColorInfo to JSON.
     * @function toJSON
     * @memberof FashionColorInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FashionColorInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FashionColorInfo
     * @function getTypeUrl
     * @memberof FashionColorInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FashionColorInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FashionColorInfo";
    };

    return FashionColorInfo;
})();

$root.FashionInfo = (function() {

    /**
     * Properties of a FashionInfo.
     * @exports IFashionInfo
     * @interface IFashionInfo
     * @property {number|null} [Slot] FashionInfo Slot
     * @property {number|null} [FashionId] FashionInfo FashionId
     * @property {IFashionColorInfo|null} [Colors] FashionInfo Colors
     */

    /**
     * Constructs a new FashionInfo.
     * @exports FashionInfo
     * @classdesc Represents a FashionInfo.
     * @implements IFashionInfo
     * @constructor
     * @param {IFashionInfo=} [properties] Properties to set
     */
    function FashionInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FashionInfo Slot.
     * @member {number|null|undefined} Slot
     * @memberof FashionInfo
     * @instance
     */
    FashionInfo.prototype.Slot = null;

    /**
     * FashionInfo FashionId.
     * @member {number|null|undefined} FashionId
     * @memberof FashionInfo
     * @instance
     */
    FashionInfo.prototype.FashionId = null;

    /**
     * FashionInfo Colors.
     * @member {IFashionColorInfo|null|undefined} Colors
     * @memberof FashionInfo
     * @instance
     */
    FashionInfo.prototype.Colors = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * FashionInfo _Slot.
     * @member {"Slot"|undefined} _Slot
     * @memberof FashionInfo
     * @instance
     */
    Object.defineProperty(FashionInfo.prototype, "_Slot", {
        get: $util.oneOfGetter($oneOfFields = ["Slot"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FashionInfo _FashionId.
     * @member {"FashionId"|undefined} _FashionId
     * @memberof FashionInfo
     * @instance
     */
    Object.defineProperty(FashionInfo.prototype, "_FashionId", {
        get: $util.oneOfGetter($oneOfFields = ["FashionId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FashionInfo _Colors.
     * @member {"Colors"|undefined} _Colors
     * @memberof FashionInfo
     * @instance
     */
    Object.defineProperty(FashionInfo.prototype, "_Colors", {
        get: $util.oneOfGetter($oneOfFields = ["Colors"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new FashionInfo instance using the specified properties.
     * @function create
     * @memberof FashionInfo
     * @static
     * @param {IFashionInfo=} [properties] Properties to set
     * @returns {FashionInfo} FashionInfo instance
     */
    FashionInfo.create = function create(properties) {
        return new FashionInfo(properties);
    };

    /**
     * Encodes the specified FashionInfo message. Does not implicitly {@link FashionInfo.verify|verify} messages.
     * @function encode
     * @memberof FashionInfo
     * @static
     * @param {IFashionInfo} message FashionInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FashionInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Slot != null && Object.hasOwnProperty.call(message, "Slot"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Slot);
        if (message.FashionId != null && Object.hasOwnProperty.call(message, "FashionId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.FashionId);
        if (message.Colors != null && Object.hasOwnProperty.call(message, "Colors"))
            $root.FashionColorInfo.encode(message.Colors, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified FashionInfo message, length delimited. Does not implicitly {@link FashionInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FashionInfo
     * @static
     * @param {IFashionInfo} message FashionInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FashionInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FashionInfo message from the specified reader or buffer.
     * @function decode
     * @memberof FashionInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FashionInfo} FashionInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FashionInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FashionInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Slot = reader.int32();
                    break;
                }
            case 2: {
                    message.FashionId = reader.int32();
                    break;
                }
            case 3: {
                    message.Colors = $root.FashionColorInfo.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FashionInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FashionInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FashionInfo} FashionInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FashionInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FashionInfo message.
     * @function verify
     * @memberof FashionInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FashionInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Slot != null && message.hasOwnProperty("Slot")) {
            properties._Slot = 1;
            if (!$util.isInteger(message.Slot))
                return "Slot: integer expected";
        }
        if (message.FashionId != null && message.hasOwnProperty("FashionId")) {
            properties._FashionId = 1;
            if (!$util.isInteger(message.FashionId))
                return "FashionId: integer expected";
        }
        if (message.Colors != null && message.hasOwnProperty("Colors")) {
            properties._Colors = 1;
            {
                var error = $root.FashionColorInfo.verify(message.Colors);
                if (error)
                    return "Colors." + error;
            }
        }
        return null;
    };

    /**
     * Creates a FashionInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FashionInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FashionInfo} FashionInfo
     */
    FashionInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.FashionInfo)
            return object;
        var message = new $root.FashionInfo();
        if (object.Slot != null)
            message.Slot = object.Slot | 0;
        if (object.FashionId != null)
            message.FashionId = object.FashionId | 0;
        if (object.Colors != null) {
            if (typeof object.Colors !== "object")
                throw TypeError(".FashionInfo.Colors: object expected");
            message.Colors = $root.FashionColorInfo.fromObject(object.Colors);
        }
        return message;
    };

    /**
     * Creates a plain object from a FashionInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FashionInfo
     * @static
     * @param {FashionInfo} message FashionInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FashionInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Slot != null && message.hasOwnProperty("Slot")) {
            object.Slot = message.Slot;
            if (options.oneofs)
                object._Slot = "Slot";
        }
        if (message.FashionId != null && message.hasOwnProperty("FashionId")) {
            object.FashionId = message.FashionId;
            if (options.oneofs)
                object._FashionId = "FashionId";
        }
        if (message.Colors != null && message.hasOwnProperty("Colors")) {
            object.Colors = $root.FashionColorInfo.toObject(message.Colors, options);
            if (options.oneofs)
                object._Colors = "Colors";
        }
        return object;
    };

    /**
     * Converts this FashionInfo to JSON.
     * @function toJSON
     * @memberof FashionInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FashionInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FashionInfo
     * @function getTypeUrl
     * @memberof FashionInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FashionInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FashionInfo";
    };

    return FashionInfo;
})();

$root.FashionData = (function() {

    /**
     * Properties of a FashionData.
     * @exports IFashionData
     * @interface IFashionData
     * @property {Array.<IFashionInfo>|null} [FashionInfos] FashionData FashionInfos
     */

    /**
     * Constructs a new FashionData.
     * @exports FashionData
     * @classdesc Represents a FashionData.
     * @implements IFashionData
     * @constructor
     * @param {IFashionData=} [properties] Properties to set
     */
    function FashionData(properties) {
        this.FashionInfos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FashionData FashionInfos.
     * @member {Array.<IFashionInfo>} FashionInfos
     * @memberof FashionData
     * @instance
     */
    FashionData.prototype.FashionInfos = $util.emptyArray;

    /**
     * Creates a new FashionData instance using the specified properties.
     * @function create
     * @memberof FashionData
     * @static
     * @param {IFashionData=} [properties] Properties to set
     * @returns {FashionData} FashionData instance
     */
    FashionData.create = function create(properties) {
        return new FashionData(properties);
    };

    /**
     * Encodes the specified FashionData message. Does not implicitly {@link FashionData.verify|verify} messages.
     * @function encode
     * @memberof FashionData
     * @static
     * @param {IFashionData} message FashionData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FashionData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.FashionInfos != null && message.FashionInfos.length)
            for (var i = 0; i < message.FashionInfos.length; ++i)
                $root.FashionInfo.encode(message.FashionInfos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified FashionData message, length delimited. Does not implicitly {@link FashionData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FashionData
     * @static
     * @param {IFashionData} message FashionData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FashionData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FashionData message from the specified reader or buffer.
     * @function decode
     * @memberof FashionData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FashionData} FashionData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FashionData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FashionData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.FashionInfos && message.FashionInfos.length))
                        message.FashionInfos = [];
                    message.FashionInfos.push($root.FashionInfo.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FashionData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FashionData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FashionData} FashionData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FashionData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FashionData message.
     * @function verify
     * @memberof FashionData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FashionData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.FashionInfos != null && message.hasOwnProperty("FashionInfos")) {
            if (!Array.isArray(message.FashionInfos))
                return "FashionInfos: array expected";
            for (var i = 0; i < message.FashionInfos.length; ++i) {
                var error = $root.FashionInfo.verify(message.FashionInfos[i]);
                if (error)
                    return "FashionInfos." + error;
            }
        }
        return null;
    };

    /**
     * Creates a FashionData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FashionData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FashionData} FashionData
     */
    FashionData.fromObject = function fromObject(object) {
        if (object instanceof $root.FashionData)
            return object;
        var message = new $root.FashionData();
        if (object.FashionInfos) {
            if (!Array.isArray(object.FashionInfos))
                throw TypeError(".FashionData.FashionInfos: array expected");
            message.FashionInfos = [];
            for (var i = 0; i < object.FashionInfos.length; ++i) {
                if (typeof object.FashionInfos[i] !== "object")
                    throw TypeError(".FashionData.FashionInfos: object expected");
                message.FashionInfos[i] = $root.FashionInfo.fromObject(object.FashionInfos[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a FashionData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FashionData
     * @static
     * @param {FashionData} message FashionData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FashionData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.FashionInfos = [];
        if (message.FashionInfos && message.FashionInfos.length) {
            object.FashionInfos = [];
            for (var j = 0; j < message.FashionInfos.length; ++j)
                object.FashionInfos[j] = $root.FashionInfo.toObject(message.FashionInfos[j], options);
        }
        return object;
    };

    /**
     * Converts this FashionData to JSON.
     * @function toJSON
     * @memberof FashionData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FashionData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FashionData
     * @function getTypeUrl
     * @memberof FashionData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FashionData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FashionData";
    };

    return FashionData;
})();

$root.SettingData = (function() {

    /**
     * Properties of a SettingData.
     * @exports ISettingData
     * @interface ISettingData
     * @property {Object.<string,string>|null} [SettingMap] SettingData SettingMap
     */

    /**
     * Constructs a new SettingData.
     * @exports SettingData
     * @classdesc Represents a SettingData.
     * @implements ISettingData
     * @constructor
     * @param {ISettingData=} [properties] Properties to set
     */
    function SettingData(properties) {
        this.SettingMap = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SettingData SettingMap.
     * @member {Object.<string,string>} SettingMap
     * @memberof SettingData
     * @instance
     */
    SettingData.prototype.SettingMap = $util.emptyObject;

    /**
     * Creates a new SettingData instance using the specified properties.
     * @function create
     * @memberof SettingData
     * @static
     * @param {ISettingData=} [properties] Properties to set
     * @returns {SettingData} SettingData instance
     */
    SettingData.create = function create(properties) {
        return new SettingData(properties);
    };

    /**
     * Encodes the specified SettingData message. Does not implicitly {@link SettingData.verify|verify} messages.
     * @function encode
     * @memberof SettingData
     * @static
     * @param {ISettingData} message SettingData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SettingData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.SettingMap != null && Object.hasOwnProperty.call(message, "SettingMap"))
            for (var keys = Object.keys(message.SettingMap), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.SettingMap[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SettingData message, length delimited. Does not implicitly {@link SettingData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SettingData
     * @static
     * @param {ISettingData} message SettingData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SettingData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SettingData message from the specified reader or buffer.
     * @function decode
     * @memberof SettingData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SettingData} SettingData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SettingData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SettingData(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (message.SettingMap === $util.emptyObject)
                        message.SettingMap = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = "";
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = reader.string();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.SettingMap[key] = value;
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SettingData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SettingData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SettingData} SettingData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SettingData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SettingData message.
     * @function verify
     * @memberof SettingData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SettingData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.SettingMap != null && message.hasOwnProperty("SettingMap")) {
            if (!$util.isObject(message.SettingMap))
                return "SettingMap: object expected";
            var key = Object.keys(message.SettingMap);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "SettingMap: integer key{k:int32} expected";
                if (!$util.isString(message.SettingMap[key[i]]))
                    return "SettingMap: string{k:int32} expected";
            }
        }
        return null;
    };

    /**
     * Creates a SettingData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SettingData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SettingData} SettingData
     */
    SettingData.fromObject = function fromObject(object) {
        if (object instanceof $root.SettingData)
            return object;
        var message = new $root.SettingData();
        if (object.SettingMap) {
            if (typeof object.SettingMap !== "object")
                throw TypeError(".SettingData.SettingMap: object expected");
            message.SettingMap = {};
            for (var keys = Object.keys(object.SettingMap), i = 0; i < keys.length; ++i)
                message.SettingMap[keys[i]] = String(object.SettingMap[keys[i]]);
        }
        return message;
    };

    /**
     * Creates a plain object from a SettingData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SettingData
     * @static
     * @param {SettingData} message SettingData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SettingData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.SettingMap = {};
        var keys2;
        if (message.SettingMap && (keys2 = Object.keys(message.SettingMap)).length) {
            object.SettingMap = {};
            for (var j = 0; j < keys2.length; ++j)
                object.SettingMap[keys2[j]] = message.SettingMap[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this SettingData to JSON.
     * @function toJSON
     * @memberof SettingData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SettingData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SettingData
     * @function getTypeUrl
     * @memberof SettingData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SettingData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SettingData";
    };

    return SettingData;
})();

$root.Position = (function() {

    /**
     * Properties of a Position.
     * @exports IPosition
     * @interface IPosition
     * @property {number|null} [X] Position X
     * @property {number|null} [Y] Position Y
     * @property {number|null} [Z] Position Z
     * @property {number|null} [Dir] Position Dir
     */

    /**
     * Constructs a new Position.
     * @exports Position
     * @classdesc Represents a Position.
     * @implements IPosition
     * @constructor
     * @param {IPosition=} [properties] Properties to set
     */
    function Position(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Position X.
     * @member {number|null|undefined} X
     * @memberof Position
     * @instance
     */
    Position.prototype.X = null;

    /**
     * Position Y.
     * @member {number|null|undefined} Y
     * @memberof Position
     * @instance
     */
    Position.prototype.Y = null;

    /**
     * Position Z.
     * @member {number|null|undefined} Z
     * @memberof Position
     * @instance
     */
    Position.prototype.Z = null;

    /**
     * Position Dir.
     * @member {number|null|undefined} Dir
     * @memberof Position
     * @instance
     */
    Position.prototype.Dir = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * Position _X.
     * @member {"X"|undefined} _X
     * @memberof Position
     * @instance
     */
    Object.defineProperty(Position.prototype, "_X", {
        get: $util.oneOfGetter($oneOfFields = ["X"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Position _Y.
     * @member {"Y"|undefined} _Y
     * @memberof Position
     * @instance
     */
    Object.defineProperty(Position.prototype, "_Y", {
        get: $util.oneOfGetter($oneOfFields = ["Y"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Position _Z.
     * @member {"Z"|undefined} _Z
     * @memberof Position
     * @instance
     */
    Object.defineProperty(Position.prototype, "_Z", {
        get: $util.oneOfGetter($oneOfFields = ["Z"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Position _Dir.
     * @member {"Dir"|undefined} _Dir
     * @memberof Position
     * @instance
     */
    Object.defineProperty(Position.prototype, "_Dir", {
        get: $util.oneOfGetter($oneOfFields = ["Dir"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new Position instance using the specified properties.
     * @function create
     * @memberof Position
     * @static
     * @param {IPosition=} [properties] Properties to set
     * @returns {Position} Position instance
     */
    Position.create = function create(properties) {
        return new Position(properties);
    };

    /**
     * Encodes the specified Position message. Does not implicitly {@link Position.verify|verify} messages.
     * @function encode
     * @memberof Position
     * @static
     * @param {IPosition} message Position message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    Position.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.X != null && Object.hasOwnProperty.call(message, "X"))
            writer.uint32(/* id 1, wireType 5 =*/13).float(message.X);
        if (message.Y != null && Object.hasOwnProperty.call(message, "Y"))
            writer.uint32(/* id 2, wireType 5 =*/21).float(message.Y);
        if (message.Z != null && Object.hasOwnProperty.call(message, "Z"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.Z);
        if (message.Dir != null && Object.hasOwnProperty.call(message, "Dir"))
            writer.uint32(/* id 4, wireType 5 =*/37).float(message.Dir);
        return writer;
    };

    /**
     * Encodes the specified Position message, length delimited. Does not implicitly {@link Position.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Position
     * @static
     * @param {IPosition} message Position message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    Position.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a Position message from the specified reader or buffer.
     * @function decode
     * @memberof Position
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Position} Position
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    Position.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Position();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.X = reader.float();
                    break;
                }
            case 2: {
                    message.Y = reader.float();
                    break;
                }
            case 3: {
                    message.Z = reader.float();
                    break;
                }
            case 4: {
                    message.Dir = reader.float();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a Position message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Position
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Position} Position
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    Position.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a Position message.
     * @function verify
     * @memberof Position
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    Position.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.X != null && message.hasOwnProperty("X")) {
            properties._X = 1;
            if (typeof message.X !== "number")
                return "X: number expected";
        }
        if (message.Y != null && message.hasOwnProperty("Y")) {
            properties._Y = 1;
            if (typeof message.Y !== "number")
                return "Y: number expected";
        }
        if (message.Z != null && message.hasOwnProperty("Z")) {
            properties._Z = 1;
            if (typeof message.Z !== "number")
                return "Z: number expected";
        }
        if (message.Dir != null && message.hasOwnProperty("Dir")) {
            properties._Dir = 1;
            if (typeof message.Dir !== "number")
                return "Dir: number expected";
        }
        return null;
    };

    /**
     * Creates a Position message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Position
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Position} Position
     */
    Position.fromObject = function fromObject(object) {
        if (object instanceof $root.Position)
            return object;
        var message = new $root.Position();
        if (object.X != null)
            message.X = Number(object.X);
        if (object.Y != null)
            message.Y = Number(object.Y);
        if (object.Z != null)
            message.Z = Number(object.Z);
        if (object.Dir != null)
            message.Dir = Number(object.Dir);
        return message;
    };

    /**
     * Creates a plain object from a Position message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Position
     * @static
     * @param {Position} message Position
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    Position.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.X != null && message.hasOwnProperty("X")) {
            object.X = options.json && !isFinite(message.X) ? String(message.X) : message.X;
            if (options.oneofs)
                object._X = "X";
        }
        if (message.Y != null && message.hasOwnProperty("Y")) {
            object.Y = options.json && !isFinite(message.Y) ? String(message.Y) : message.Y;
            if (options.oneofs)
                object._Y = "Y";
        }
        if (message.Z != null && message.hasOwnProperty("Z")) {
            object.Z = options.json && !isFinite(message.Z) ? String(message.Z) : message.Z;
            if (options.oneofs)
                object._Z = "Z";
        }
        if (message.Dir != null && message.hasOwnProperty("Dir")) {
            object.Dir = options.json && !isFinite(message.Dir) ? String(message.Dir) : message.Dir;
            if (options.oneofs)
                object._Dir = "Dir";
        }
        return object;
    };

    /**
     * Converts this Position to JSON.
     * @function toJSON
     * @memberof Position
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    Position.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for Position
     * @function getTypeUrl
     * @memberof Position
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    Position.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/Position";
    };

    return Position;
})();

$root.LastSceneData = (function() {

    /**
     * Properties of a LastSceneData.
     * @exports ILastSceneData
     * @interface ILastSceneData
     * @property {number|null} [SceneId] LastSceneData SceneId
     * @property {IPosition|null} [Pos] LastSceneData Pos
     * @property {number|null} [SceneAreaId] LastSceneData SceneAreaId
     */

    /**
     * Constructs a new LastSceneData.
     * @exports LastSceneData
     * @classdesc Represents a LastSceneData.
     * @implements ILastSceneData
     * @constructor
     * @param {ILastSceneData=} [properties] Properties to set
     */
    function LastSceneData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * LastSceneData SceneId.
     * @member {number|null|undefined} SceneId
     * @memberof LastSceneData
     * @instance
     */
    LastSceneData.prototype.SceneId = null;

    /**
     * LastSceneData Pos.
     * @member {IPosition|null|undefined} Pos
     * @memberof LastSceneData
     * @instance
     */
    LastSceneData.prototype.Pos = null;

    /**
     * LastSceneData SceneAreaId.
     * @member {number|null|undefined} SceneAreaId
     * @memberof LastSceneData
     * @instance
     */
    LastSceneData.prototype.SceneAreaId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * LastSceneData _SceneId.
     * @member {"SceneId"|undefined} _SceneId
     * @memberof LastSceneData
     * @instance
     */
    Object.defineProperty(LastSceneData.prototype, "_SceneId", {
        get: $util.oneOfGetter($oneOfFields = ["SceneId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * LastSceneData _Pos.
     * @member {"Pos"|undefined} _Pos
     * @memberof LastSceneData
     * @instance
     */
    Object.defineProperty(LastSceneData.prototype, "_Pos", {
        get: $util.oneOfGetter($oneOfFields = ["Pos"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * LastSceneData _SceneAreaId.
     * @member {"SceneAreaId"|undefined} _SceneAreaId
     * @memberof LastSceneData
     * @instance
     */
    Object.defineProperty(LastSceneData.prototype, "_SceneAreaId", {
        get: $util.oneOfGetter($oneOfFields = ["SceneAreaId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new LastSceneData instance using the specified properties.
     * @function create
     * @memberof LastSceneData
     * @static
     * @param {ILastSceneData=} [properties] Properties to set
     * @returns {LastSceneData} LastSceneData instance
     */
    LastSceneData.create = function create(properties) {
        return new LastSceneData(properties);
    };

    /**
     * Encodes the specified LastSceneData message. Does not implicitly {@link LastSceneData.verify|verify} messages.
     * @function encode
     * @memberof LastSceneData
     * @static
     * @param {ILastSceneData} message LastSceneData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    LastSceneData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.SceneId != null && Object.hasOwnProperty.call(message, "SceneId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.SceneId);
        if (message.Pos != null && Object.hasOwnProperty.call(message, "Pos"))
            $root.Position.encode(message.Pos, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.SceneAreaId != null && Object.hasOwnProperty.call(message, "SceneAreaId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.SceneAreaId);
        return writer;
    };

    /**
     * Encodes the specified LastSceneData message, length delimited. Does not implicitly {@link LastSceneData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof LastSceneData
     * @static
     * @param {ILastSceneData} message LastSceneData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    LastSceneData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a LastSceneData message from the specified reader or buffer.
     * @function decode
     * @memberof LastSceneData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {LastSceneData} LastSceneData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    LastSceneData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LastSceneData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.SceneId = reader.uint32();
                    break;
                }
            case 2: {
                    message.Pos = $root.Position.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.SceneAreaId = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a LastSceneData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof LastSceneData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {LastSceneData} LastSceneData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    LastSceneData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a LastSceneData message.
     * @function verify
     * @memberof LastSceneData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    LastSceneData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.SceneId != null && message.hasOwnProperty("SceneId")) {
            properties._SceneId = 1;
            if (!$util.isInteger(message.SceneId))
                return "SceneId: integer expected";
        }
        if (message.Pos != null && message.hasOwnProperty("Pos")) {
            properties._Pos = 1;
            {
                var error = $root.Position.verify(message.Pos);
                if (error)
                    return "Pos." + error;
            }
        }
        if (message.SceneAreaId != null && message.hasOwnProperty("SceneAreaId")) {
            properties._SceneAreaId = 1;
            if (!$util.isInteger(message.SceneAreaId))
                return "SceneAreaId: integer expected";
        }
        return null;
    };

    /**
     * Creates a LastSceneData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof LastSceneData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {LastSceneData} LastSceneData
     */
    LastSceneData.fromObject = function fromObject(object) {
        if (object instanceof $root.LastSceneData)
            return object;
        var message = new $root.LastSceneData();
        if (object.SceneId != null)
            message.SceneId = object.SceneId >>> 0;
        if (object.Pos != null) {
            if (typeof object.Pos !== "object")
                throw TypeError(".LastSceneData.Pos: object expected");
            message.Pos = $root.Position.fromObject(object.Pos);
        }
        if (object.SceneAreaId != null)
            message.SceneAreaId = object.SceneAreaId | 0;
        return message;
    };

    /**
     * Creates a plain object from a LastSceneData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof LastSceneData
     * @static
     * @param {LastSceneData} message LastSceneData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    LastSceneData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.SceneId != null && message.hasOwnProperty("SceneId")) {
            object.SceneId = message.SceneId;
            if (options.oneofs)
                object._SceneId = "SceneId";
        }
        if (message.Pos != null && message.hasOwnProperty("Pos")) {
            object.Pos = $root.Position.toObject(message.Pos, options);
            if (options.oneofs)
                object._Pos = "Pos";
        }
        if (message.SceneAreaId != null && message.hasOwnProperty("SceneAreaId")) {
            object.SceneAreaId = message.SceneAreaId;
            if (options.oneofs)
                object._SceneAreaId = "SceneAreaId";
        }
        return object;
    };

    /**
     * Converts this LastSceneData to JSON.
     * @function toJSON
     * @memberof LastSceneData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    LastSceneData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for LastSceneData
     * @function getTypeUrl
     * @memberof LastSceneData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    LastSceneData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/LastSceneData";
    };

    return LastSceneData;
})();

$root.SceneData = (function() {

    /**
     * Properties of a SceneData.
     * @exports ISceneData
     * @interface ISceneData
     * @property {number|null} [MapId] SceneData MapId
     * @property {number|null} [ChannelId] SceneData ChannelId
     * @property {IPosition|null} [Pos] SceneData Pos
     * @property {number|Long|null} [LevelUuid] SceneData LevelUuid
     * @property {IPosition|null} [LevelPos] SceneData LevelPos
     * @property {number|null} [LevelMapId] SceneData LevelMapId
     * @property {number|null} [LevelReviveId] SceneData LevelReviveId
     * @property {Object.<string,number>|null} [RecordId] SceneData RecordId
     * @property {number|null} [PlaneId] SceneData PlaneId
     * @property {number|null} [SceneLayer] SceneData SceneLayer
     * @property {boolean|null} [CanSwitchLayer] SceneData CanSwitchLayer
     * @property {IPosition|null} [BeforeFallPos] SceneData BeforeFallPos
     * @property {string|null} [SceneGuid] SceneData SceneGuid
     * @property {string|null} [DungeonGuid] SceneData DungeonGuid
     * @property {number|null} [LineId] SceneData LineId
     * @property {number|null} [VisualLayerConfigId] SceneData VisualLayerConfigId
     * @property {ILastSceneData|null} [LastSceneData] SceneData LastSceneData
     * @property {number|null} [SceneAreaId] SceneData SceneAreaId
     * @property {number|null} [LevelAreaId] SceneData LevelAreaId
     * @property {number|null} [BeforeFallSceneAreaId] SceneData BeforeFallSceneAreaId
     */

    /**
     * Constructs a new SceneData.
     * @exports SceneData
     * @classdesc Represents a SceneData.
     * @implements ISceneData
     * @constructor
     * @param {ISceneData=} [properties] Properties to set
     */
    function SceneData(properties) {
        this.RecordId = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SceneData MapId.
     * @member {number|null|undefined} MapId
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.MapId = null;

    /**
     * SceneData ChannelId.
     * @member {number|null|undefined} ChannelId
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.ChannelId = null;

    /**
     * SceneData Pos.
     * @member {IPosition|null|undefined} Pos
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.Pos = null;

    /**
     * SceneData LevelUuid.
     * @member {number|Long|null|undefined} LevelUuid
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.LevelUuid = null;

    /**
     * SceneData LevelPos.
     * @member {IPosition|null|undefined} LevelPos
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.LevelPos = null;

    /**
     * SceneData LevelMapId.
     * @member {number|null|undefined} LevelMapId
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.LevelMapId = null;

    /**
     * SceneData LevelReviveId.
     * @member {number|null|undefined} LevelReviveId
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.LevelReviveId = null;

    /**
     * SceneData RecordId.
     * @member {Object.<string,number>} RecordId
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.RecordId = $util.emptyObject;

    /**
     * SceneData PlaneId.
     * @member {number|null|undefined} PlaneId
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.PlaneId = null;

    /**
     * SceneData SceneLayer.
     * @member {number|null|undefined} SceneLayer
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.SceneLayer = null;

    /**
     * SceneData CanSwitchLayer.
     * @member {boolean|null|undefined} CanSwitchLayer
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.CanSwitchLayer = null;

    /**
     * SceneData BeforeFallPos.
     * @member {IPosition|null|undefined} BeforeFallPos
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.BeforeFallPos = null;

    /**
     * SceneData SceneGuid.
     * @member {string|null|undefined} SceneGuid
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.SceneGuid = null;

    /**
     * SceneData DungeonGuid.
     * @member {string|null|undefined} DungeonGuid
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.DungeonGuid = null;

    /**
     * SceneData LineId.
     * @member {number|null|undefined} LineId
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.LineId = null;

    /**
     * SceneData VisualLayerConfigId.
     * @member {number|null|undefined} VisualLayerConfigId
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.VisualLayerConfigId = null;

    /**
     * SceneData LastSceneData.
     * @member {ILastSceneData|null|undefined} LastSceneData
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.LastSceneData = null;

    /**
     * SceneData SceneAreaId.
     * @member {number|null|undefined} SceneAreaId
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.SceneAreaId = null;

    /**
     * SceneData LevelAreaId.
     * @member {number|null|undefined} LevelAreaId
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.LevelAreaId = null;

    /**
     * SceneData BeforeFallSceneAreaId.
     * @member {number|null|undefined} BeforeFallSceneAreaId
     * @memberof SceneData
     * @instance
     */
    SceneData.prototype.BeforeFallSceneAreaId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * SceneData _MapId.
     * @member {"MapId"|undefined} _MapId
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_MapId", {
        get: $util.oneOfGetter($oneOfFields = ["MapId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _ChannelId.
     * @member {"ChannelId"|undefined} _ChannelId
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_ChannelId", {
        get: $util.oneOfGetter($oneOfFields = ["ChannelId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _Pos.
     * @member {"Pos"|undefined} _Pos
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_Pos", {
        get: $util.oneOfGetter($oneOfFields = ["Pos"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _LevelUuid.
     * @member {"LevelUuid"|undefined} _LevelUuid
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_LevelUuid", {
        get: $util.oneOfGetter($oneOfFields = ["LevelUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _LevelPos.
     * @member {"LevelPos"|undefined} _LevelPos
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_LevelPos", {
        get: $util.oneOfGetter($oneOfFields = ["LevelPos"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _LevelMapId.
     * @member {"LevelMapId"|undefined} _LevelMapId
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_LevelMapId", {
        get: $util.oneOfGetter($oneOfFields = ["LevelMapId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _LevelReviveId.
     * @member {"LevelReviveId"|undefined} _LevelReviveId
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_LevelReviveId", {
        get: $util.oneOfGetter($oneOfFields = ["LevelReviveId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _PlaneId.
     * @member {"PlaneId"|undefined} _PlaneId
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_PlaneId", {
        get: $util.oneOfGetter($oneOfFields = ["PlaneId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _SceneLayer.
     * @member {"SceneLayer"|undefined} _SceneLayer
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_SceneLayer", {
        get: $util.oneOfGetter($oneOfFields = ["SceneLayer"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _CanSwitchLayer.
     * @member {"CanSwitchLayer"|undefined} _CanSwitchLayer
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_CanSwitchLayer", {
        get: $util.oneOfGetter($oneOfFields = ["CanSwitchLayer"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _BeforeFallPos.
     * @member {"BeforeFallPos"|undefined} _BeforeFallPos
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_BeforeFallPos", {
        get: $util.oneOfGetter($oneOfFields = ["BeforeFallPos"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _SceneGuid.
     * @member {"SceneGuid"|undefined} _SceneGuid
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_SceneGuid", {
        get: $util.oneOfGetter($oneOfFields = ["SceneGuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _DungeonGuid.
     * @member {"DungeonGuid"|undefined} _DungeonGuid
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_DungeonGuid", {
        get: $util.oneOfGetter($oneOfFields = ["DungeonGuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _LineId.
     * @member {"LineId"|undefined} _LineId
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_LineId", {
        get: $util.oneOfGetter($oneOfFields = ["LineId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _VisualLayerConfigId.
     * @member {"VisualLayerConfigId"|undefined} _VisualLayerConfigId
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_VisualLayerConfigId", {
        get: $util.oneOfGetter($oneOfFields = ["VisualLayerConfigId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _LastSceneData.
     * @member {"LastSceneData"|undefined} _LastSceneData
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_LastSceneData", {
        get: $util.oneOfGetter($oneOfFields = ["LastSceneData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _SceneAreaId.
     * @member {"SceneAreaId"|undefined} _SceneAreaId
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_SceneAreaId", {
        get: $util.oneOfGetter($oneOfFields = ["SceneAreaId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _LevelAreaId.
     * @member {"LevelAreaId"|undefined} _LevelAreaId
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_LevelAreaId", {
        get: $util.oneOfGetter($oneOfFields = ["LevelAreaId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneData _BeforeFallSceneAreaId.
     * @member {"BeforeFallSceneAreaId"|undefined} _BeforeFallSceneAreaId
     * @memberof SceneData
     * @instance
     */
    Object.defineProperty(SceneData.prototype, "_BeforeFallSceneAreaId", {
        get: $util.oneOfGetter($oneOfFields = ["BeforeFallSceneAreaId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new SceneData instance using the specified properties.
     * @function create
     * @memberof SceneData
     * @static
     * @param {ISceneData=} [properties] Properties to set
     * @returns {SceneData} SceneData instance
     */
    SceneData.create = function create(properties) {
        return new SceneData(properties);
    };

    /**
     * Encodes the specified SceneData message. Does not implicitly {@link SceneData.verify|verify} messages.
     * @function encode
     * @memberof SceneData
     * @static
     * @param {ISceneData} message SceneData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SceneData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.MapId != null && Object.hasOwnProperty.call(message, "MapId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.MapId);
        if (message.ChannelId != null && Object.hasOwnProperty.call(message, "ChannelId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ChannelId);
        if (message.Pos != null && Object.hasOwnProperty.call(message, "Pos"))
            $root.Position.encode(message.Pos, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.LevelUuid != null && Object.hasOwnProperty.call(message, "LevelUuid"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.LevelUuid);
        if (message.LevelPos != null && Object.hasOwnProperty.call(message, "LevelPos"))
            $root.Position.encode(message.LevelPos, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.LevelMapId != null && Object.hasOwnProperty.call(message, "LevelMapId"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.LevelMapId);
        if (message.LevelReviveId != null && Object.hasOwnProperty.call(message, "LevelReviveId"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.LevelReviveId);
        if (message.RecordId != null && Object.hasOwnProperty.call(message, "RecordId"))
            for (var keys = Object.keys(message.RecordId), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 8, wireType 2 =*/66).fork().uint32(/* id 1, wireType 0 =*/8).uint32(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint32(message.RecordId[keys[i]]).ldelim();
        if (message.PlaneId != null && Object.hasOwnProperty.call(message, "PlaneId"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.PlaneId);
        if (message.SceneLayer != null && Object.hasOwnProperty.call(message, "SceneLayer"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.SceneLayer);
        if (message.CanSwitchLayer != null && Object.hasOwnProperty.call(message, "CanSwitchLayer"))
            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.CanSwitchLayer);
        if (message.BeforeFallPos != null && Object.hasOwnProperty.call(message, "BeforeFallPos"))
            $root.Position.encode(message.BeforeFallPos, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.SceneGuid != null && Object.hasOwnProperty.call(message, "SceneGuid"))
            writer.uint32(/* id 13, wireType 2 =*/106).string(message.SceneGuid);
        if (message.DungeonGuid != null && Object.hasOwnProperty.call(message, "DungeonGuid"))
            writer.uint32(/* id 14, wireType 2 =*/114).string(message.DungeonGuid);
        if (message.LineId != null && Object.hasOwnProperty.call(message, "LineId"))
            writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.LineId);
        if (message.VisualLayerConfigId != null && Object.hasOwnProperty.call(message, "VisualLayerConfigId"))
            writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.VisualLayerConfigId);
        if (message.LastSceneData != null && Object.hasOwnProperty.call(message, "LastSceneData"))
            $root.LastSceneData.encode(message.LastSceneData, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
        if (message.SceneAreaId != null && Object.hasOwnProperty.call(message, "SceneAreaId"))
            writer.uint32(/* id 18, wireType 0 =*/144).int32(message.SceneAreaId);
        if (message.LevelAreaId != null && Object.hasOwnProperty.call(message, "LevelAreaId"))
            writer.uint32(/* id 19, wireType 0 =*/152).int32(message.LevelAreaId);
        if (message.BeforeFallSceneAreaId != null && Object.hasOwnProperty.call(message, "BeforeFallSceneAreaId"))
            writer.uint32(/* id 20, wireType 0 =*/160).int32(message.BeforeFallSceneAreaId);
        return writer;
    };

    /**
     * Encodes the specified SceneData message, length delimited. Does not implicitly {@link SceneData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SceneData
     * @static
     * @param {ISceneData} message SceneData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SceneData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SceneData message from the specified reader or buffer.
     * @function decode
     * @memberof SceneData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SceneData} SceneData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SceneData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SceneData(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.MapId = reader.uint32();
                    break;
                }
            case 2: {
                    message.ChannelId = reader.uint32();
                    break;
                }
            case 3: {
                    message.Pos = $root.Position.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.LevelUuid = reader.int64();
                    break;
                }
            case 5: {
                    message.LevelPos = $root.Position.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.LevelMapId = reader.uint32();
                    break;
                }
            case 7: {
                    message.LevelReviveId = reader.uint32();
                    break;
                }
            case 8: {
                    if (message.RecordId === $util.emptyObject)
                        message.RecordId = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = 0;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.uint32();
                            break;
                        case 2:
                            value = reader.uint32();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.RecordId[key] = value;
                    break;
                }
            case 9: {
                    message.PlaneId = reader.uint32();
                    break;
                }
            case 10: {
                    message.SceneLayer = reader.uint32();
                    break;
                }
            case 11: {
                    message.CanSwitchLayer = reader.bool();
                    break;
                }
            case 12: {
                    message.BeforeFallPos = $root.Position.decode(reader, reader.uint32());
                    break;
                }
            case 13: {
                    message.SceneGuid = reader.string();
                    break;
                }
            case 14: {
                    message.DungeonGuid = reader.string();
                    break;
                }
            case 15: {
                    message.LineId = reader.uint32();
                    break;
                }
            case 16: {
                    message.VisualLayerConfigId = reader.uint32();
                    break;
                }
            case 17: {
                    message.LastSceneData = $root.LastSceneData.decode(reader, reader.uint32());
                    break;
                }
            case 18: {
                    message.SceneAreaId = reader.int32();
                    break;
                }
            case 19: {
                    message.LevelAreaId = reader.int32();
                    break;
                }
            case 20: {
                    message.BeforeFallSceneAreaId = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SceneData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SceneData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SceneData} SceneData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SceneData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SceneData message.
     * @function verify
     * @memberof SceneData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SceneData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.MapId != null && message.hasOwnProperty("MapId")) {
            properties._MapId = 1;
            if (!$util.isInteger(message.MapId))
                return "MapId: integer expected";
        }
        if (message.ChannelId != null && message.hasOwnProperty("ChannelId")) {
            properties._ChannelId = 1;
            if (!$util.isInteger(message.ChannelId))
                return "ChannelId: integer expected";
        }
        if (message.Pos != null && message.hasOwnProperty("Pos")) {
            properties._Pos = 1;
            {
                var error = $root.Position.verify(message.Pos);
                if (error)
                    return "Pos." + error;
            }
        }
        if (message.LevelUuid != null && message.hasOwnProperty("LevelUuid")) {
            properties._LevelUuid = 1;
            if (!$util.isInteger(message.LevelUuid) && !(message.LevelUuid && $util.isInteger(message.LevelUuid.low) && $util.isInteger(message.LevelUuid.high)))
                return "LevelUuid: integer|Long expected";
        }
        if (message.LevelPos != null && message.hasOwnProperty("LevelPos")) {
            properties._LevelPos = 1;
            {
                var error = $root.Position.verify(message.LevelPos);
                if (error)
                    return "LevelPos." + error;
            }
        }
        if (message.LevelMapId != null && message.hasOwnProperty("LevelMapId")) {
            properties._LevelMapId = 1;
            if (!$util.isInteger(message.LevelMapId))
                return "LevelMapId: integer expected";
        }
        if (message.LevelReviveId != null && message.hasOwnProperty("LevelReviveId")) {
            properties._LevelReviveId = 1;
            if (!$util.isInteger(message.LevelReviveId))
                return "LevelReviveId: integer expected";
        }
        if (message.RecordId != null && message.hasOwnProperty("RecordId")) {
            if (!$util.isObject(message.RecordId))
                return "RecordId: object expected";
            var key = Object.keys(message.RecordId);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "RecordId: integer key{k:uint32} expected";
                if (!$util.isInteger(message.RecordId[key[i]]))
                    return "RecordId: integer{k:uint32} expected";
            }
        }
        if (message.PlaneId != null && message.hasOwnProperty("PlaneId")) {
            properties._PlaneId = 1;
            if (!$util.isInteger(message.PlaneId))
                return "PlaneId: integer expected";
        }
        if (message.SceneLayer != null && message.hasOwnProperty("SceneLayer")) {
            properties._SceneLayer = 1;
            if (!$util.isInteger(message.SceneLayer))
                return "SceneLayer: integer expected";
        }
        if (message.CanSwitchLayer != null && message.hasOwnProperty("CanSwitchLayer")) {
            properties._CanSwitchLayer = 1;
            if (typeof message.CanSwitchLayer !== "boolean")
                return "CanSwitchLayer: boolean expected";
        }
        if (message.BeforeFallPos != null && message.hasOwnProperty("BeforeFallPos")) {
            properties._BeforeFallPos = 1;
            {
                var error = $root.Position.verify(message.BeforeFallPos);
                if (error)
                    return "BeforeFallPos." + error;
            }
        }
        if (message.SceneGuid != null && message.hasOwnProperty("SceneGuid")) {
            properties._SceneGuid = 1;
            if (!$util.isString(message.SceneGuid))
                return "SceneGuid: string expected";
        }
        if (message.DungeonGuid != null && message.hasOwnProperty("DungeonGuid")) {
            properties._DungeonGuid = 1;
            if (!$util.isString(message.DungeonGuid))
                return "DungeonGuid: string expected";
        }
        if (message.LineId != null && message.hasOwnProperty("LineId")) {
            properties._LineId = 1;
            if (!$util.isInteger(message.LineId))
                return "LineId: integer expected";
        }
        if (message.VisualLayerConfigId != null && message.hasOwnProperty("VisualLayerConfigId")) {
            properties._VisualLayerConfigId = 1;
            if (!$util.isInteger(message.VisualLayerConfigId))
                return "VisualLayerConfigId: integer expected";
        }
        if (message.LastSceneData != null && message.hasOwnProperty("LastSceneData")) {
            properties._LastSceneData = 1;
            {
                var error = $root.LastSceneData.verify(message.LastSceneData);
                if (error)
                    return "LastSceneData." + error;
            }
        }
        if (message.SceneAreaId != null && message.hasOwnProperty("SceneAreaId")) {
            properties._SceneAreaId = 1;
            if (!$util.isInteger(message.SceneAreaId))
                return "SceneAreaId: integer expected";
        }
        if (message.LevelAreaId != null && message.hasOwnProperty("LevelAreaId")) {
            properties._LevelAreaId = 1;
            if (!$util.isInteger(message.LevelAreaId))
                return "LevelAreaId: integer expected";
        }
        if (message.BeforeFallSceneAreaId != null && message.hasOwnProperty("BeforeFallSceneAreaId")) {
            properties._BeforeFallSceneAreaId = 1;
            if (!$util.isInteger(message.BeforeFallSceneAreaId))
                return "BeforeFallSceneAreaId: integer expected";
        }
        return null;
    };

    /**
     * Creates a SceneData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SceneData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SceneData} SceneData
     */
    SceneData.fromObject = function fromObject(object) {
        if (object instanceof $root.SceneData)
            return object;
        var message = new $root.SceneData();
        if (object.MapId != null)
            message.MapId = object.MapId >>> 0;
        if (object.ChannelId != null)
            message.ChannelId = object.ChannelId >>> 0;
        if (object.Pos != null) {
            if (typeof object.Pos !== "object")
                throw TypeError(".SceneData.Pos: object expected");
            message.Pos = $root.Position.fromObject(object.Pos);
        }
        if (object.LevelUuid != null)
            if ($util.Long)
                (message.LevelUuid = $util.Long.fromValue(object.LevelUuid)).unsigned = false;
            else if (typeof object.LevelUuid === "string")
                message.LevelUuid = parseInt(object.LevelUuid, 10);
            else if (typeof object.LevelUuid === "number")
                message.LevelUuid = object.LevelUuid;
            else if (typeof object.LevelUuid === "object")
                message.LevelUuid = new $util.LongBits(object.LevelUuid.low >>> 0, object.LevelUuid.high >>> 0).toNumber();
        if (object.LevelPos != null) {
            if (typeof object.LevelPos !== "object")
                throw TypeError(".SceneData.LevelPos: object expected");
            message.LevelPos = $root.Position.fromObject(object.LevelPos);
        }
        if (object.LevelMapId != null)
            message.LevelMapId = object.LevelMapId >>> 0;
        if (object.LevelReviveId != null)
            message.LevelReviveId = object.LevelReviveId >>> 0;
        if (object.RecordId) {
            if (typeof object.RecordId !== "object")
                throw TypeError(".SceneData.RecordId: object expected");
            message.RecordId = {};
            for (var keys = Object.keys(object.RecordId), i = 0; i < keys.length; ++i)
                message.RecordId[keys[i]] = object.RecordId[keys[i]] >>> 0;
        }
        if (object.PlaneId != null)
            message.PlaneId = object.PlaneId >>> 0;
        if (object.SceneLayer != null)
            message.SceneLayer = object.SceneLayer >>> 0;
        if (object.CanSwitchLayer != null)
            message.CanSwitchLayer = Boolean(object.CanSwitchLayer);
        if (object.BeforeFallPos != null) {
            if (typeof object.BeforeFallPos !== "object")
                throw TypeError(".SceneData.BeforeFallPos: object expected");
            message.BeforeFallPos = $root.Position.fromObject(object.BeforeFallPos);
        }
        if (object.SceneGuid != null)
            message.SceneGuid = String(object.SceneGuid);
        if (object.DungeonGuid != null)
            message.DungeonGuid = String(object.DungeonGuid);
        if (object.LineId != null)
            message.LineId = object.LineId >>> 0;
        if (object.VisualLayerConfigId != null)
            message.VisualLayerConfigId = object.VisualLayerConfigId >>> 0;
        if (object.LastSceneData != null) {
            if (typeof object.LastSceneData !== "object")
                throw TypeError(".SceneData.LastSceneData: object expected");
            message.LastSceneData = $root.LastSceneData.fromObject(object.LastSceneData);
        }
        if (object.SceneAreaId != null)
            message.SceneAreaId = object.SceneAreaId | 0;
        if (object.LevelAreaId != null)
            message.LevelAreaId = object.LevelAreaId | 0;
        if (object.BeforeFallSceneAreaId != null)
            message.BeforeFallSceneAreaId = object.BeforeFallSceneAreaId | 0;
        return message;
    };

    /**
     * Creates a plain object from a SceneData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SceneData
     * @static
     * @param {SceneData} message SceneData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SceneData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.RecordId = {};
        if (message.MapId != null && message.hasOwnProperty("MapId")) {
            object.MapId = message.MapId;
            if (options.oneofs)
                object._MapId = "MapId";
        }
        if (message.ChannelId != null && message.hasOwnProperty("ChannelId")) {
            object.ChannelId = message.ChannelId;
            if (options.oneofs)
                object._ChannelId = "ChannelId";
        }
        if (message.Pos != null && message.hasOwnProperty("Pos")) {
            object.Pos = $root.Position.toObject(message.Pos, options);
            if (options.oneofs)
                object._Pos = "Pos";
        }
        if (message.LevelUuid != null && message.hasOwnProperty("LevelUuid")) {
            if (typeof message.LevelUuid === "number")
                object.LevelUuid = options.longs === String ? String(message.LevelUuid) : message.LevelUuid;
            else
                object.LevelUuid = options.longs === String ? $util.Long.prototype.toString.call(message.LevelUuid) : options.longs === Number ? new $util.LongBits(message.LevelUuid.low >>> 0, message.LevelUuid.high >>> 0).toNumber() : message.LevelUuid;
            if (options.oneofs)
                object._LevelUuid = "LevelUuid";
        }
        if (message.LevelPos != null && message.hasOwnProperty("LevelPos")) {
            object.LevelPos = $root.Position.toObject(message.LevelPos, options);
            if (options.oneofs)
                object._LevelPos = "LevelPos";
        }
        if (message.LevelMapId != null && message.hasOwnProperty("LevelMapId")) {
            object.LevelMapId = message.LevelMapId;
            if (options.oneofs)
                object._LevelMapId = "LevelMapId";
        }
        if (message.LevelReviveId != null && message.hasOwnProperty("LevelReviveId")) {
            object.LevelReviveId = message.LevelReviveId;
            if (options.oneofs)
                object._LevelReviveId = "LevelReviveId";
        }
        var keys2;
        if (message.RecordId && (keys2 = Object.keys(message.RecordId)).length) {
            object.RecordId = {};
            for (var j = 0; j < keys2.length; ++j)
                object.RecordId[keys2[j]] = message.RecordId[keys2[j]];
        }
        if (message.PlaneId != null && message.hasOwnProperty("PlaneId")) {
            object.PlaneId = message.PlaneId;
            if (options.oneofs)
                object._PlaneId = "PlaneId";
        }
        if (message.SceneLayer != null && message.hasOwnProperty("SceneLayer")) {
            object.SceneLayer = message.SceneLayer;
            if (options.oneofs)
                object._SceneLayer = "SceneLayer";
        }
        if (message.CanSwitchLayer != null && message.hasOwnProperty("CanSwitchLayer")) {
            object.CanSwitchLayer = message.CanSwitchLayer;
            if (options.oneofs)
                object._CanSwitchLayer = "CanSwitchLayer";
        }
        if (message.BeforeFallPos != null && message.hasOwnProperty("BeforeFallPos")) {
            object.BeforeFallPos = $root.Position.toObject(message.BeforeFallPos, options);
            if (options.oneofs)
                object._BeforeFallPos = "BeforeFallPos";
        }
        if (message.SceneGuid != null && message.hasOwnProperty("SceneGuid")) {
            object.SceneGuid = message.SceneGuid;
            if (options.oneofs)
                object._SceneGuid = "SceneGuid";
        }
        if (message.DungeonGuid != null && message.hasOwnProperty("DungeonGuid")) {
            object.DungeonGuid = message.DungeonGuid;
            if (options.oneofs)
                object._DungeonGuid = "DungeonGuid";
        }
        if (message.LineId != null && message.hasOwnProperty("LineId")) {
            object.LineId = message.LineId;
            if (options.oneofs)
                object._LineId = "LineId";
        }
        if (message.VisualLayerConfigId != null && message.hasOwnProperty("VisualLayerConfigId")) {
            object.VisualLayerConfigId = message.VisualLayerConfigId;
            if (options.oneofs)
                object._VisualLayerConfigId = "VisualLayerConfigId";
        }
        if (message.LastSceneData != null && message.hasOwnProperty("LastSceneData")) {
            object.LastSceneData = $root.LastSceneData.toObject(message.LastSceneData, options);
            if (options.oneofs)
                object._LastSceneData = "LastSceneData";
        }
        if (message.SceneAreaId != null && message.hasOwnProperty("SceneAreaId")) {
            object.SceneAreaId = message.SceneAreaId;
            if (options.oneofs)
                object._SceneAreaId = "SceneAreaId";
        }
        if (message.LevelAreaId != null && message.hasOwnProperty("LevelAreaId")) {
            object.LevelAreaId = message.LevelAreaId;
            if (options.oneofs)
                object._LevelAreaId = "LevelAreaId";
        }
        if (message.BeforeFallSceneAreaId != null && message.hasOwnProperty("BeforeFallSceneAreaId")) {
            object.BeforeFallSceneAreaId = message.BeforeFallSceneAreaId;
            if (options.oneofs)
                object._BeforeFallSceneAreaId = "BeforeFallSceneAreaId";
        }
        return object;
    };

    /**
     * Converts this SceneData to JSON.
     * @function toJSON
     * @memberof SceneData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SceneData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SceneData
     * @function getTypeUrl
     * @memberof SceneData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SceneData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SceneData";
    };

    return SceneData;
})();

$root.UserAttrData = (function() {

    /**
     * Properties of a UserAttrData.
     * @exports IUserAttrData
     * @interface IUserAttrData
     * @property {number|null} [State] UserAttrData State
     * @property {number|Long|null} [FightPoint] UserAttrData FightPoint
     */

    /**
     * Constructs a new UserAttrData.
     * @exports UserAttrData
     * @classdesc Represents a UserAttrData.
     * @implements IUserAttrData
     * @constructor
     * @param {IUserAttrData=} [properties] Properties to set
     */
    function UserAttrData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * UserAttrData State.
     * @member {number|null|undefined} State
     * @memberof UserAttrData
     * @instance
     */
    UserAttrData.prototype.State = null;

    /**
     * UserAttrData FightPoint.
     * @member {number|Long|null|undefined} FightPoint
     * @memberof UserAttrData
     * @instance
     */
    UserAttrData.prototype.FightPoint = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * UserAttrData _State.
     * @member {"State"|undefined} _State
     * @memberof UserAttrData
     * @instance
     */
    Object.defineProperty(UserAttrData.prototype, "_State", {
        get: $util.oneOfGetter($oneOfFields = ["State"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * UserAttrData _FightPoint.
     * @member {"FightPoint"|undefined} _FightPoint
     * @memberof UserAttrData
     * @instance
     */
    Object.defineProperty(UserAttrData.prototype, "_FightPoint", {
        get: $util.oneOfGetter($oneOfFields = ["FightPoint"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new UserAttrData instance using the specified properties.
     * @function create
     * @memberof UserAttrData
     * @static
     * @param {IUserAttrData=} [properties] Properties to set
     * @returns {UserAttrData} UserAttrData instance
     */
    UserAttrData.create = function create(properties) {
        return new UserAttrData(properties);
    };

    /**
     * Encodes the specified UserAttrData message. Does not implicitly {@link UserAttrData.verify|verify} messages.
     * @function encode
     * @memberof UserAttrData
     * @static
     * @param {IUserAttrData} message UserAttrData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UserAttrData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.State != null && Object.hasOwnProperty.call(message, "State"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.State);
        if (message.FightPoint != null && Object.hasOwnProperty.call(message, "FightPoint"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.FightPoint);
        return writer;
    };

    /**
     * Encodes the specified UserAttrData message, length delimited. Does not implicitly {@link UserAttrData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UserAttrData
     * @static
     * @param {IUserAttrData} message UserAttrData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UserAttrData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a UserAttrData message from the specified reader or buffer.
     * @function decode
     * @memberof UserAttrData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UserAttrData} UserAttrData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UserAttrData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserAttrData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.State = reader.int32();
                    break;
                }
            case 2: {
                    message.FightPoint = reader.int64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a UserAttrData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UserAttrData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UserAttrData} UserAttrData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UserAttrData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a UserAttrData message.
     * @function verify
     * @memberof UserAttrData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    UserAttrData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.State != null && message.hasOwnProperty("State")) {
            properties._State = 1;
            if (!$util.isInteger(message.State))
                return "State: integer expected";
        }
        if (message.FightPoint != null && message.hasOwnProperty("FightPoint")) {
            properties._FightPoint = 1;
            if (!$util.isInteger(message.FightPoint) && !(message.FightPoint && $util.isInteger(message.FightPoint.low) && $util.isInteger(message.FightPoint.high)))
                return "FightPoint: integer|Long expected";
        }
        return null;
    };

    /**
     * Creates a UserAttrData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UserAttrData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UserAttrData} UserAttrData
     */
    UserAttrData.fromObject = function fromObject(object) {
        if (object instanceof $root.UserAttrData)
            return object;
        var message = new $root.UserAttrData();
        if (object.State != null)
            message.State = object.State | 0;
        if (object.FightPoint != null)
            if ($util.Long)
                (message.FightPoint = $util.Long.fromValue(object.FightPoint)).unsigned = false;
            else if (typeof object.FightPoint === "string")
                message.FightPoint = parseInt(object.FightPoint, 10);
            else if (typeof object.FightPoint === "number")
                message.FightPoint = object.FightPoint;
            else if (typeof object.FightPoint === "object")
                message.FightPoint = new $util.LongBits(object.FightPoint.low >>> 0, object.FightPoint.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a UserAttrData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UserAttrData
     * @static
     * @param {UserAttrData} message UserAttrData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    UserAttrData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.State != null && message.hasOwnProperty("State")) {
            object.State = message.State;
            if (options.oneofs)
                object._State = "State";
        }
        if (message.FightPoint != null && message.hasOwnProperty("FightPoint")) {
            if (typeof message.FightPoint === "number")
                object.FightPoint = options.longs === String ? String(message.FightPoint) : message.FightPoint;
            else
                object.FightPoint = options.longs === String ? $util.Long.prototype.toString.call(message.FightPoint) : options.longs === Number ? new $util.LongBits(message.FightPoint.low >>> 0, message.FightPoint.high >>> 0).toNumber() : message.FightPoint;
            if (options.oneofs)
                object._FightPoint = "FightPoint";
        }
        return object;
    };

    /**
     * Converts this UserAttrData to JSON.
     * @function toJSON
     * @memberof UserAttrData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    UserAttrData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for UserAttrData
     * @function getTypeUrl
     * @memberof UserAttrData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    UserAttrData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/UserAttrData";
    };

    return UserAttrData;
})();

$root.UserSceneInfo = (function() {

    /**
     * Properties of a UserSceneInfo.
     * @exports IUserSceneInfo
     * @interface IUserSceneInfo
     * @property {number|null} [SceneId] UserSceneInfo SceneId
     * @property {string|null} [SceneGuid] UserSceneInfo SceneGuid
     * @property {number|null} [LineId] UserSceneInfo LineId
     */

    /**
     * Constructs a new UserSceneInfo.
     * @exports UserSceneInfo
     * @classdesc Represents a UserSceneInfo.
     * @implements IUserSceneInfo
     * @constructor
     * @param {IUserSceneInfo=} [properties] Properties to set
     */
    function UserSceneInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * UserSceneInfo SceneId.
     * @member {number|null|undefined} SceneId
     * @memberof UserSceneInfo
     * @instance
     */
    UserSceneInfo.prototype.SceneId = null;

    /**
     * UserSceneInfo SceneGuid.
     * @member {string|null|undefined} SceneGuid
     * @memberof UserSceneInfo
     * @instance
     */
    UserSceneInfo.prototype.SceneGuid = null;

    /**
     * UserSceneInfo LineId.
     * @member {number|null|undefined} LineId
     * @memberof UserSceneInfo
     * @instance
     */
    UserSceneInfo.prototype.LineId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * UserSceneInfo _SceneId.
     * @member {"SceneId"|undefined} _SceneId
     * @memberof UserSceneInfo
     * @instance
     */
    Object.defineProperty(UserSceneInfo.prototype, "_SceneId", {
        get: $util.oneOfGetter($oneOfFields = ["SceneId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * UserSceneInfo _SceneGuid.
     * @member {"SceneGuid"|undefined} _SceneGuid
     * @memberof UserSceneInfo
     * @instance
     */
    Object.defineProperty(UserSceneInfo.prototype, "_SceneGuid", {
        get: $util.oneOfGetter($oneOfFields = ["SceneGuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * UserSceneInfo _LineId.
     * @member {"LineId"|undefined} _LineId
     * @memberof UserSceneInfo
     * @instance
     */
    Object.defineProperty(UserSceneInfo.prototype, "_LineId", {
        get: $util.oneOfGetter($oneOfFields = ["LineId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new UserSceneInfo instance using the specified properties.
     * @function create
     * @memberof UserSceneInfo
     * @static
     * @param {IUserSceneInfo=} [properties] Properties to set
     * @returns {UserSceneInfo} UserSceneInfo instance
     */
    UserSceneInfo.create = function create(properties) {
        return new UserSceneInfo(properties);
    };

    /**
     * Encodes the specified UserSceneInfo message. Does not implicitly {@link UserSceneInfo.verify|verify} messages.
     * @function encode
     * @memberof UserSceneInfo
     * @static
     * @param {IUserSceneInfo} message UserSceneInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UserSceneInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.SceneId != null && Object.hasOwnProperty.call(message, "SceneId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.SceneId);
        if (message.SceneGuid != null && Object.hasOwnProperty.call(message, "SceneGuid"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.SceneGuid);
        if (message.LineId != null && Object.hasOwnProperty.call(message, "LineId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.LineId);
        return writer;
    };

    /**
     * Encodes the specified UserSceneInfo message, length delimited. Does not implicitly {@link UserSceneInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UserSceneInfo
     * @static
     * @param {IUserSceneInfo} message UserSceneInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UserSceneInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a UserSceneInfo message from the specified reader or buffer.
     * @function decode
     * @memberof UserSceneInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UserSceneInfo} UserSceneInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UserSceneInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserSceneInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.SceneId = reader.int32();
                    break;
                }
            case 2: {
                    message.SceneGuid = reader.string();
                    break;
                }
            case 3: {
                    message.LineId = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a UserSceneInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UserSceneInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UserSceneInfo} UserSceneInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UserSceneInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a UserSceneInfo message.
     * @function verify
     * @memberof UserSceneInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    UserSceneInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.SceneId != null && message.hasOwnProperty("SceneId")) {
            properties._SceneId = 1;
            if (!$util.isInteger(message.SceneId))
                return "SceneId: integer expected";
        }
        if (message.SceneGuid != null && message.hasOwnProperty("SceneGuid")) {
            properties._SceneGuid = 1;
            if (!$util.isString(message.SceneGuid))
                return "SceneGuid: string expected";
        }
        if (message.LineId != null && message.hasOwnProperty("LineId")) {
            properties._LineId = 1;
            if (!$util.isInteger(message.LineId))
                return "LineId: integer expected";
        }
        return null;
    };

    /**
     * Creates a UserSceneInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UserSceneInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UserSceneInfo} UserSceneInfo
     */
    UserSceneInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.UserSceneInfo)
            return object;
        var message = new $root.UserSceneInfo();
        if (object.SceneId != null)
            message.SceneId = object.SceneId | 0;
        if (object.SceneGuid != null)
            message.SceneGuid = String(object.SceneGuid);
        if (object.LineId != null)
            message.LineId = object.LineId | 0;
        return message;
    };

    /**
     * Creates a plain object from a UserSceneInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UserSceneInfo
     * @static
     * @param {UserSceneInfo} message UserSceneInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    UserSceneInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.SceneId != null && message.hasOwnProperty("SceneId")) {
            object.SceneId = message.SceneId;
            if (options.oneofs)
                object._SceneId = "SceneId";
        }
        if (message.SceneGuid != null && message.hasOwnProperty("SceneGuid")) {
            object.SceneGuid = message.SceneGuid;
            if (options.oneofs)
                object._SceneGuid = "SceneGuid";
        }
        if (message.LineId != null && message.hasOwnProperty("LineId")) {
            object.LineId = message.LineId;
            if (options.oneofs)
                object._LineId = "LineId";
        }
        return object;
    };

    /**
     * Converts this UserSceneInfo to JSON.
     * @function toJSON
     * @memberof UserSceneInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    UserSceneInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for UserSceneInfo
     * @function getTypeUrl
     * @memberof UserSceneInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    UserSceneInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/UserSceneInfo";
    };

    return UserSceneInfo;
})();

$root.PersonalZoneShow = (function() {

    /**
     * Properties of a PersonalZoneShow.
     * @exports IPersonalZoneShow
     * @interface IPersonalZoneShow
     * @property {Object.<string,number>|null} [Medals] PersonalZoneShow Medals
     */

    /**
     * Constructs a new PersonalZoneShow.
     * @exports PersonalZoneShow
     * @classdesc Represents a PersonalZoneShow.
     * @implements IPersonalZoneShow
     * @constructor
     * @param {IPersonalZoneShow=} [properties] Properties to set
     */
    function PersonalZoneShow(properties) {
        this.Medals = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PersonalZoneShow Medals.
     * @member {Object.<string,number>} Medals
     * @memberof PersonalZoneShow
     * @instance
     */
    PersonalZoneShow.prototype.Medals = $util.emptyObject;

    /**
     * Creates a new PersonalZoneShow instance using the specified properties.
     * @function create
     * @memberof PersonalZoneShow
     * @static
     * @param {IPersonalZoneShow=} [properties] Properties to set
     * @returns {PersonalZoneShow} PersonalZoneShow instance
     */
    PersonalZoneShow.create = function create(properties) {
        return new PersonalZoneShow(properties);
    };

    /**
     * Encodes the specified PersonalZoneShow message. Does not implicitly {@link PersonalZoneShow.verify|verify} messages.
     * @function encode
     * @memberof PersonalZoneShow
     * @static
     * @param {IPersonalZoneShow} message PersonalZoneShow message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PersonalZoneShow.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Medals != null && Object.hasOwnProperty.call(message, "Medals"))
            for (var keys = Object.keys(message.Medals), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.Medals[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PersonalZoneShow message, length delimited. Does not implicitly {@link PersonalZoneShow.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PersonalZoneShow
     * @static
     * @param {IPersonalZoneShow} message PersonalZoneShow message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PersonalZoneShow.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PersonalZoneShow message from the specified reader or buffer.
     * @function decode
     * @memberof PersonalZoneShow
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PersonalZoneShow} PersonalZoneShow
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PersonalZoneShow.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PersonalZoneShow(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (message.Medals === $util.emptyObject)
                        message.Medals = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = 0;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = reader.int32();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.Medals[key] = value;
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PersonalZoneShow message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PersonalZoneShow
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PersonalZoneShow} PersonalZoneShow
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PersonalZoneShow.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PersonalZoneShow message.
     * @function verify
     * @memberof PersonalZoneShow
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PersonalZoneShow.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.Medals != null && message.hasOwnProperty("Medals")) {
            if (!$util.isObject(message.Medals))
                return "Medals: object expected";
            var key = Object.keys(message.Medals);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "Medals: integer key{k:int32} expected";
                if (!$util.isInteger(message.Medals[key[i]]))
                    return "Medals: integer{k:int32} expected";
            }
        }
        return null;
    };

    /**
     * Creates a PersonalZoneShow message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PersonalZoneShow
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PersonalZoneShow} PersonalZoneShow
     */
    PersonalZoneShow.fromObject = function fromObject(object) {
        if (object instanceof $root.PersonalZoneShow)
            return object;
        var message = new $root.PersonalZoneShow();
        if (object.Medals) {
            if (typeof object.Medals !== "object")
                throw TypeError(".PersonalZoneShow.Medals: object expected");
            message.Medals = {};
            for (var keys = Object.keys(object.Medals), i = 0; i < keys.length; ++i)
                message.Medals[keys[i]] = object.Medals[keys[i]] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a PersonalZoneShow message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PersonalZoneShow
     * @static
     * @param {PersonalZoneShow} message PersonalZoneShow
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PersonalZoneShow.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.Medals = {};
        var keys2;
        if (message.Medals && (keys2 = Object.keys(message.Medals)).length) {
            object.Medals = {};
            for (var j = 0; j < keys2.length; ++j)
                object.Medals[keys2[j]] = message.Medals[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this PersonalZoneShow to JSON.
     * @function toJSON
     * @memberof PersonalZoneShow
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PersonalZoneShow.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PersonalZoneShow
     * @function getTypeUrl
     * @memberof PersonalZoneShow
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PersonalZoneShow.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PersonalZoneShow";
    };

    return PersonalZoneShow;
})();

$root.TeamMemberSocialData = (function() {

    /**
     * Properties of a TeamMemberSocialData.
     * @exports ITeamMemberSocialData
     * @interface ITeamMemberSocialData
     * @property {IBasicData|null} [BasicData] TeamMemberSocialData BasicData
     * @property {IAvatarInfo|null} [AvatarInfo] TeamMemberSocialData AvatarInfo
     * @property {IFaceData|null} [FaceData] TeamMemberSocialData FaceData
     * @property {IProfessionData|null} [ProfessionData] TeamMemberSocialData ProfessionData
     * @property {IEquipData|null} [EquipData] TeamMemberSocialData EquipData
     * @property {IFashionData|null} [FashionData] TeamMemberSocialData FashionData
     * @property {IUserSceneInfo|null} [UserSceneInfo] TeamMemberSocialData UserSceneInfo
     * @property {IUserAttrData|null} [UserAttrData] TeamMemberSocialData UserAttrData
     * @property {IPersonalZoneShow|null} [PersonalZone] TeamMemberSocialData PersonalZone
     */

    /**
     * Constructs a new TeamMemberSocialData.
     * @exports TeamMemberSocialData
     * @classdesc Represents a TeamMemberSocialData.
     * @implements ITeamMemberSocialData
     * @constructor
     * @param {ITeamMemberSocialData=} [properties] Properties to set
     */
    function TeamMemberSocialData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * TeamMemberSocialData BasicData.
     * @member {IBasicData|null|undefined} BasicData
     * @memberof TeamMemberSocialData
     * @instance
     */
    TeamMemberSocialData.prototype.BasicData = null;

    /**
     * TeamMemberSocialData AvatarInfo.
     * @member {IAvatarInfo|null|undefined} AvatarInfo
     * @memberof TeamMemberSocialData
     * @instance
     */
    TeamMemberSocialData.prototype.AvatarInfo = null;

    /**
     * TeamMemberSocialData FaceData.
     * @member {IFaceData|null|undefined} FaceData
     * @memberof TeamMemberSocialData
     * @instance
     */
    TeamMemberSocialData.prototype.FaceData = null;

    /**
     * TeamMemberSocialData ProfessionData.
     * @member {IProfessionData|null|undefined} ProfessionData
     * @memberof TeamMemberSocialData
     * @instance
     */
    TeamMemberSocialData.prototype.ProfessionData = null;

    /**
     * TeamMemberSocialData EquipData.
     * @member {IEquipData|null|undefined} EquipData
     * @memberof TeamMemberSocialData
     * @instance
     */
    TeamMemberSocialData.prototype.EquipData = null;

    /**
     * TeamMemberSocialData FashionData.
     * @member {IFashionData|null|undefined} FashionData
     * @memberof TeamMemberSocialData
     * @instance
     */
    TeamMemberSocialData.prototype.FashionData = null;

    /**
     * TeamMemberSocialData UserSceneInfo.
     * @member {IUserSceneInfo|null|undefined} UserSceneInfo
     * @memberof TeamMemberSocialData
     * @instance
     */
    TeamMemberSocialData.prototype.UserSceneInfo = null;

    /**
     * TeamMemberSocialData UserAttrData.
     * @member {IUserAttrData|null|undefined} UserAttrData
     * @memberof TeamMemberSocialData
     * @instance
     */
    TeamMemberSocialData.prototype.UserAttrData = null;

    /**
     * TeamMemberSocialData PersonalZone.
     * @member {IPersonalZoneShow|null|undefined} PersonalZone
     * @memberof TeamMemberSocialData
     * @instance
     */
    TeamMemberSocialData.prototype.PersonalZone = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * TeamMemberSocialData _BasicData.
     * @member {"BasicData"|undefined} _BasicData
     * @memberof TeamMemberSocialData
     * @instance
     */
    Object.defineProperty(TeamMemberSocialData.prototype, "_BasicData", {
        get: $util.oneOfGetter($oneOfFields = ["BasicData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemberSocialData _AvatarInfo.
     * @member {"AvatarInfo"|undefined} _AvatarInfo
     * @memberof TeamMemberSocialData
     * @instance
     */
    Object.defineProperty(TeamMemberSocialData.prototype, "_AvatarInfo", {
        get: $util.oneOfGetter($oneOfFields = ["AvatarInfo"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemberSocialData _FaceData.
     * @member {"FaceData"|undefined} _FaceData
     * @memberof TeamMemberSocialData
     * @instance
     */
    Object.defineProperty(TeamMemberSocialData.prototype, "_FaceData", {
        get: $util.oneOfGetter($oneOfFields = ["FaceData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemberSocialData _ProfessionData.
     * @member {"ProfessionData"|undefined} _ProfessionData
     * @memberof TeamMemberSocialData
     * @instance
     */
    Object.defineProperty(TeamMemberSocialData.prototype, "_ProfessionData", {
        get: $util.oneOfGetter($oneOfFields = ["ProfessionData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemberSocialData _EquipData.
     * @member {"EquipData"|undefined} _EquipData
     * @memberof TeamMemberSocialData
     * @instance
     */
    Object.defineProperty(TeamMemberSocialData.prototype, "_EquipData", {
        get: $util.oneOfGetter($oneOfFields = ["EquipData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemberSocialData _FashionData.
     * @member {"FashionData"|undefined} _FashionData
     * @memberof TeamMemberSocialData
     * @instance
     */
    Object.defineProperty(TeamMemberSocialData.prototype, "_FashionData", {
        get: $util.oneOfGetter($oneOfFields = ["FashionData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemberSocialData _UserSceneInfo.
     * @member {"UserSceneInfo"|undefined} _UserSceneInfo
     * @memberof TeamMemberSocialData
     * @instance
     */
    Object.defineProperty(TeamMemberSocialData.prototype, "_UserSceneInfo", {
        get: $util.oneOfGetter($oneOfFields = ["UserSceneInfo"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemberSocialData _UserAttrData.
     * @member {"UserAttrData"|undefined} _UserAttrData
     * @memberof TeamMemberSocialData
     * @instance
     */
    Object.defineProperty(TeamMemberSocialData.prototype, "_UserAttrData", {
        get: $util.oneOfGetter($oneOfFields = ["UserAttrData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemberSocialData _PersonalZone.
     * @member {"PersonalZone"|undefined} _PersonalZone
     * @memberof TeamMemberSocialData
     * @instance
     */
    Object.defineProperty(TeamMemberSocialData.prototype, "_PersonalZone", {
        get: $util.oneOfGetter($oneOfFields = ["PersonalZone"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new TeamMemberSocialData instance using the specified properties.
     * @function create
     * @memberof TeamMemberSocialData
     * @static
     * @param {ITeamMemberSocialData=} [properties] Properties to set
     * @returns {TeamMemberSocialData} TeamMemberSocialData instance
     */
    TeamMemberSocialData.create = function create(properties) {
        return new TeamMemberSocialData(properties);
    };

    /**
     * Encodes the specified TeamMemberSocialData message. Does not implicitly {@link TeamMemberSocialData.verify|verify} messages.
     * @function encode
     * @memberof TeamMemberSocialData
     * @static
     * @param {ITeamMemberSocialData} message TeamMemberSocialData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TeamMemberSocialData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.BasicData != null && Object.hasOwnProperty.call(message, "BasicData"))
            $root.BasicData.encode(message.BasicData, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.AvatarInfo != null && Object.hasOwnProperty.call(message, "AvatarInfo"))
            $root.AvatarInfo.encode(message.AvatarInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.FaceData != null && Object.hasOwnProperty.call(message, "FaceData"))
            $root.FaceData.encode(message.FaceData, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.ProfessionData != null && Object.hasOwnProperty.call(message, "ProfessionData"))
            $root.ProfessionData.encode(message.ProfessionData, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.EquipData != null && Object.hasOwnProperty.call(message, "EquipData"))
            $root.EquipData.encode(message.EquipData, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.FashionData != null && Object.hasOwnProperty.call(message, "FashionData"))
            $root.FashionData.encode(message.FashionData, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.UserSceneInfo != null && Object.hasOwnProperty.call(message, "UserSceneInfo"))
            $root.UserSceneInfo.encode(message.UserSceneInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.UserAttrData != null && Object.hasOwnProperty.call(message, "UserAttrData"))
            $root.UserAttrData.encode(message.UserAttrData, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.PersonalZone != null && Object.hasOwnProperty.call(message, "PersonalZone"))
            $root.PersonalZoneShow.encode(message.PersonalZone, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified TeamMemberSocialData message, length delimited. Does not implicitly {@link TeamMemberSocialData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TeamMemberSocialData
     * @static
     * @param {ITeamMemberSocialData} message TeamMemberSocialData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TeamMemberSocialData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a TeamMemberSocialData message from the specified reader or buffer.
     * @function decode
     * @memberof TeamMemberSocialData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TeamMemberSocialData} TeamMemberSocialData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TeamMemberSocialData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TeamMemberSocialData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.BasicData = $root.BasicData.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.AvatarInfo = $root.AvatarInfo.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.FaceData = $root.FaceData.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.ProfessionData = $root.ProfessionData.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.EquipData = $root.EquipData.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.FashionData = $root.FashionData.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.UserSceneInfo = $root.UserSceneInfo.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.UserAttrData = $root.UserAttrData.decode(reader, reader.uint32());
                    break;
                }
            case 9: {
                    message.PersonalZone = $root.PersonalZoneShow.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a TeamMemberSocialData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TeamMemberSocialData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TeamMemberSocialData} TeamMemberSocialData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TeamMemberSocialData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a TeamMemberSocialData message.
     * @function verify
     * @memberof TeamMemberSocialData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    TeamMemberSocialData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.BasicData != null && message.hasOwnProperty("BasicData")) {
            properties._BasicData = 1;
            {
                var error = $root.BasicData.verify(message.BasicData);
                if (error)
                    return "BasicData." + error;
            }
        }
        if (message.AvatarInfo != null && message.hasOwnProperty("AvatarInfo")) {
            properties._AvatarInfo = 1;
            {
                var error = $root.AvatarInfo.verify(message.AvatarInfo);
                if (error)
                    return "AvatarInfo." + error;
            }
        }
        if (message.FaceData != null && message.hasOwnProperty("FaceData")) {
            properties._FaceData = 1;
            {
                var error = $root.FaceData.verify(message.FaceData);
                if (error)
                    return "FaceData." + error;
            }
        }
        if (message.ProfessionData != null && message.hasOwnProperty("ProfessionData")) {
            properties._ProfessionData = 1;
            {
                var error = $root.ProfessionData.verify(message.ProfessionData);
                if (error)
                    return "ProfessionData." + error;
            }
        }
        if (message.EquipData != null && message.hasOwnProperty("EquipData")) {
            properties._EquipData = 1;
            {
                var error = $root.EquipData.verify(message.EquipData);
                if (error)
                    return "EquipData." + error;
            }
        }
        if (message.FashionData != null && message.hasOwnProperty("FashionData")) {
            properties._FashionData = 1;
            {
                var error = $root.FashionData.verify(message.FashionData);
                if (error)
                    return "FashionData." + error;
            }
        }
        if (message.UserSceneInfo != null && message.hasOwnProperty("UserSceneInfo")) {
            properties._UserSceneInfo = 1;
            {
                var error = $root.UserSceneInfo.verify(message.UserSceneInfo);
                if (error)
                    return "UserSceneInfo." + error;
            }
        }
        if (message.UserAttrData != null && message.hasOwnProperty("UserAttrData")) {
            properties._UserAttrData = 1;
            {
                var error = $root.UserAttrData.verify(message.UserAttrData);
                if (error)
                    return "UserAttrData." + error;
            }
        }
        if (message.PersonalZone != null && message.hasOwnProperty("PersonalZone")) {
            properties._PersonalZone = 1;
            {
                var error = $root.PersonalZoneShow.verify(message.PersonalZone);
                if (error)
                    return "PersonalZone." + error;
            }
        }
        return null;
    };

    /**
     * Creates a TeamMemberSocialData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TeamMemberSocialData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TeamMemberSocialData} TeamMemberSocialData
     */
    TeamMemberSocialData.fromObject = function fromObject(object) {
        if (object instanceof $root.TeamMemberSocialData)
            return object;
        var message = new $root.TeamMemberSocialData();
        if (object.BasicData != null) {
            if (typeof object.BasicData !== "object")
                throw TypeError(".TeamMemberSocialData.BasicData: object expected");
            message.BasicData = $root.BasicData.fromObject(object.BasicData);
        }
        if (object.AvatarInfo != null) {
            if (typeof object.AvatarInfo !== "object")
                throw TypeError(".TeamMemberSocialData.AvatarInfo: object expected");
            message.AvatarInfo = $root.AvatarInfo.fromObject(object.AvatarInfo);
        }
        if (object.FaceData != null) {
            if (typeof object.FaceData !== "object")
                throw TypeError(".TeamMemberSocialData.FaceData: object expected");
            message.FaceData = $root.FaceData.fromObject(object.FaceData);
        }
        if (object.ProfessionData != null) {
            if (typeof object.ProfessionData !== "object")
                throw TypeError(".TeamMemberSocialData.ProfessionData: object expected");
            message.ProfessionData = $root.ProfessionData.fromObject(object.ProfessionData);
        }
        if (object.EquipData != null) {
            if (typeof object.EquipData !== "object")
                throw TypeError(".TeamMemberSocialData.EquipData: object expected");
            message.EquipData = $root.EquipData.fromObject(object.EquipData);
        }
        if (object.FashionData != null) {
            if (typeof object.FashionData !== "object")
                throw TypeError(".TeamMemberSocialData.FashionData: object expected");
            message.FashionData = $root.FashionData.fromObject(object.FashionData);
        }
        if (object.UserSceneInfo != null) {
            if (typeof object.UserSceneInfo !== "object")
                throw TypeError(".TeamMemberSocialData.UserSceneInfo: object expected");
            message.UserSceneInfo = $root.UserSceneInfo.fromObject(object.UserSceneInfo);
        }
        if (object.UserAttrData != null) {
            if (typeof object.UserAttrData !== "object")
                throw TypeError(".TeamMemberSocialData.UserAttrData: object expected");
            message.UserAttrData = $root.UserAttrData.fromObject(object.UserAttrData);
        }
        if (object.PersonalZone != null) {
            if (typeof object.PersonalZone !== "object")
                throw TypeError(".TeamMemberSocialData.PersonalZone: object expected");
            message.PersonalZone = $root.PersonalZoneShow.fromObject(object.PersonalZone);
        }
        return message;
    };

    /**
     * Creates a plain object from a TeamMemberSocialData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TeamMemberSocialData
     * @static
     * @param {TeamMemberSocialData} message TeamMemberSocialData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    TeamMemberSocialData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.BasicData != null && message.hasOwnProperty("BasicData")) {
            object.BasicData = $root.BasicData.toObject(message.BasicData, options);
            if (options.oneofs)
                object._BasicData = "BasicData";
        }
        if (message.AvatarInfo != null && message.hasOwnProperty("AvatarInfo")) {
            object.AvatarInfo = $root.AvatarInfo.toObject(message.AvatarInfo, options);
            if (options.oneofs)
                object._AvatarInfo = "AvatarInfo";
        }
        if (message.FaceData != null && message.hasOwnProperty("FaceData")) {
            object.FaceData = $root.FaceData.toObject(message.FaceData, options);
            if (options.oneofs)
                object._FaceData = "FaceData";
        }
        if (message.ProfessionData != null && message.hasOwnProperty("ProfessionData")) {
            object.ProfessionData = $root.ProfessionData.toObject(message.ProfessionData, options);
            if (options.oneofs)
                object._ProfessionData = "ProfessionData";
        }
        if (message.EquipData != null && message.hasOwnProperty("EquipData")) {
            object.EquipData = $root.EquipData.toObject(message.EquipData, options);
            if (options.oneofs)
                object._EquipData = "EquipData";
        }
        if (message.FashionData != null && message.hasOwnProperty("FashionData")) {
            object.FashionData = $root.FashionData.toObject(message.FashionData, options);
            if (options.oneofs)
                object._FashionData = "FashionData";
        }
        if (message.UserSceneInfo != null && message.hasOwnProperty("UserSceneInfo")) {
            object.UserSceneInfo = $root.UserSceneInfo.toObject(message.UserSceneInfo, options);
            if (options.oneofs)
                object._UserSceneInfo = "UserSceneInfo";
        }
        if (message.UserAttrData != null && message.hasOwnProperty("UserAttrData")) {
            object.UserAttrData = $root.UserAttrData.toObject(message.UserAttrData, options);
            if (options.oneofs)
                object._UserAttrData = "UserAttrData";
        }
        if (message.PersonalZone != null && message.hasOwnProperty("PersonalZone")) {
            object.PersonalZone = $root.PersonalZoneShow.toObject(message.PersonalZone, options);
            if (options.oneofs)
                object._PersonalZone = "PersonalZone";
        }
        return object;
    };

    /**
     * Converts this TeamMemberSocialData to JSON.
     * @function toJSON
     * @memberof TeamMemberSocialData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    TeamMemberSocialData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for TeamMemberSocialData
     * @function getTypeUrl
     * @memberof TeamMemberSocialData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    TeamMemberSocialData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/TeamMemberSocialData";
    };

    return TeamMemberSocialData;
})();

$root.TeamMemData = (function() {

    /**
     * Properties of a TeamMemData.
     * @exports ITeamMemData
     * @interface ITeamMemData
     * @property {number|Long|null} [CharId] TeamMemData CharId
     * @property {number|null} [EnterTime] TeamMemData EnterTime
     * @property {number|null} [CallStatus] TeamMemData CallStatus
     * @property {number|null} [TalentId] TeamMemData TalentId
     * @property {number|null} [OnlineStatus] TeamMemData OnlineStatus
     * @property {number|null} [SceneId] TeamMemData SceneId
     * @property {boolean|null} [VoiceIsOpen] TeamMemData VoiceIsOpen
     * @property {number|null} [GroupId] TeamMemData GroupId
     * @property {ITeamMemberSocialData|null} [SocialData] TeamMemData SocialData
     */

    /**
     * Constructs a new TeamMemData.
     * @exports TeamMemData
     * @classdesc Represents a TeamMemData.
     * @implements ITeamMemData
     * @constructor
     * @param {ITeamMemData=} [properties] Properties to set
     */
    function TeamMemData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * TeamMemData CharId.
     * @member {number|Long|null|undefined} CharId
     * @memberof TeamMemData
     * @instance
     */
    TeamMemData.prototype.CharId = null;

    /**
     * TeamMemData EnterTime.
     * @member {number|null|undefined} EnterTime
     * @memberof TeamMemData
     * @instance
     */
    TeamMemData.prototype.EnterTime = null;

    /**
     * TeamMemData CallStatus.
     * @member {number|null|undefined} CallStatus
     * @memberof TeamMemData
     * @instance
     */
    TeamMemData.prototype.CallStatus = null;

    /**
     * TeamMemData TalentId.
     * @member {number|null|undefined} TalentId
     * @memberof TeamMemData
     * @instance
     */
    TeamMemData.prototype.TalentId = null;

    /**
     * TeamMemData OnlineStatus.
     * @member {number|null|undefined} OnlineStatus
     * @memberof TeamMemData
     * @instance
     */
    TeamMemData.prototype.OnlineStatus = null;

    /**
     * TeamMemData SceneId.
     * @member {number|null|undefined} SceneId
     * @memberof TeamMemData
     * @instance
     */
    TeamMemData.prototype.SceneId = null;

    /**
     * TeamMemData VoiceIsOpen.
     * @member {boolean|null|undefined} VoiceIsOpen
     * @memberof TeamMemData
     * @instance
     */
    TeamMemData.prototype.VoiceIsOpen = null;

    /**
     * TeamMemData GroupId.
     * @member {number|null|undefined} GroupId
     * @memberof TeamMemData
     * @instance
     */
    TeamMemData.prototype.GroupId = null;

    /**
     * TeamMemData SocialData.
     * @member {ITeamMemberSocialData|null|undefined} SocialData
     * @memberof TeamMemData
     * @instance
     */
    TeamMemData.prototype.SocialData = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * TeamMemData _CharId.
     * @member {"CharId"|undefined} _CharId
     * @memberof TeamMemData
     * @instance
     */
    Object.defineProperty(TeamMemData.prototype, "_CharId", {
        get: $util.oneOfGetter($oneOfFields = ["CharId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemData _EnterTime.
     * @member {"EnterTime"|undefined} _EnterTime
     * @memberof TeamMemData
     * @instance
     */
    Object.defineProperty(TeamMemData.prototype, "_EnterTime", {
        get: $util.oneOfGetter($oneOfFields = ["EnterTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemData _CallStatus.
     * @member {"CallStatus"|undefined} _CallStatus
     * @memberof TeamMemData
     * @instance
     */
    Object.defineProperty(TeamMemData.prototype, "_CallStatus", {
        get: $util.oneOfGetter($oneOfFields = ["CallStatus"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemData _TalentId.
     * @member {"TalentId"|undefined} _TalentId
     * @memberof TeamMemData
     * @instance
     */
    Object.defineProperty(TeamMemData.prototype, "_TalentId", {
        get: $util.oneOfGetter($oneOfFields = ["TalentId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemData _OnlineStatus.
     * @member {"OnlineStatus"|undefined} _OnlineStatus
     * @memberof TeamMemData
     * @instance
     */
    Object.defineProperty(TeamMemData.prototype, "_OnlineStatus", {
        get: $util.oneOfGetter($oneOfFields = ["OnlineStatus"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemData _SceneId.
     * @member {"SceneId"|undefined} _SceneId
     * @memberof TeamMemData
     * @instance
     */
    Object.defineProperty(TeamMemData.prototype, "_SceneId", {
        get: $util.oneOfGetter($oneOfFields = ["SceneId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemData _VoiceIsOpen.
     * @member {"VoiceIsOpen"|undefined} _VoiceIsOpen
     * @memberof TeamMemData
     * @instance
     */
    Object.defineProperty(TeamMemData.prototype, "_VoiceIsOpen", {
        get: $util.oneOfGetter($oneOfFields = ["VoiceIsOpen"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemData _GroupId.
     * @member {"GroupId"|undefined} _GroupId
     * @memberof TeamMemData
     * @instance
     */
    Object.defineProperty(TeamMemData.prototype, "_GroupId", {
        get: $util.oneOfGetter($oneOfFields = ["GroupId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TeamMemData _SocialData.
     * @member {"SocialData"|undefined} _SocialData
     * @memberof TeamMemData
     * @instance
     */
    Object.defineProperty(TeamMemData.prototype, "_SocialData", {
        get: $util.oneOfGetter($oneOfFields = ["SocialData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new TeamMemData instance using the specified properties.
     * @function create
     * @memberof TeamMemData
     * @static
     * @param {ITeamMemData=} [properties] Properties to set
     * @returns {TeamMemData} TeamMemData instance
     */
    TeamMemData.create = function create(properties) {
        return new TeamMemData(properties);
    };

    /**
     * Encodes the specified TeamMemData message. Does not implicitly {@link TeamMemData.verify|verify} messages.
     * @function encode
     * @memberof TeamMemData
     * @static
     * @param {ITeamMemData} message TeamMemData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TeamMemData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.CharId != null && Object.hasOwnProperty.call(message, "CharId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.CharId);
        if (message.EnterTime != null && Object.hasOwnProperty.call(message, "EnterTime"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.EnterTime);
        if (message.CallStatus != null && Object.hasOwnProperty.call(message, "CallStatus"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.CallStatus);
        if (message.TalentId != null && Object.hasOwnProperty.call(message, "TalentId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.TalentId);
        if (message.OnlineStatus != null && Object.hasOwnProperty.call(message, "OnlineStatus"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.OnlineStatus);
        if (message.SceneId != null && Object.hasOwnProperty.call(message, "SceneId"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.SceneId);
        if (message.VoiceIsOpen != null && Object.hasOwnProperty.call(message, "VoiceIsOpen"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.VoiceIsOpen);
        if (message.GroupId != null && Object.hasOwnProperty.call(message, "GroupId"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.GroupId);
        if (message.SocialData != null && Object.hasOwnProperty.call(message, "SocialData"))
            $root.TeamMemberSocialData.encode(message.SocialData, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified TeamMemData message, length delimited. Does not implicitly {@link TeamMemData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TeamMemData
     * @static
     * @param {ITeamMemData} message TeamMemData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TeamMemData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a TeamMemData message from the specified reader or buffer.
     * @function decode
     * @memberof TeamMemData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TeamMemData} TeamMemData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TeamMemData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TeamMemData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.CharId = reader.int64();
                    break;
                }
            case 2: {
                    message.EnterTime = reader.uint32();
                    break;
                }
            case 3: {
                    message.CallStatus = reader.int32();
                    break;
                }
            case 4: {
                    message.TalentId = reader.int32();
                    break;
                }
            case 5: {
                    message.OnlineStatus = reader.int32();
                    break;
                }
            case 6: {
                    message.SceneId = reader.int32();
                    break;
                }
            case 7: {
                    message.VoiceIsOpen = reader.bool();
                    break;
                }
            case 8: {
                    message.GroupId = reader.int32();
                    break;
                }
            case 9: {
                    message.SocialData = $root.TeamMemberSocialData.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a TeamMemData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TeamMemData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TeamMemData} TeamMemData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TeamMemData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a TeamMemData message.
     * @function verify
     * @memberof TeamMemData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    TeamMemData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.CharId != null && message.hasOwnProperty("CharId")) {
            properties._CharId = 1;
            if (!$util.isInteger(message.CharId) && !(message.CharId && $util.isInteger(message.CharId.low) && $util.isInteger(message.CharId.high)))
                return "CharId: integer|Long expected";
        }
        if (message.EnterTime != null && message.hasOwnProperty("EnterTime")) {
            properties._EnterTime = 1;
            if (!$util.isInteger(message.EnterTime))
                return "EnterTime: integer expected";
        }
        if (message.CallStatus != null && message.hasOwnProperty("CallStatus")) {
            properties._CallStatus = 1;
            if (!$util.isInteger(message.CallStatus))
                return "CallStatus: integer expected";
        }
        if (message.TalentId != null && message.hasOwnProperty("TalentId")) {
            properties._TalentId = 1;
            if (!$util.isInteger(message.TalentId))
                return "TalentId: integer expected";
        }
        if (message.OnlineStatus != null && message.hasOwnProperty("OnlineStatus")) {
            properties._OnlineStatus = 1;
            if (!$util.isInteger(message.OnlineStatus))
                return "OnlineStatus: integer expected";
        }
        if (message.SceneId != null && message.hasOwnProperty("SceneId")) {
            properties._SceneId = 1;
            if (!$util.isInteger(message.SceneId))
                return "SceneId: integer expected";
        }
        if (message.VoiceIsOpen != null && message.hasOwnProperty("VoiceIsOpen")) {
            properties._VoiceIsOpen = 1;
            if (typeof message.VoiceIsOpen !== "boolean")
                return "VoiceIsOpen: boolean expected";
        }
        if (message.GroupId != null && message.hasOwnProperty("GroupId")) {
            properties._GroupId = 1;
            if (!$util.isInteger(message.GroupId))
                return "GroupId: integer expected";
        }
        if (message.SocialData != null && message.hasOwnProperty("SocialData")) {
            properties._SocialData = 1;
            {
                var error = $root.TeamMemberSocialData.verify(message.SocialData);
                if (error)
                    return "SocialData." + error;
            }
        }
        return null;
    };

    /**
     * Creates a TeamMemData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TeamMemData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TeamMemData} TeamMemData
     */
    TeamMemData.fromObject = function fromObject(object) {
        if (object instanceof $root.TeamMemData)
            return object;
        var message = new $root.TeamMemData();
        if (object.CharId != null)
            if ($util.Long)
                (message.CharId = $util.Long.fromValue(object.CharId)).unsigned = false;
            else if (typeof object.CharId === "string")
                message.CharId = parseInt(object.CharId, 10);
            else if (typeof object.CharId === "number")
                message.CharId = object.CharId;
            else if (typeof object.CharId === "object")
                message.CharId = new $util.LongBits(object.CharId.low >>> 0, object.CharId.high >>> 0).toNumber();
        if (object.EnterTime != null)
            message.EnterTime = object.EnterTime >>> 0;
        if (object.CallStatus != null)
            message.CallStatus = object.CallStatus | 0;
        if (object.TalentId != null)
            message.TalentId = object.TalentId | 0;
        if (object.OnlineStatus != null)
            message.OnlineStatus = object.OnlineStatus | 0;
        if (object.SceneId != null)
            message.SceneId = object.SceneId | 0;
        if (object.VoiceIsOpen != null)
            message.VoiceIsOpen = Boolean(object.VoiceIsOpen);
        if (object.GroupId != null)
            message.GroupId = object.GroupId | 0;
        if (object.SocialData != null) {
            if (typeof object.SocialData !== "object")
                throw TypeError(".TeamMemData.SocialData: object expected");
            message.SocialData = $root.TeamMemberSocialData.fromObject(object.SocialData);
        }
        return message;
    };

    /**
     * Creates a plain object from a TeamMemData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TeamMemData
     * @static
     * @param {TeamMemData} message TeamMemData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    TeamMemData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.CharId != null && message.hasOwnProperty("CharId")) {
            if (typeof message.CharId === "number")
                object.CharId = options.longs === String ? String(message.CharId) : message.CharId;
            else
                object.CharId = options.longs === String ? $util.Long.prototype.toString.call(message.CharId) : options.longs === Number ? new $util.LongBits(message.CharId.low >>> 0, message.CharId.high >>> 0).toNumber() : message.CharId;
            if (options.oneofs)
                object._CharId = "CharId";
        }
        if (message.EnterTime != null && message.hasOwnProperty("EnterTime")) {
            object.EnterTime = message.EnterTime;
            if (options.oneofs)
                object._EnterTime = "EnterTime";
        }
        if (message.CallStatus != null && message.hasOwnProperty("CallStatus")) {
            object.CallStatus = message.CallStatus;
            if (options.oneofs)
                object._CallStatus = "CallStatus";
        }
        if (message.TalentId != null && message.hasOwnProperty("TalentId")) {
            object.TalentId = message.TalentId;
            if (options.oneofs)
                object._TalentId = "TalentId";
        }
        if (message.OnlineStatus != null && message.hasOwnProperty("OnlineStatus")) {
            object.OnlineStatus = message.OnlineStatus;
            if (options.oneofs)
                object._OnlineStatus = "OnlineStatus";
        }
        if (message.SceneId != null && message.hasOwnProperty("SceneId")) {
            object.SceneId = message.SceneId;
            if (options.oneofs)
                object._SceneId = "SceneId";
        }
        if (message.VoiceIsOpen != null && message.hasOwnProperty("VoiceIsOpen")) {
            object.VoiceIsOpen = message.VoiceIsOpen;
            if (options.oneofs)
                object._VoiceIsOpen = "VoiceIsOpen";
        }
        if (message.GroupId != null && message.hasOwnProperty("GroupId")) {
            object.GroupId = message.GroupId;
            if (options.oneofs)
                object._GroupId = "GroupId";
        }
        if (message.SocialData != null && message.hasOwnProperty("SocialData")) {
            object.SocialData = $root.TeamMemberSocialData.toObject(message.SocialData, options);
            if (options.oneofs)
                object._SocialData = "SocialData";
        }
        return object;
    };

    /**
     * Converts this TeamMemData to JSON.
     * @function toJSON
     * @memberof TeamMemData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    TeamMemData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for TeamMemData
     * @function getTypeUrl
     * @memberof TeamMemData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    TeamMemData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/TeamMemData";
    };

    return TeamMemData;
})();

$root.CharTeam = (function() {

    /**
     * Properties of a CharTeam.
     * @exports ICharTeam
     * @interface ICharTeam
     * @property {number|Long|null} [TeamId] CharTeam TeamId
     * @property {number|Long|null} [LeaderId] CharTeam LeaderId
     * @property {number|null} [TeamTargetId] CharTeam TeamTargetId
     * @property {number|null} [TeamNum] CharTeam TeamNum
     * @property {Array.<number|Long>|null} [CharIds] CharTeam CharIds
     * @property {boolean|null} [IsMatching] CharTeam IsMatching
     * @property {number|null} [CharTeamVersion] CharTeam CharTeamVersion
     * @property {Object.<string,ITeamMemData>|null} [TeamMemberData] CharTeam TeamMemberData
     */

    /**
     * Constructs a new CharTeam.
     * @exports CharTeam
     * @classdesc Represents a CharTeam.
     * @implements ICharTeam
     * @constructor
     * @param {ICharTeam=} [properties] Properties to set
     */
    function CharTeam(properties) {
        this.CharIds = [];
        this.TeamMemberData = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CharTeam TeamId.
     * @member {number|Long|null|undefined} TeamId
     * @memberof CharTeam
     * @instance
     */
    CharTeam.prototype.TeamId = null;

    /**
     * CharTeam LeaderId.
     * @member {number|Long|null|undefined} LeaderId
     * @memberof CharTeam
     * @instance
     */
    CharTeam.prototype.LeaderId = null;

    /**
     * CharTeam TeamTargetId.
     * @member {number|null|undefined} TeamTargetId
     * @memberof CharTeam
     * @instance
     */
    CharTeam.prototype.TeamTargetId = null;

    /**
     * CharTeam TeamNum.
     * @member {number|null|undefined} TeamNum
     * @memberof CharTeam
     * @instance
     */
    CharTeam.prototype.TeamNum = null;

    /**
     * CharTeam CharIds.
     * @member {Array.<number|Long>} CharIds
     * @memberof CharTeam
     * @instance
     */
    CharTeam.prototype.CharIds = $util.emptyArray;

    /**
     * CharTeam IsMatching.
     * @member {boolean|null|undefined} IsMatching
     * @memberof CharTeam
     * @instance
     */
    CharTeam.prototype.IsMatching = null;

    /**
     * CharTeam CharTeamVersion.
     * @member {number|null|undefined} CharTeamVersion
     * @memberof CharTeam
     * @instance
     */
    CharTeam.prototype.CharTeamVersion = null;

    /**
     * CharTeam TeamMemberData.
     * @member {Object.<string,ITeamMemData>} TeamMemberData
     * @memberof CharTeam
     * @instance
     */
    CharTeam.prototype.TeamMemberData = $util.emptyObject;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * CharTeam _TeamId.
     * @member {"TeamId"|undefined} _TeamId
     * @memberof CharTeam
     * @instance
     */
    Object.defineProperty(CharTeam.prototype, "_TeamId", {
        get: $util.oneOfGetter($oneOfFields = ["TeamId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * CharTeam _LeaderId.
     * @member {"LeaderId"|undefined} _LeaderId
     * @memberof CharTeam
     * @instance
     */
    Object.defineProperty(CharTeam.prototype, "_LeaderId", {
        get: $util.oneOfGetter($oneOfFields = ["LeaderId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * CharTeam _TeamTargetId.
     * @member {"TeamTargetId"|undefined} _TeamTargetId
     * @memberof CharTeam
     * @instance
     */
    Object.defineProperty(CharTeam.prototype, "_TeamTargetId", {
        get: $util.oneOfGetter($oneOfFields = ["TeamTargetId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * CharTeam _TeamNum.
     * @member {"TeamNum"|undefined} _TeamNum
     * @memberof CharTeam
     * @instance
     */
    Object.defineProperty(CharTeam.prototype, "_TeamNum", {
        get: $util.oneOfGetter($oneOfFields = ["TeamNum"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * CharTeam _IsMatching.
     * @member {"IsMatching"|undefined} _IsMatching
     * @memberof CharTeam
     * @instance
     */
    Object.defineProperty(CharTeam.prototype, "_IsMatching", {
        get: $util.oneOfGetter($oneOfFields = ["IsMatching"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * CharTeam _CharTeamVersion.
     * @member {"CharTeamVersion"|undefined} _CharTeamVersion
     * @memberof CharTeam
     * @instance
     */
    Object.defineProperty(CharTeam.prototype, "_CharTeamVersion", {
        get: $util.oneOfGetter($oneOfFields = ["CharTeamVersion"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new CharTeam instance using the specified properties.
     * @function create
     * @memberof CharTeam
     * @static
     * @param {ICharTeam=} [properties] Properties to set
     * @returns {CharTeam} CharTeam instance
     */
    CharTeam.create = function create(properties) {
        return new CharTeam(properties);
    };

    /**
     * Encodes the specified CharTeam message. Does not implicitly {@link CharTeam.verify|verify} messages.
     * @function encode
     * @memberof CharTeam
     * @static
     * @param {ICharTeam} message CharTeam message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CharTeam.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.TeamId != null && Object.hasOwnProperty.call(message, "TeamId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.TeamId);
        if (message.LeaderId != null && Object.hasOwnProperty.call(message, "LeaderId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.LeaderId);
        if (message.TeamTargetId != null && Object.hasOwnProperty.call(message, "TeamTargetId"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.TeamTargetId);
        if (message.TeamNum != null && Object.hasOwnProperty.call(message, "TeamNum"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.TeamNum);
        if (message.CharIds != null && message.CharIds.length) {
            writer.uint32(/* id 5, wireType 2 =*/42).fork();
            for (var i = 0; i < message.CharIds.length; ++i)
                writer.int64(message.CharIds[i]);
            writer.ldelim();
        }
        if (message.IsMatching != null && Object.hasOwnProperty.call(message, "IsMatching"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.IsMatching);
        if (message.CharTeamVersion != null && Object.hasOwnProperty.call(message, "CharTeamVersion"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.CharTeamVersion);
        if (message.TeamMemberData != null && Object.hasOwnProperty.call(message, "TeamMemberData"))
            for (var keys = Object.keys(message.TeamMemberData), i = 0; i < keys.length; ++i) {
                writer.uint32(/* id 8, wireType 2 =*/66).fork().uint32(/* id 1, wireType 0 =*/8).int64(keys[i]);
                $root.TeamMemData.encode(message.TeamMemberData[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
            }
        return writer;
    };

    /**
     * Encodes the specified CharTeam message, length delimited. Does not implicitly {@link CharTeam.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CharTeam
     * @static
     * @param {ICharTeam} message CharTeam message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CharTeam.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CharTeam message from the specified reader or buffer.
     * @function decode
     * @memberof CharTeam
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CharTeam} CharTeam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CharTeam.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CharTeam(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.TeamId = reader.int64();
                    break;
                }
            case 2: {
                    message.LeaderId = reader.int64();
                    break;
                }
            case 3: {
                    message.TeamTargetId = reader.uint32();
                    break;
                }
            case 4: {
                    message.TeamNum = reader.uint32();
                    break;
                }
            case 5: {
                    if (!(message.CharIds && message.CharIds.length))
                        message.CharIds = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.CharIds.push(reader.int64());
                    } else
                        message.CharIds.push(reader.int64());
                    break;
                }
            case 6: {
                    message.IsMatching = reader.bool();
                    break;
                }
            case 7: {
                    message.CharTeamVersion = reader.int32();
                    break;
                }
            case 8: {
                    if (message.TeamMemberData === $util.emptyObject)
                        message.TeamMemberData = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = null;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int64();
                            break;
                        case 2:
                            value = $root.TeamMemData.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.TeamMemberData[typeof key === "object" ? $util.longToHash(key) : key] = value;
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CharTeam message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CharTeam
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CharTeam} CharTeam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CharTeam.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CharTeam message.
     * @function verify
     * @memberof CharTeam
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CharTeam.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.TeamId != null && message.hasOwnProperty("TeamId")) {
            properties._TeamId = 1;
            if (!$util.isInteger(message.TeamId) && !(message.TeamId && $util.isInteger(message.TeamId.low) && $util.isInteger(message.TeamId.high)))
                return "TeamId: integer|Long expected";
        }
        if (message.LeaderId != null && message.hasOwnProperty("LeaderId")) {
            properties._LeaderId = 1;
            if (!$util.isInteger(message.LeaderId) && !(message.LeaderId && $util.isInteger(message.LeaderId.low) && $util.isInteger(message.LeaderId.high)))
                return "LeaderId: integer|Long expected";
        }
        if (message.TeamTargetId != null && message.hasOwnProperty("TeamTargetId")) {
            properties._TeamTargetId = 1;
            if (!$util.isInteger(message.TeamTargetId))
                return "TeamTargetId: integer expected";
        }
        if (message.TeamNum != null && message.hasOwnProperty("TeamNum")) {
            properties._TeamNum = 1;
            if (!$util.isInteger(message.TeamNum))
                return "TeamNum: integer expected";
        }
        if (message.CharIds != null && message.hasOwnProperty("CharIds")) {
            if (!Array.isArray(message.CharIds))
                return "CharIds: array expected";
            for (var i = 0; i < message.CharIds.length; ++i)
                if (!$util.isInteger(message.CharIds[i]) && !(message.CharIds[i] && $util.isInteger(message.CharIds[i].low) && $util.isInteger(message.CharIds[i].high)))
                    return "CharIds: integer|Long[] expected";
        }
        if (message.IsMatching != null && message.hasOwnProperty("IsMatching")) {
            properties._IsMatching = 1;
            if (typeof message.IsMatching !== "boolean")
                return "IsMatching: boolean expected";
        }
        if (message.CharTeamVersion != null && message.hasOwnProperty("CharTeamVersion")) {
            properties._CharTeamVersion = 1;
            if (!$util.isInteger(message.CharTeamVersion))
                return "CharTeamVersion: integer expected";
        }
        if (message.TeamMemberData != null && message.hasOwnProperty("TeamMemberData")) {
            if (!$util.isObject(message.TeamMemberData))
                return "TeamMemberData: object expected";
            var key = Object.keys(message.TeamMemberData);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key64Re.test(key[i]))
                    return "TeamMemberData: integer|Long key{k:int64} expected";
                {
                    var error = $root.TeamMemData.verify(message.TeamMemberData[key[i]]);
                    if (error)
                        return "TeamMemberData." + error;
                }
            }
        }
        return null;
    };

    /**
     * Creates a CharTeam message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CharTeam
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CharTeam} CharTeam
     */
    CharTeam.fromObject = function fromObject(object) {
        if (object instanceof $root.CharTeam)
            return object;
        var message = new $root.CharTeam();
        if (object.TeamId != null)
            if ($util.Long)
                (message.TeamId = $util.Long.fromValue(object.TeamId)).unsigned = false;
            else if (typeof object.TeamId === "string")
                message.TeamId = parseInt(object.TeamId, 10);
            else if (typeof object.TeamId === "number")
                message.TeamId = object.TeamId;
            else if (typeof object.TeamId === "object")
                message.TeamId = new $util.LongBits(object.TeamId.low >>> 0, object.TeamId.high >>> 0).toNumber();
        if (object.LeaderId != null)
            if ($util.Long)
                (message.LeaderId = $util.Long.fromValue(object.LeaderId)).unsigned = false;
            else if (typeof object.LeaderId === "string")
                message.LeaderId = parseInt(object.LeaderId, 10);
            else if (typeof object.LeaderId === "number")
                message.LeaderId = object.LeaderId;
            else if (typeof object.LeaderId === "object")
                message.LeaderId = new $util.LongBits(object.LeaderId.low >>> 0, object.LeaderId.high >>> 0).toNumber();
        if (object.TeamTargetId != null)
            message.TeamTargetId = object.TeamTargetId >>> 0;
        if (object.TeamNum != null)
            message.TeamNum = object.TeamNum >>> 0;
        if (object.CharIds) {
            if (!Array.isArray(object.CharIds))
                throw TypeError(".CharTeam.CharIds: array expected");
            message.CharIds = [];
            for (var i = 0; i < object.CharIds.length; ++i)
                if ($util.Long)
                    (message.CharIds[i] = $util.Long.fromValue(object.CharIds[i])).unsigned = false;
                else if (typeof object.CharIds[i] === "string")
                    message.CharIds[i] = parseInt(object.CharIds[i], 10);
                else if (typeof object.CharIds[i] === "number")
                    message.CharIds[i] = object.CharIds[i];
                else if (typeof object.CharIds[i] === "object")
                    message.CharIds[i] = new $util.LongBits(object.CharIds[i].low >>> 0, object.CharIds[i].high >>> 0).toNumber();
        }
        if (object.IsMatching != null)
            message.IsMatching = Boolean(object.IsMatching);
        if (object.CharTeamVersion != null)
            message.CharTeamVersion = object.CharTeamVersion | 0;
        if (object.TeamMemberData) {
            if (typeof object.TeamMemberData !== "object")
                throw TypeError(".CharTeam.TeamMemberData: object expected");
            message.TeamMemberData = {};
            for (var keys = Object.keys(object.TeamMemberData), i = 0; i < keys.length; ++i) {
                if (typeof object.TeamMemberData[keys[i]] !== "object")
                    throw TypeError(".CharTeam.TeamMemberData: object expected");
                message.TeamMemberData[keys[i]] = $root.TeamMemData.fromObject(object.TeamMemberData[keys[i]]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CharTeam message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CharTeam
     * @static
     * @param {CharTeam} message CharTeam
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CharTeam.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.CharIds = [];
        if (options.objects || options.defaults)
            object.TeamMemberData = {};
        if (message.TeamId != null && message.hasOwnProperty("TeamId")) {
            if (typeof message.TeamId === "number")
                object.TeamId = options.longs === String ? String(message.TeamId) : message.TeamId;
            else
                object.TeamId = options.longs === String ? $util.Long.prototype.toString.call(message.TeamId) : options.longs === Number ? new $util.LongBits(message.TeamId.low >>> 0, message.TeamId.high >>> 0).toNumber() : message.TeamId;
            if (options.oneofs)
                object._TeamId = "TeamId";
        }
        if (message.LeaderId != null && message.hasOwnProperty("LeaderId")) {
            if (typeof message.LeaderId === "number")
                object.LeaderId = options.longs === String ? String(message.LeaderId) : message.LeaderId;
            else
                object.LeaderId = options.longs === String ? $util.Long.prototype.toString.call(message.LeaderId) : options.longs === Number ? new $util.LongBits(message.LeaderId.low >>> 0, message.LeaderId.high >>> 0).toNumber() : message.LeaderId;
            if (options.oneofs)
                object._LeaderId = "LeaderId";
        }
        if (message.TeamTargetId != null && message.hasOwnProperty("TeamTargetId")) {
            object.TeamTargetId = message.TeamTargetId;
            if (options.oneofs)
                object._TeamTargetId = "TeamTargetId";
        }
        if (message.TeamNum != null && message.hasOwnProperty("TeamNum")) {
            object.TeamNum = message.TeamNum;
            if (options.oneofs)
                object._TeamNum = "TeamNum";
        }
        if (message.CharIds && message.CharIds.length) {
            object.CharIds = [];
            for (var j = 0; j < message.CharIds.length; ++j)
                if (typeof message.CharIds[j] === "number")
                    object.CharIds[j] = options.longs === String ? String(message.CharIds[j]) : message.CharIds[j];
                else
                    object.CharIds[j] = options.longs === String ? $util.Long.prototype.toString.call(message.CharIds[j]) : options.longs === Number ? new $util.LongBits(message.CharIds[j].low >>> 0, message.CharIds[j].high >>> 0).toNumber() : message.CharIds[j];
        }
        if (message.IsMatching != null && message.hasOwnProperty("IsMatching")) {
            object.IsMatching = message.IsMatching;
            if (options.oneofs)
                object._IsMatching = "IsMatching";
        }
        if (message.CharTeamVersion != null && message.hasOwnProperty("CharTeamVersion")) {
            object.CharTeamVersion = message.CharTeamVersion;
            if (options.oneofs)
                object._CharTeamVersion = "CharTeamVersion";
        }
        var keys2;
        if (message.TeamMemberData && (keys2 = Object.keys(message.TeamMemberData)).length) {
            object.TeamMemberData = {};
            for (var j = 0; j < keys2.length; ++j)
                object.TeamMemberData[keys2[j]] = $root.TeamMemData.toObject(message.TeamMemberData[keys2[j]], options);
        }
        return object;
    };

    /**
     * Converts this CharTeam to JSON.
     * @function toJSON
     * @memberof CharTeam
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CharTeam.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CharTeam
     * @function getTypeUrl
     * @memberof CharTeam
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CharTeam.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CharTeam";
    };

    return CharTeam;
})();

$root.UnionData = (function() {

    /**
     * Properties of an UnionData.
     * @exports IUnionData
     * @interface IUnionData
     * @property {number|Long|null} [UnionId] UnionData UnionId
     * @property {string|null} [Name] UnionData Name
     * @property {number|null} [UnionHuntRank] UnionData UnionHuntRank
     */

    /**
     * Constructs a new UnionData.
     * @exports UnionData
     * @classdesc Represents an UnionData.
     * @implements IUnionData
     * @constructor
     * @param {IUnionData=} [properties] Properties to set
     */
    function UnionData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * UnionData UnionId.
     * @member {number|Long|null|undefined} UnionId
     * @memberof UnionData
     * @instance
     */
    UnionData.prototype.UnionId = null;

    /**
     * UnionData Name.
     * @member {string|null|undefined} Name
     * @memberof UnionData
     * @instance
     */
    UnionData.prototype.Name = null;

    /**
     * UnionData UnionHuntRank.
     * @member {number|null|undefined} UnionHuntRank
     * @memberof UnionData
     * @instance
     */
    UnionData.prototype.UnionHuntRank = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * UnionData _UnionId.
     * @member {"UnionId"|undefined} _UnionId
     * @memberof UnionData
     * @instance
     */
    Object.defineProperty(UnionData.prototype, "_UnionId", {
        get: $util.oneOfGetter($oneOfFields = ["UnionId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * UnionData _Name.
     * @member {"Name"|undefined} _Name
     * @memberof UnionData
     * @instance
     */
    Object.defineProperty(UnionData.prototype, "_Name", {
        get: $util.oneOfGetter($oneOfFields = ["Name"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * UnionData _UnionHuntRank.
     * @member {"UnionHuntRank"|undefined} _UnionHuntRank
     * @memberof UnionData
     * @instance
     */
    Object.defineProperty(UnionData.prototype, "_UnionHuntRank", {
        get: $util.oneOfGetter($oneOfFields = ["UnionHuntRank"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new UnionData instance using the specified properties.
     * @function create
     * @memberof UnionData
     * @static
     * @param {IUnionData=} [properties] Properties to set
     * @returns {UnionData} UnionData instance
     */
    UnionData.create = function create(properties) {
        return new UnionData(properties);
    };

    /**
     * Encodes the specified UnionData message. Does not implicitly {@link UnionData.verify|verify} messages.
     * @function encode
     * @memberof UnionData
     * @static
     * @param {IUnionData} message UnionData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UnionData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.UnionId != null && Object.hasOwnProperty.call(message, "UnionId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.UnionId);
        if (message.Name != null && Object.hasOwnProperty.call(message, "Name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
        if (message.UnionHuntRank != null && Object.hasOwnProperty.call(message, "UnionHuntRank"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.UnionHuntRank);
        return writer;
    };

    /**
     * Encodes the specified UnionData message, length delimited. Does not implicitly {@link UnionData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UnionData
     * @static
     * @param {IUnionData} message UnionData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UnionData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an UnionData message from the specified reader or buffer.
     * @function decode
     * @memberof UnionData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UnionData} UnionData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UnionData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UnionData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.UnionId = reader.int64();
                    break;
                }
            case 2: {
                    message.Name = reader.string();
                    break;
                }
            case 3: {
                    message.UnionHuntRank = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an UnionData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UnionData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UnionData} UnionData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UnionData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an UnionData message.
     * @function verify
     * @memberof UnionData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    UnionData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.UnionId != null && message.hasOwnProperty("UnionId")) {
            properties._UnionId = 1;
            if (!$util.isInteger(message.UnionId) && !(message.UnionId && $util.isInteger(message.UnionId.low) && $util.isInteger(message.UnionId.high)))
                return "UnionId: integer|Long expected";
        }
        if (message.Name != null && message.hasOwnProperty("Name")) {
            properties._Name = 1;
            if (!$util.isString(message.Name))
                return "Name: string expected";
        }
        if (message.UnionHuntRank != null && message.hasOwnProperty("UnionHuntRank")) {
            properties._UnionHuntRank = 1;
            if (!$util.isInteger(message.UnionHuntRank))
                return "UnionHuntRank: integer expected";
        }
        return null;
    };

    /**
     * Creates an UnionData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UnionData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UnionData} UnionData
     */
    UnionData.fromObject = function fromObject(object) {
        if (object instanceof $root.UnionData)
            return object;
        var message = new $root.UnionData();
        if (object.UnionId != null)
            if ($util.Long)
                (message.UnionId = $util.Long.fromValue(object.UnionId)).unsigned = false;
            else if (typeof object.UnionId === "string")
                message.UnionId = parseInt(object.UnionId, 10);
            else if (typeof object.UnionId === "number")
                message.UnionId = object.UnionId;
            else if (typeof object.UnionId === "object")
                message.UnionId = new $util.LongBits(object.UnionId.low >>> 0, object.UnionId.high >>> 0).toNumber();
        if (object.Name != null)
            message.Name = String(object.Name);
        if (object.UnionHuntRank != null)
            message.UnionHuntRank = object.UnionHuntRank | 0;
        return message;
    };

    /**
     * Creates a plain object from an UnionData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UnionData
     * @static
     * @param {UnionData} message UnionData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    UnionData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.UnionId != null && message.hasOwnProperty("UnionId")) {
            if (typeof message.UnionId === "number")
                object.UnionId = options.longs === String ? String(message.UnionId) : message.UnionId;
            else
                object.UnionId = options.longs === String ? $util.Long.prototype.toString.call(message.UnionId) : options.longs === Number ? new $util.LongBits(message.UnionId.low >>> 0, message.UnionId.high >>> 0).toNumber() : message.UnionId;
            if (options.oneofs)
                object._UnionId = "UnionId";
        }
        if (message.Name != null && message.hasOwnProperty("Name")) {
            object.Name = message.Name;
            if (options.oneofs)
                object._Name = "Name";
        }
        if (message.UnionHuntRank != null && message.hasOwnProperty("UnionHuntRank")) {
            object.UnionHuntRank = message.UnionHuntRank;
            if (options.oneofs)
                object._UnionHuntRank = "UnionHuntRank";
        }
        return object;
    };

    /**
     * Converts this UnionData to JSON.
     * @function toJSON
     * @memberof UnionData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    UnionData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for UnionData
     * @function getTypeUrl
     * @memberof UnionData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    UnionData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/UnionData";
    };

    return UnionData;
})();

/**
 * SystemType enum.
 * @exports SystemType
 * @enum {number}
 * @property {number} SystemType_Null=0 SystemType_Null value
 * @property {number} SystemType_Android=1 SystemType_Android value
 * @property {number} SystemType_Ios=2 SystemType_Ios value
 * @property {number} SystemType_Web=3 SystemType_Web value
 * @property {number} SystemType_Linux=4 SystemType_Linux value
 * @property {number} SystemType_Windows=5 SystemType_Windows value
 */
$root.SystemType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "SystemType_Null"] = 0;
    values[valuesById[1] = "SystemType_Android"] = 1;
    values[valuesById[2] = "SystemType_Ios"] = 2;
    values[valuesById[3] = "SystemType_Web"] = 3;
    values[valuesById[4] = "SystemType_Linux"] = 4;
    values[valuesById[5] = "SystemType_Windows"] = 5;
    return values;
})();

$root.AccountData = (function() {

    /**
     * Properties of an AccountData.
     * @exports IAccountData
     * @interface IAccountData
     * @property {string|null} [OpenId] AccountData OpenId
     * @property {number|null} [SdkType] AccountData SdkType
     * @property {string|null} [AccountId] AccountData AccountId
     * @property {string|null} [AccountUuid] AccountData AccountUuid
     * @property {SystemType|null} [Os] AccountData Os
     */

    /**
     * Constructs a new AccountData.
     * @exports AccountData
     * @classdesc Represents an AccountData.
     * @implements IAccountData
     * @constructor
     * @param {IAccountData=} [properties] Properties to set
     */
    function AccountData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * AccountData OpenId.
     * @member {string|null|undefined} OpenId
     * @memberof AccountData
     * @instance
     */
    AccountData.prototype.OpenId = null;

    /**
     * AccountData SdkType.
     * @member {number|null|undefined} SdkType
     * @memberof AccountData
     * @instance
     */
    AccountData.prototype.SdkType = null;

    /**
     * AccountData AccountId.
     * @member {string|null|undefined} AccountId
     * @memberof AccountData
     * @instance
     */
    AccountData.prototype.AccountId = null;

    /**
     * AccountData AccountUuid.
     * @member {string|null|undefined} AccountUuid
     * @memberof AccountData
     * @instance
     */
    AccountData.prototype.AccountUuid = null;

    /**
     * AccountData Os.
     * @member {SystemType|null|undefined} Os
     * @memberof AccountData
     * @instance
     */
    AccountData.prototype.Os = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * AccountData _OpenId.
     * @member {"OpenId"|undefined} _OpenId
     * @memberof AccountData
     * @instance
     */
    Object.defineProperty(AccountData.prototype, "_OpenId", {
        get: $util.oneOfGetter($oneOfFields = ["OpenId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AccountData _SdkType.
     * @member {"SdkType"|undefined} _SdkType
     * @memberof AccountData
     * @instance
     */
    Object.defineProperty(AccountData.prototype, "_SdkType", {
        get: $util.oneOfGetter($oneOfFields = ["SdkType"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AccountData _AccountId.
     * @member {"AccountId"|undefined} _AccountId
     * @memberof AccountData
     * @instance
     */
    Object.defineProperty(AccountData.prototype, "_AccountId", {
        get: $util.oneOfGetter($oneOfFields = ["AccountId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AccountData _AccountUuid.
     * @member {"AccountUuid"|undefined} _AccountUuid
     * @memberof AccountData
     * @instance
     */
    Object.defineProperty(AccountData.prototype, "_AccountUuid", {
        get: $util.oneOfGetter($oneOfFields = ["AccountUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AccountData _Os.
     * @member {"Os"|undefined} _Os
     * @memberof AccountData
     * @instance
     */
    Object.defineProperty(AccountData.prototype, "_Os", {
        get: $util.oneOfGetter($oneOfFields = ["Os"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new AccountData instance using the specified properties.
     * @function create
     * @memberof AccountData
     * @static
     * @param {IAccountData=} [properties] Properties to set
     * @returns {AccountData} AccountData instance
     */
    AccountData.create = function create(properties) {
        return new AccountData(properties);
    };

    /**
     * Encodes the specified AccountData message. Does not implicitly {@link AccountData.verify|verify} messages.
     * @function encode
     * @memberof AccountData
     * @static
     * @param {IAccountData} message AccountData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AccountData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.OpenId != null && Object.hasOwnProperty.call(message, "OpenId"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.OpenId);
        if (message.SdkType != null && Object.hasOwnProperty.call(message, "SdkType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.SdkType);
        if (message.AccountId != null && Object.hasOwnProperty.call(message, "AccountId"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.AccountId);
        if (message.AccountUuid != null && Object.hasOwnProperty.call(message, "AccountUuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.AccountUuid);
        if (message.Os != null && Object.hasOwnProperty.call(message, "Os"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.Os);
        return writer;
    };

    /**
     * Encodes the specified AccountData message, length delimited. Does not implicitly {@link AccountData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AccountData
     * @static
     * @param {IAccountData} message AccountData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AccountData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AccountData message from the specified reader or buffer.
     * @function decode
     * @memberof AccountData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AccountData} AccountData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AccountData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AccountData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.OpenId = reader.string();
                    break;
                }
            case 2: {
                    message.SdkType = reader.int32();
                    break;
                }
            case 3: {
                    message.AccountId = reader.string();
                    break;
                }
            case 4: {
                    message.AccountUuid = reader.string();
                    break;
                }
            case 5: {
                    message.Os = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an AccountData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AccountData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AccountData} AccountData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AccountData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AccountData message.
     * @function verify
     * @memberof AccountData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AccountData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.OpenId != null && message.hasOwnProperty("OpenId")) {
            properties._OpenId = 1;
            if (!$util.isString(message.OpenId))
                return "OpenId: string expected";
        }
        if (message.SdkType != null && message.hasOwnProperty("SdkType")) {
            properties._SdkType = 1;
            if (!$util.isInteger(message.SdkType))
                return "SdkType: integer expected";
        }
        if (message.AccountId != null && message.hasOwnProperty("AccountId")) {
            properties._AccountId = 1;
            if (!$util.isString(message.AccountId))
                return "AccountId: string expected";
        }
        if (message.AccountUuid != null && message.hasOwnProperty("AccountUuid")) {
            properties._AccountUuid = 1;
            if (!$util.isString(message.AccountUuid))
                return "AccountUuid: string expected";
        }
        if (message.Os != null && message.hasOwnProperty("Os")) {
            properties._Os = 1;
            switch (message.Os) {
            default:
                return "Os: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        }
        return null;
    };

    /**
     * Creates an AccountData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AccountData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AccountData} AccountData
     */
    AccountData.fromObject = function fromObject(object) {
        if (object instanceof $root.AccountData)
            return object;
        var message = new $root.AccountData();
        if (object.OpenId != null)
            message.OpenId = String(object.OpenId);
        if (object.SdkType != null)
            message.SdkType = object.SdkType | 0;
        if (object.AccountId != null)
            message.AccountId = String(object.AccountId);
        if (object.AccountUuid != null)
            message.AccountUuid = String(object.AccountUuid);
        switch (object.Os) {
        default:
            if (typeof object.Os === "number") {
                message.Os = object.Os;
                break;
            }
            break;
        case "SystemType_Null":
        case 0:
            message.Os = 0;
            break;
        case "SystemType_Android":
        case 1:
            message.Os = 1;
            break;
        case "SystemType_Ios":
        case 2:
            message.Os = 2;
            break;
        case "SystemType_Web":
        case 3:
            message.Os = 3;
            break;
        case "SystemType_Linux":
        case 4:
            message.Os = 4;
            break;
        case "SystemType_Windows":
        case 5:
            message.Os = 5;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from an AccountData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AccountData
     * @static
     * @param {AccountData} message AccountData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AccountData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.OpenId != null && message.hasOwnProperty("OpenId")) {
            object.OpenId = message.OpenId;
            if (options.oneofs)
                object._OpenId = "OpenId";
        }
        if (message.SdkType != null && message.hasOwnProperty("SdkType")) {
            object.SdkType = message.SdkType;
            if (options.oneofs)
                object._SdkType = "SdkType";
        }
        if (message.AccountId != null && message.hasOwnProperty("AccountId")) {
            object.AccountId = message.AccountId;
            if (options.oneofs)
                object._AccountId = "AccountId";
        }
        if (message.AccountUuid != null && message.hasOwnProperty("AccountUuid")) {
            object.AccountUuid = message.AccountUuid;
            if (options.oneofs)
                object._AccountUuid = "AccountUuid";
        }
        if (message.Os != null && message.hasOwnProperty("Os")) {
            object.Os = options.enums === String ? $root.SystemType[message.Os] === undefined ? message.Os : $root.SystemType[message.Os] : message.Os;
            if (options.oneofs)
                object._Os = "Os";
        }
        return object;
    };

    /**
     * Converts this AccountData to JSON.
     * @function toJSON
     * @memberof AccountData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AccountData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for AccountData
     * @function getTypeUrl
     * @memberof AccountData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    AccountData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/AccountData";
    };

    return AccountData;
})();

$root.FunctionData = (function() {

    /**
     * Properties of a FunctionData.
     * @exports IFunctionData
     * @interface IFunctionData
     * @property {Object.<string,boolean>|null} [UnlockedMap] FunctionData UnlockedMap
     * @property {Array.<number>|null} [DrawnFunctionIds] FunctionData DrawnFunctionIds
     */

    /**
     * Constructs a new FunctionData.
     * @exports FunctionData
     * @classdesc Represents a FunctionData.
     * @implements IFunctionData
     * @constructor
     * @param {IFunctionData=} [properties] Properties to set
     */
    function FunctionData(properties) {
        this.UnlockedMap = {};
        this.DrawnFunctionIds = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FunctionData UnlockedMap.
     * @member {Object.<string,boolean>} UnlockedMap
     * @memberof FunctionData
     * @instance
     */
    FunctionData.prototype.UnlockedMap = $util.emptyObject;

    /**
     * FunctionData DrawnFunctionIds.
     * @member {Array.<number>} DrawnFunctionIds
     * @memberof FunctionData
     * @instance
     */
    FunctionData.prototype.DrawnFunctionIds = $util.emptyArray;

    /**
     * Creates a new FunctionData instance using the specified properties.
     * @function create
     * @memberof FunctionData
     * @static
     * @param {IFunctionData=} [properties] Properties to set
     * @returns {FunctionData} FunctionData instance
     */
    FunctionData.create = function create(properties) {
        return new FunctionData(properties);
    };

    /**
     * Encodes the specified FunctionData message. Does not implicitly {@link FunctionData.verify|verify} messages.
     * @function encode
     * @memberof FunctionData
     * @static
     * @param {IFunctionData} message FunctionData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FunctionData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.UnlockedMap != null && Object.hasOwnProperty.call(message, "UnlockedMap"))
            for (var keys = Object.keys(message.UnlockedMap), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).bool(message.UnlockedMap[keys[i]]).ldelim();
        if (message.DrawnFunctionIds != null && message.DrawnFunctionIds.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.DrawnFunctionIds.length; ++i)
                writer.int32(message.DrawnFunctionIds[i]);
            writer.ldelim();
        }
        return writer;
    };

    /**
     * Encodes the specified FunctionData message, length delimited. Does not implicitly {@link FunctionData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FunctionData
     * @static
     * @param {IFunctionData} message FunctionData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FunctionData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FunctionData message from the specified reader or buffer.
     * @function decode
     * @memberof FunctionData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FunctionData} FunctionData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FunctionData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FunctionData(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (message.UnlockedMap === $util.emptyObject)
                        message.UnlockedMap = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = false;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = reader.bool();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.UnlockedMap[key] = value;
                    break;
                }
            case 2: {
                    if (!(message.DrawnFunctionIds && message.DrawnFunctionIds.length))
                        message.DrawnFunctionIds = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.DrawnFunctionIds.push(reader.int32());
                    } else
                        message.DrawnFunctionIds.push(reader.int32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FunctionData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FunctionData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FunctionData} FunctionData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FunctionData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FunctionData message.
     * @function verify
     * @memberof FunctionData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FunctionData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.UnlockedMap != null && message.hasOwnProperty("UnlockedMap")) {
            if (!$util.isObject(message.UnlockedMap))
                return "UnlockedMap: object expected";
            var key = Object.keys(message.UnlockedMap);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "UnlockedMap: integer key{k:int32} expected";
                if (typeof message.UnlockedMap[key[i]] !== "boolean")
                    return "UnlockedMap: boolean{k:int32} expected";
            }
        }
        if (message.DrawnFunctionIds != null && message.hasOwnProperty("DrawnFunctionIds")) {
            if (!Array.isArray(message.DrawnFunctionIds))
                return "DrawnFunctionIds: array expected";
            for (var i = 0; i < message.DrawnFunctionIds.length; ++i)
                if (!$util.isInteger(message.DrawnFunctionIds[i]))
                    return "DrawnFunctionIds: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a FunctionData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FunctionData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FunctionData} FunctionData
     */
    FunctionData.fromObject = function fromObject(object) {
        if (object instanceof $root.FunctionData)
            return object;
        var message = new $root.FunctionData();
        if (object.UnlockedMap) {
            if (typeof object.UnlockedMap !== "object")
                throw TypeError(".FunctionData.UnlockedMap: object expected");
            message.UnlockedMap = {};
            for (var keys = Object.keys(object.UnlockedMap), i = 0; i < keys.length; ++i)
                message.UnlockedMap[keys[i]] = Boolean(object.UnlockedMap[keys[i]]);
        }
        if (object.DrawnFunctionIds) {
            if (!Array.isArray(object.DrawnFunctionIds))
                throw TypeError(".FunctionData.DrawnFunctionIds: array expected");
            message.DrawnFunctionIds = [];
            for (var i = 0; i < object.DrawnFunctionIds.length; ++i)
                message.DrawnFunctionIds[i] = object.DrawnFunctionIds[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a FunctionData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FunctionData
     * @static
     * @param {FunctionData} message FunctionData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FunctionData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.DrawnFunctionIds = [];
        if (options.objects || options.defaults)
            object.UnlockedMap = {};
        var keys2;
        if (message.UnlockedMap && (keys2 = Object.keys(message.UnlockedMap)).length) {
            object.UnlockedMap = {};
            for (var j = 0; j < keys2.length; ++j)
                object.UnlockedMap[keys2[j]] = message.UnlockedMap[keys2[j]];
        }
        if (message.DrawnFunctionIds && message.DrawnFunctionIds.length) {
            object.DrawnFunctionIds = [];
            for (var j = 0; j < message.DrawnFunctionIds.length; ++j)
                object.DrawnFunctionIds[j] = message.DrawnFunctionIds[j];
        }
        return object;
    };

    /**
     * Converts this FunctionData to JSON.
     * @function toJSON
     * @memberof FunctionData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FunctionData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FunctionData
     * @function getTypeUrl
     * @memberof FunctionData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FunctionData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FunctionData";
    };

    return FunctionData;
})();

$root.ActionInfo = (function() {

    /**
     * Properties of an ActionInfo.
     * @exports IActionInfo
     * @interface IActionInfo
     * @property {number|null} [ActionId] ActionInfo ActionId
     * @property {number|null} [Period] ActionInfo Period
     * @property {number|null} [Percent] ActionInfo Percent
     */

    /**
     * Constructs a new ActionInfo.
     * @exports ActionInfo
     * @classdesc Represents an ActionInfo.
     * @implements IActionInfo
     * @constructor
     * @param {IActionInfo=} [properties] Properties to set
     */
    function ActionInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ActionInfo ActionId.
     * @member {number|null|undefined} ActionId
     * @memberof ActionInfo
     * @instance
     */
    ActionInfo.prototype.ActionId = null;

    /**
     * ActionInfo Period.
     * @member {number|null|undefined} Period
     * @memberof ActionInfo
     * @instance
     */
    ActionInfo.prototype.Period = null;

    /**
     * ActionInfo Percent.
     * @member {number|null|undefined} Percent
     * @memberof ActionInfo
     * @instance
     */
    ActionInfo.prototype.Percent = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * ActionInfo _ActionId.
     * @member {"ActionId"|undefined} _ActionId
     * @memberof ActionInfo
     * @instance
     */
    Object.defineProperty(ActionInfo.prototype, "_ActionId", {
        get: $util.oneOfGetter($oneOfFields = ["ActionId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * ActionInfo _Period.
     * @member {"Period"|undefined} _Period
     * @memberof ActionInfo
     * @instance
     */
    Object.defineProperty(ActionInfo.prototype, "_Period", {
        get: $util.oneOfGetter($oneOfFields = ["Period"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * ActionInfo _Percent.
     * @member {"Percent"|undefined} _Percent
     * @memberof ActionInfo
     * @instance
     */
    Object.defineProperty(ActionInfo.prototype, "_Percent", {
        get: $util.oneOfGetter($oneOfFields = ["Percent"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new ActionInfo instance using the specified properties.
     * @function create
     * @memberof ActionInfo
     * @static
     * @param {IActionInfo=} [properties] Properties to set
     * @returns {ActionInfo} ActionInfo instance
     */
    ActionInfo.create = function create(properties) {
        return new ActionInfo(properties);
    };

    /**
     * Encodes the specified ActionInfo message. Does not implicitly {@link ActionInfo.verify|verify} messages.
     * @function encode
     * @memberof ActionInfo
     * @static
     * @param {IActionInfo} message ActionInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ActionInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ActionId != null && Object.hasOwnProperty.call(message, "ActionId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ActionId);
        if (message.Period != null && Object.hasOwnProperty.call(message, "Period"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Period);
        if (message.Percent != null && Object.hasOwnProperty.call(message, "Percent"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.Percent);
        return writer;
    };

    /**
     * Encodes the specified ActionInfo message, length delimited. Does not implicitly {@link ActionInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ActionInfo
     * @static
     * @param {IActionInfo} message ActionInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ActionInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an ActionInfo message from the specified reader or buffer.
     * @function decode
     * @memberof ActionInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ActionInfo} ActionInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ActionInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActionInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.ActionId = reader.int32();
                    break;
                }
            case 2: {
                    message.Period = reader.int32();
                    break;
                }
            case 3: {
                    message.Percent = reader.float();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an ActionInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ActionInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ActionInfo} ActionInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ActionInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an ActionInfo message.
     * @function verify
     * @memberof ActionInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ActionInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.ActionId != null && message.hasOwnProperty("ActionId")) {
            properties._ActionId = 1;
            if (!$util.isInteger(message.ActionId))
                return "ActionId: integer expected";
        }
        if (message.Period != null && message.hasOwnProperty("Period")) {
            properties._Period = 1;
            if (!$util.isInteger(message.Period))
                return "Period: integer expected";
        }
        if (message.Percent != null && message.hasOwnProperty("Percent")) {
            properties._Percent = 1;
            if (typeof message.Percent !== "number")
                return "Percent: number expected";
        }
        return null;
    };

    /**
     * Creates an ActionInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ActionInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ActionInfo} ActionInfo
     */
    ActionInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.ActionInfo)
            return object;
        var message = new $root.ActionInfo();
        if (object.ActionId != null)
            message.ActionId = object.ActionId | 0;
        if (object.Period != null)
            message.Period = object.Period | 0;
        if (object.Percent != null)
            message.Percent = Number(object.Percent);
        return message;
    };

    /**
     * Creates a plain object from an ActionInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ActionInfo
     * @static
     * @param {ActionInfo} message ActionInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ActionInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.ActionId != null && message.hasOwnProperty("ActionId")) {
            object.ActionId = message.ActionId;
            if (options.oneofs)
                object._ActionId = "ActionId";
        }
        if (message.Period != null && message.hasOwnProperty("Period")) {
            object.Period = message.Period;
            if (options.oneofs)
                object._Period = "Period";
        }
        if (message.Percent != null && message.hasOwnProperty("Percent")) {
            object.Percent = options.json && !isFinite(message.Percent) ? String(message.Percent) : message.Percent;
            if (options.oneofs)
                object._Percent = "Percent";
        }
        return object;
    };

    /**
     * Converts this ActionInfo to JSON.
     * @function toJSON
     * @memberof ActionInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ActionInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ActionInfo
     * @function getTypeUrl
     * @memberof ActionInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ActionInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ActionInfo";
    };

    return ActionInfo;
})();

$root.EditorUIPosition = (function() {

    /**
     * Properties of an EditorUIPosition.
     * @exports IEditorUIPosition
     * @interface IEditorUIPosition
     * @property {number|null} [Id] EditorUIPosition Id
     * @property {number|null} [X] EditorUIPosition X
     * @property {number|null} [Y] EditorUIPosition Y
     */

    /**
     * Constructs a new EditorUIPosition.
     * @exports EditorUIPosition
     * @classdesc Represents an EditorUIPosition.
     * @implements IEditorUIPosition
     * @constructor
     * @param {IEditorUIPosition=} [properties] Properties to set
     */
    function EditorUIPosition(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * EditorUIPosition Id.
     * @member {number|null|undefined} Id
     * @memberof EditorUIPosition
     * @instance
     */
    EditorUIPosition.prototype.Id = null;

    /**
     * EditorUIPosition X.
     * @member {number|null|undefined} X
     * @memberof EditorUIPosition
     * @instance
     */
    EditorUIPosition.prototype.X = null;

    /**
     * EditorUIPosition Y.
     * @member {number|null|undefined} Y
     * @memberof EditorUIPosition
     * @instance
     */
    EditorUIPosition.prototype.Y = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * EditorUIPosition _Id.
     * @member {"Id"|undefined} _Id
     * @memberof EditorUIPosition
     * @instance
     */
    Object.defineProperty(EditorUIPosition.prototype, "_Id", {
        get: $util.oneOfGetter($oneOfFields = ["Id"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * EditorUIPosition _X.
     * @member {"X"|undefined} _X
     * @memberof EditorUIPosition
     * @instance
     */
    Object.defineProperty(EditorUIPosition.prototype, "_X", {
        get: $util.oneOfGetter($oneOfFields = ["X"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * EditorUIPosition _Y.
     * @member {"Y"|undefined} _Y
     * @memberof EditorUIPosition
     * @instance
     */
    Object.defineProperty(EditorUIPosition.prototype, "_Y", {
        get: $util.oneOfGetter($oneOfFields = ["Y"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new EditorUIPosition instance using the specified properties.
     * @function create
     * @memberof EditorUIPosition
     * @static
     * @param {IEditorUIPosition=} [properties] Properties to set
     * @returns {EditorUIPosition} EditorUIPosition instance
     */
    EditorUIPosition.create = function create(properties) {
        return new EditorUIPosition(properties);
    };

    /**
     * Encodes the specified EditorUIPosition message. Does not implicitly {@link EditorUIPosition.verify|verify} messages.
     * @function encode
     * @memberof EditorUIPosition
     * @static
     * @param {IEditorUIPosition} message EditorUIPosition message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EditorUIPosition.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Id != null && Object.hasOwnProperty.call(message, "Id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
        if (message.X != null && Object.hasOwnProperty.call(message, "X"))
            writer.uint32(/* id 2, wireType 5 =*/21).float(message.X);
        if (message.Y != null && Object.hasOwnProperty.call(message, "Y"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.Y);
        return writer;
    };

    /**
     * Encodes the specified EditorUIPosition message, length delimited. Does not implicitly {@link EditorUIPosition.verify|verify} messages.
     * @function encodeDelimited
     * @memberof EditorUIPosition
     * @static
     * @param {IEditorUIPosition} message EditorUIPosition message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EditorUIPosition.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an EditorUIPosition message from the specified reader or buffer.
     * @function decode
     * @memberof EditorUIPosition
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {EditorUIPosition} EditorUIPosition
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EditorUIPosition.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EditorUIPosition();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Id = reader.int32();
                    break;
                }
            case 2: {
                    message.X = reader.float();
                    break;
                }
            case 3: {
                    message.Y = reader.float();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an EditorUIPosition message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof EditorUIPosition
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {EditorUIPosition} EditorUIPosition
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EditorUIPosition.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an EditorUIPosition message.
     * @function verify
     * @memberof EditorUIPosition
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    EditorUIPosition.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Id != null && message.hasOwnProperty("Id")) {
            properties._Id = 1;
            if (!$util.isInteger(message.Id))
                return "Id: integer expected";
        }
        if (message.X != null && message.hasOwnProperty("X")) {
            properties._X = 1;
            if (typeof message.X !== "number")
                return "X: number expected";
        }
        if (message.Y != null && message.hasOwnProperty("Y")) {
            properties._Y = 1;
            if (typeof message.Y !== "number")
                return "Y: number expected";
        }
        return null;
    };

    /**
     * Creates an EditorUIPosition message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof EditorUIPosition
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {EditorUIPosition} EditorUIPosition
     */
    EditorUIPosition.fromObject = function fromObject(object) {
        if (object instanceof $root.EditorUIPosition)
            return object;
        var message = new $root.EditorUIPosition();
        if (object.Id != null)
            message.Id = object.Id | 0;
        if (object.X != null)
            message.X = Number(object.X);
        if (object.Y != null)
            message.Y = Number(object.Y);
        return message;
    };

    /**
     * Creates a plain object from an EditorUIPosition message. Also converts values to other types if specified.
     * @function toObject
     * @memberof EditorUIPosition
     * @static
     * @param {EditorUIPosition} message EditorUIPosition
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    EditorUIPosition.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Id != null && message.hasOwnProperty("Id")) {
            object.Id = message.Id;
            if (options.oneofs)
                object._Id = "Id";
        }
        if (message.X != null && message.hasOwnProperty("X")) {
            object.X = options.json && !isFinite(message.X) ? String(message.X) : message.X;
            if (options.oneofs)
                object._X = "X";
        }
        if (message.Y != null && message.hasOwnProperty("Y")) {
            object.Y = options.json && !isFinite(message.Y) ? String(message.Y) : message.Y;
            if (options.oneofs)
                object._Y = "Y";
        }
        return object;
    };

    /**
     * Converts this EditorUIPosition to JSON.
     * @function toJSON
     * @memberof EditorUIPosition
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    EditorUIPosition.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for EditorUIPosition
     * @function getTypeUrl
     * @memberof EditorUIPosition
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    EditorUIPosition.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/EditorUIPosition";
    };

    return EditorUIPosition;
})();

$root.FashionQualityCollectInfo = (function() {

    /**
     * Properties of a FashionQualityCollectInfo.
     * @exports IFashionQualityCollectInfo
     * @interface IFashionQualityCollectInfo
     * @property {Object.<string,number>|null} [QualityCount] FashionQualityCollectInfo QualityCount
     */

    /**
     * Constructs a new FashionQualityCollectInfo.
     * @exports FashionQualityCollectInfo
     * @classdesc Represents a FashionQualityCollectInfo.
     * @implements IFashionQualityCollectInfo
     * @constructor
     * @param {IFashionQualityCollectInfo=} [properties] Properties to set
     */
    function FashionQualityCollectInfo(properties) {
        this.QualityCount = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FashionQualityCollectInfo QualityCount.
     * @member {Object.<string,number>} QualityCount
     * @memberof FashionQualityCollectInfo
     * @instance
     */
    FashionQualityCollectInfo.prototype.QualityCount = $util.emptyObject;

    /**
     * Creates a new FashionQualityCollectInfo instance using the specified properties.
     * @function create
     * @memberof FashionQualityCollectInfo
     * @static
     * @param {IFashionQualityCollectInfo=} [properties] Properties to set
     * @returns {FashionQualityCollectInfo} FashionQualityCollectInfo instance
     */
    FashionQualityCollectInfo.create = function create(properties) {
        return new FashionQualityCollectInfo(properties);
    };

    /**
     * Encodes the specified FashionQualityCollectInfo message. Does not implicitly {@link FashionQualityCollectInfo.verify|verify} messages.
     * @function encode
     * @memberof FashionQualityCollectInfo
     * @static
     * @param {IFashionQualityCollectInfo} message FashionQualityCollectInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FashionQualityCollectInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.QualityCount != null && Object.hasOwnProperty.call(message, "QualityCount"))
            for (var keys = Object.keys(message.QualityCount), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.QualityCount[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified FashionQualityCollectInfo message, length delimited. Does not implicitly {@link FashionQualityCollectInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FashionQualityCollectInfo
     * @static
     * @param {IFashionQualityCollectInfo} message FashionQualityCollectInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FashionQualityCollectInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FashionQualityCollectInfo message from the specified reader or buffer.
     * @function decode
     * @memberof FashionQualityCollectInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FashionQualityCollectInfo} FashionQualityCollectInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FashionQualityCollectInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FashionQualityCollectInfo(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (message.QualityCount === $util.emptyObject)
                        message.QualityCount = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = 0;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = reader.int32();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.QualityCount[key] = value;
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FashionQualityCollectInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FashionQualityCollectInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FashionQualityCollectInfo} FashionQualityCollectInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FashionQualityCollectInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FashionQualityCollectInfo message.
     * @function verify
     * @memberof FashionQualityCollectInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FashionQualityCollectInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.QualityCount != null && message.hasOwnProperty("QualityCount")) {
            if (!$util.isObject(message.QualityCount))
                return "QualityCount: object expected";
            var key = Object.keys(message.QualityCount);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "QualityCount: integer key{k:int32} expected";
                if (!$util.isInteger(message.QualityCount[key[i]]))
                    return "QualityCount: integer{k:int32} expected";
            }
        }
        return null;
    };

    /**
     * Creates a FashionQualityCollectInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FashionQualityCollectInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FashionQualityCollectInfo} FashionQualityCollectInfo
     */
    FashionQualityCollectInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.FashionQualityCollectInfo)
            return object;
        var message = new $root.FashionQualityCollectInfo();
        if (object.QualityCount) {
            if (typeof object.QualityCount !== "object")
                throw TypeError(".FashionQualityCollectInfo.QualityCount: object expected");
            message.QualityCount = {};
            for (var keys = Object.keys(object.QualityCount), i = 0; i < keys.length; ++i)
                message.QualityCount[keys[i]] = object.QualityCount[keys[i]] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a FashionQualityCollectInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FashionQualityCollectInfo
     * @static
     * @param {FashionQualityCollectInfo} message FashionQualityCollectInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FashionQualityCollectInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.QualityCount = {};
        var keys2;
        if (message.QualityCount && (keys2 = Object.keys(message.QualityCount)).length) {
            object.QualityCount = {};
            for (var j = 0; j < keys2.length; ++j)
                object.QualityCount[keys2[j]] = message.QualityCount[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this FashionQualityCollectInfo to JSON.
     * @function toJSON
     * @memberof FashionQualityCollectInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FashionQualityCollectInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FashionQualityCollectInfo
     * @function getTypeUrl
     * @memberof FashionQualityCollectInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FashionQualityCollectInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FashionQualityCollectInfo";
    };

    return FashionQualityCollectInfo;
})();

$root.RideQualityCollectInfo = (function() {

    /**
     * Properties of a RideQualityCollectInfo.
     * @exports IRideQualityCollectInfo
     * @interface IRideQualityCollectInfo
     * @property {Object.<string,number>|null} [QualityCount] RideQualityCollectInfo QualityCount
     */

    /**
     * Constructs a new RideQualityCollectInfo.
     * @exports RideQualityCollectInfo
     * @classdesc Represents a RideQualityCollectInfo.
     * @implements IRideQualityCollectInfo
     * @constructor
     * @param {IRideQualityCollectInfo=} [properties] Properties to set
     */
    function RideQualityCollectInfo(properties) {
        this.QualityCount = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * RideQualityCollectInfo QualityCount.
     * @member {Object.<string,number>} QualityCount
     * @memberof RideQualityCollectInfo
     * @instance
     */
    RideQualityCollectInfo.prototype.QualityCount = $util.emptyObject;

    /**
     * Creates a new RideQualityCollectInfo instance using the specified properties.
     * @function create
     * @memberof RideQualityCollectInfo
     * @static
     * @param {IRideQualityCollectInfo=} [properties] Properties to set
     * @returns {RideQualityCollectInfo} RideQualityCollectInfo instance
     */
    RideQualityCollectInfo.create = function create(properties) {
        return new RideQualityCollectInfo(properties);
    };

    /**
     * Encodes the specified RideQualityCollectInfo message. Does not implicitly {@link RideQualityCollectInfo.verify|verify} messages.
     * @function encode
     * @memberof RideQualityCollectInfo
     * @static
     * @param {IRideQualityCollectInfo} message RideQualityCollectInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    RideQualityCollectInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.QualityCount != null && Object.hasOwnProperty.call(message, "QualityCount"))
            for (var keys = Object.keys(message.QualityCount), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.QualityCount[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified RideQualityCollectInfo message, length delimited. Does not implicitly {@link RideQualityCollectInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof RideQualityCollectInfo
     * @static
     * @param {IRideQualityCollectInfo} message RideQualityCollectInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    RideQualityCollectInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a RideQualityCollectInfo message from the specified reader or buffer.
     * @function decode
     * @memberof RideQualityCollectInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {RideQualityCollectInfo} RideQualityCollectInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    RideQualityCollectInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RideQualityCollectInfo(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (message.QualityCount === $util.emptyObject)
                        message.QualityCount = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = 0;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = reader.int32();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.QualityCount[key] = value;
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a RideQualityCollectInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof RideQualityCollectInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {RideQualityCollectInfo} RideQualityCollectInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    RideQualityCollectInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a RideQualityCollectInfo message.
     * @function verify
     * @memberof RideQualityCollectInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    RideQualityCollectInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.QualityCount != null && message.hasOwnProperty("QualityCount")) {
            if (!$util.isObject(message.QualityCount))
                return "QualityCount: object expected";
            var key = Object.keys(message.QualityCount);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "QualityCount: integer key{k:int32} expected";
                if (!$util.isInteger(message.QualityCount[key[i]]))
                    return "QualityCount: integer{k:int32} expected";
            }
        }
        return null;
    };

    /**
     * Creates a RideQualityCollectInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof RideQualityCollectInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {RideQualityCollectInfo} RideQualityCollectInfo
     */
    RideQualityCollectInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.RideQualityCollectInfo)
            return object;
        var message = new $root.RideQualityCollectInfo();
        if (object.QualityCount) {
            if (typeof object.QualityCount !== "object")
                throw TypeError(".RideQualityCollectInfo.QualityCount: object expected");
            message.QualityCount = {};
            for (var keys = Object.keys(object.QualityCount), i = 0; i < keys.length; ++i)
                message.QualityCount[keys[i]] = object.QualityCount[keys[i]] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a RideQualityCollectInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof RideQualityCollectInfo
     * @static
     * @param {RideQualityCollectInfo} message RideQualityCollectInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    RideQualityCollectInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.QualityCount = {};
        var keys2;
        if (message.QualityCount && (keys2 = Object.keys(message.QualityCount)).length) {
            object.QualityCount = {};
            for (var j = 0; j < keys2.length; ++j)
                object.QualityCount[keys2[j]] = message.QualityCount[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this RideQualityCollectInfo to JSON.
     * @function toJSON
     * @memberof RideQualityCollectInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    RideQualityCollectInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for RideQualityCollectInfo
     * @function getTypeUrl
     * @memberof RideQualityCollectInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    RideQualityCollectInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/RideQualityCollectInfo";
    };

    return RideQualityCollectInfo;
})();

$root.PersonalZone = (function() {

    /**
     * Properties of a PersonalZone.
     * @exports IPersonalZone
     * @interface IPersonalZone
     * @property {Array.<number>|null} [OnlinePeriods] PersonalZone OnlinePeriods
     * @property {Array.<number>|null} [Tags] PersonalZone Tags
     * @property {Object.<string,number>|null} [Medals] PersonalZone Medals
     * @property {number|null} [ThemeId] PersonalZone ThemeId
     * @property {number|null} [BusinessCardStyleId] PersonalZone BusinessCardStyleId
     * @property {number|null} [AvatarFrameId] PersonalZone AvatarFrameId
     * @property {IActionInfo|null} [ActionInfo] PersonalZone ActionInfo
     * @property {Array.<IEditorUIPosition>|null} [UiPosition] PersonalZone UiPosition
     * @property {number|null} [TitleId] PersonalZone TitleId
     * @property {boolean|null} [FashionRefreshFlag] PersonalZone FashionRefreshFlag
     * @property {number|null} [FashionCollectPoint] PersonalZone FashionCollectPoint
     * @property {Object.<string,IFashionQualityCollectInfo>|null} [FashionCollectQualityCount] PersonalZone FashionCollectQualityCount
     * @property {Array.<number>|null} [Photos] PersonalZone Photos
     * @property {Object.<string,number>|null} [UnlockTargetRecord] PersonalZone UnlockTargetRecord
     * @property {Object.<string,boolean>|null} [UnlockGetRewardRecord] PersonalZone UnlockGetRewardRecord
     * @property {number|null} [RideCollectPoint] PersonalZone RideCollectPoint
     * @property {Object.<string,IRideQualityCollectInfo>|null} [RideCollectQualityCount] PersonalZone RideCollectQualityCount
     * @property {number|null} [WeaponSkinCollectPoint] PersonalZone WeaponSkinCollectPoint
     * @property {Object.<string,number>|null} [PhotosWall] PersonalZone PhotosWall
     */

    /**
     * Constructs a new PersonalZone.
     * @exports PersonalZone
     * @classdesc Represents a PersonalZone.
     * @implements IPersonalZone
     * @constructor
     * @param {IPersonalZone=} [properties] Properties to set
     */
    function PersonalZone(properties) {
        this.OnlinePeriods = [];
        this.Tags = [];
        this.Medals = {};
        this.UiPosition = [];
        this.FashionCollectQualityCount = {};
        this.Photos = [];
        this.UnlockTargetRecord = {};
        this.UnlockGetRewardRecord = {};
        this.RideCollectQualityCount = {};
        this.PhotosWall = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PersonalZone OnlinePeriods.
     * @member {Array.<number>} OnlinePeriods
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.OnlinePeriods = $util.emptyArray;

    /**
     * PersonalZone Tags.
     * @member {Array.<number>} Tags
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.Tags = $util.emptyArray;

    /**
     * PersonalZone Medals.
     * @member {Object.<string,number>} Medals
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.Medals = $util.emptyObject;

    /**
     * PersonalZone ThemeId.
     * @member {number|null|undefined} ThemeId
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.ThemeId = null;

    /**
     * PersonalZone BusinessCardStyleId.
     * @member {number|null|undefined} BusinessCardStyleId
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.BusinessCardStyleId = null;

    /**
     * PersonalZone AvatarFrameId.
     * @member {number|null|undefined} AvatarFrameId
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.AvatarFrameId = null;

    /**
     * PersonalZone ActionInfo.
     * @member {IActionInfo|null|undefined} ActionInfo
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.ActionInfo = null;

    /**
     * PersonalZone UiPosition.
     * @member {Array.<IEditorUIPosition>} UiPosition
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.UiPosition = $util.emptyArray;

    /**
     * PersonalZone TitleId.
     * @member {number|null|undefined} TitleId
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.TitleId = null;

    /**
     * PersonalZone FashionRefreshFlag.
     * @member {boolean|null|undefined} FashionRefreshFlag
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.FashionRefreshFlag = null;

    /**
     * PersonalZone FashionCollectPoint.
     * @member {number|null|undefined} FashionCollectPoint
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.FashionCollectPoint = null;

    /**
     * PersonalZone FashionCollectQualityCount.
     * @member {Object.<string,IFashionQualityCollectInfo>} FashionCollectQualityCount
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.FashionCollectQualityCount = $util.emptyObject;

    /**
     * PersonalZone Photos.
     * @member {Array.<number>} Photos
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.Photos = $util.emptyArray;

    /**
     * PersonalZone UnlockTargetRecord.
     * @member {Object.<string,number>} UnlockTargetRecord
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.UnlockTargetRecord = $util.emptyObject;

    /**
     * PersonalZone UnlockGetRewardRecord.
     * @member {Object.<string,boolean>} UnlockGetRewardRecord
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.UnlockGetRewardRecord = $util.emptyObject;

    /**
     * PersonalZone RideCollectPoint.
     * @member {number|null|undefined} RideCollectPoint
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.RideCollectPoint = null;

    /**
     * PersonalZone RideCollectQualityCount.
     * @member {Object.<string,IRideQualityCollectInfo>} RideCollectQualityCount
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.RideCollectQualityCount = $util.emptyObject;

    /**
     * PersonalZone WeaponSkinCollectPoint.
     * @member {number|null|undefined} WeaponSkinCollectPoint
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.WeaponSkinCollectPoint = null;

    /**
     * PersonalZone PhotosWall.
     * @member {Object.<string,number>} PhotosWall
     * @memberof PersonalZone
     * @instance
     */
    PersonalZone.prototype.PhotosWall = $util.emptyObject;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * PersonalZone _ThemeId.
     * @member {"ThemeId"|undefined} _ThemeId
     * @memberof PersonalZone
     * @instance
     */
    Object.defineProperty(PersonalZone.prototype, "_ThemeId", {
        get: $util.oneOfGetter($oneOfFields = ["ThemeId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PersonalZone _BusinessCardStyleId.
     * @member {"BusinessCardStyleId"|undefined} _BusinessCardStyleId
     * @memberof PersonalZone
     * @instance
     */
    Object.defineProperty(PersonalZone.prototype, "_BusinessCardStyleId", {
        get: $util.oneOfGetter($oneOfFields = ["BusinessCardStyleId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PersonalZone _AvatarFrameId.
     * @member {"AvatarFrameId"|undefined} _AvatarFrameId
     * @memberof PersonalZone
     * @instance
     */
    Object.defineProperty(PersonalZone.prototype, "_AvatarFrameId", {
        get: $util.oneOfGetter($oneOfFields = ["AvatarFrameId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PersonalZone _ActionInfo.
     * @member {"ActionInfo"|undefined} _ActionInfo
     * @memberof PersonalZone
     * @instance
     */
    Object.defineProperty(PersonalZone.prototype, "_ActionInfo", {
        get: $util.oneOfGetter($oneOfFields = ["ActionInfo"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PersonalZone _TitleId.
     * @member {"TitleId"|undefined} _TitleId
     * @memberof PersonalZone
     * @instance
     */
    Object.defineProperty(PersonalZone.prototype, "_TitleId", {
        get: $util.oneOfGetter($oneOfFields = ["TitleId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PersonalZone _FashionRefreshFlag.
     * @member {"FashionRefreshFlag"|undefined} _FashionRefreshFlag
     * @memberof PersonalZone
     * @instance
     */
    Object.defineProperty(PersonalZone.prototype, "_FashionRefreshFlag", {
        get: $util.oneOfGetter($oneOfFields = ["FashionRefreshFlag"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PersonalZone _FashionCollectPoint.
     * @member {"FashionCollectPoint"|undefined} _FashionCollectPoint
     * @memberof PersonalZone
     * @instance
     */
    Object.defineProperty(PersonalZone.prototype, "_FashionCollectPoint", {
        get: $util.oneOfGetter($oneOfFields = ["FashionCollectPoint"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PersonalZone _RideCollectPoint.
     * @member {"RideCollectPoint"|undefined} _RideCollectPoint
     * @memberof PersonalZone
     * @instance
     */
    Object.defineProperty(PersonalZone.prototype, "_RideCollectPoint", {
        get: $util.oneOfGetter($oneOfFields = ["RideCollectPoint"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PersonalZone _WeaponSkinCollectPoint.
     * @member {"WeaponSkinCollectPoint"|undefined} _WeaponSkinCollectPoint
     * @memberof PersonalZone
     * @instance
     */
    Object.defineProperty(PersonalZone.prototype, "_WeaponSkinCollectPoint", {
        get: $util.oneOfGetter($oneOfFields = ["WeaponSkinCollectPoint"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new PersonalZone instance using the specified properties.
     * @function create
     * @memberof PersonalZone
     * @static
     * @param {IPersonalZone=} [properties] Properties to set
     * @returns {PersonalZone} PersonalZone instance
     */
    PersonalZone.create = function create(properties) {
        return new PersonalZone(properties);
    };

    /**
     * Encodes the specified PersonalZone message. Does not implicitly {@link PersonalZone.verify|verify} messages.
     * @function encode
     * @memberof PersonalZone
     * @static
     * @param {IPersonalZone} message PersonalZone message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PersonalZone.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.OnlinePeriods != null && message.OnlinePeriods.length) {
            writer.uint32(/* id 1, wireType 2 =*/10).fork();
            for (var i = 0; i < message.OnlinePeriods.length; ++i)
                writer.int32(message.OnlinePeriods[i]);
            writer.ldelim();
        }
        if (message.Tags != null && message.Tags.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.Tags.length; ++i)
                writer.int32(message.Tags[i]);
            writer.ldelim();
        }
        if (message.Medals != null && Object.hasOwnProperty.call(message, "Medals"))
            for (var keys = Object.keys(message.Medals), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.Medals[keys[i]]).ldelim();
        if (message.ThemeId != null && Object.hasOwnProperty.call(message, "ThemeId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.ThemeId);
        if (message.BusinessCardStyleId != null && Object.hasOwnProperty.call(message, "BusinessCardStyleId"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.BusinessCardStyleId);
        if (message.AvatarFrameId != null && Object.hasOwnProperty.call(message, "AvatarFrameId"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.AvatarFrameId);
        if (message.ActionInfo != null && Object.hasOwnProperty.call(message, "ActionInfo"))
            $root.ActionInfo.encode(message.ActionInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.UiPosition != null && message.UiPosition.length)
            for (var i = 0; i < message.UiPosition.length; ++i)
                $root.EditorUIPosition.encode(message.UiPosition[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.TitleId != null && Object.hasOwnProperty.call(message, "TitleId"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.TitleId);
        if (message.FashionRefreshFlag != null && Object.hasOwnProperty.call(message, "FashionRefreshFlag"))
            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.FashionRefreshFlag);
        if (message.FashionCollectPoint != null && Object.hasOwnProperty.call(message, "FashionCollectPoint"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.FashionCollectPoint);
        if (message.FashionCollectQualityCount != null && Object.hasOwnProperty.call(message, "FashionCollectQualityCount"))
            for (var keys = Object.keys(message.FashionCollectQualityCount), i = 0; i < keys.length; ++i) {
                writer.uint32(/* id 12, wireType 2 =*/98).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]);
                $root.FashionQualityCollectInfo.encode(message.FashionCollectQualityCount[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
            }
        if (message.Photos != null && message.Photos.length) {
            writer.uint32(/* id 13, wireType 2 =*/106).fork();
            for (var i = 0; i < message.Photos.length; ++i)
                writer.int32(message.Photos[i]);
            writer.ldelim();
        }
        if (message.UnlockTargetRecord != null && Object.hasOwnProperty.call(message, "UnlockTargetRecord"))
            for (var keys = Object.keys(message.UnlockTargetRecord), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 14, wireType 2 =*/114).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.UnlockTargetRecord[keys[i]]).ldelim();
        if (message.UnlockGetRewardRecord != null && Object.hasOwnProperty.call(message, "UnlockGetRewardRecord"))
            for (var keys = Object.keys(message.UnlockGetRewardRecord), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 15, wireType 2 =*/122).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).bool(message.UnlockGetRewardRecord[keys[i]]).ldelim();
        if (message.RideCollectPoint != null && Object.hasOwnProperty.call(message, "RideCollectPoint"))
            writer.uint32(/* id 16, wireType 0 =*/128).int32(message.RideCollectPoint);
        if (message.RideCollectQualityCount != null && Object.hasOwnProperty.call(message, "RideCollectQualityCount"))
            for (var keys = Object.keys(message.RideCollectQualityCount), i = 0; i < keys.length; ++i) {
                writer.uint32(/* id 17, wireType 2 =*/138).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]);
                $root.RideQualityCollectInfo.encode(message.RideCollectQualityCount[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
            }
        if (message.WeaponSkinCollectPoint != null && Object.hasOwnProperty.call(message, "WeaponSkinCollectPoint"))
            writer.uint32(/* id 18, wireType 0 =*/144).int32(message.WeaponSkinCollectPoint);
        if (message.PhotosWall != null && Object.hasOwnProperty.call(message, "PhotosWall"))
            for (var keys = Object.keys(message.PhotosWall), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 19, wireType 2 =*/154).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.PhotosWall[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PersonalZone message, length delimited. Does not implicitly {@link PersonalZone.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PersonalZone
     * @static
     * @param {IPersonalZone} message PersonalZone message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PersonalZone.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PersonalZone message from the specified reader or buffer.
     * @function decode
     * @memberof PersonalZone
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PersonalZone} PersonalZone
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PersonalZone.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PersonalZone(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.OnlinePeriods && message.OnlinePeriods.length))
                        message.OnlinePeriods = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.OnlinePeriods.push(reader.int32());
                    } else
                        message.OnlinePeriods.push(reader.int32());
                    break;
                }
            case 2: {
                    if (!(message.Tags && message.Tags.length))
                        message.Tags = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.Tags.push(reader.int32());
                    } else
                        message.Tags.push(reader.int32());
                    break;
                }
            case 3: {
                    if (message.Medals === $util.emptyObject)
                        message.Medals = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = 0;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = reader.int32();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.Medals[key] = value;
                    break;
                }
            case 4: {
                    message.ThemeId = reader.int32();
                    break;
                }
            case 5: {
                    message.BusinessCardStyleId = reader.int32();
                    break;
                }
            case 6: {
                    message.AvatarFrameId = reader.int32();
                    break;
                }
            case 7: {
                    message.ActionInfo = $root.ActionInfo.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    if (!(message.UiPosition && message.UiPosition.length))
                        message.UiPosition = [];
                    message.UiPosition.push($root.EditorUIPosition.decode(reader, reader.uint32()));
                    break;
                }
            case 9: {
                    message.TitleId = reader.int32();
                    break;
                }
            case 10: {
                    message.FashionRefreshFlag = reader.bool();
                    break;
                }
            case 11: {
                    message.FashionCollectPoint = reader.int32();
                    break;
                }
            case 12: {
                    if (message.FashionCollectQualityCount === $util.emptyObject)
                        message.FashionCollectQualityCount = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = null;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = $root.FashionQualityCollectInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.FashionCollectQualityCount[key] = value;
                    break;
                }
            case 13: {
                    if (!(message.Photos && message.Photos.length))
                        message.Photos = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.Photos.push(reader.int32());
                    } else
                        message.Photos.push(reader.int32());
                    break;
                }
            case 14: {
                    if (message.UnlockTargetRecord === $util.emptyObject)
                        message.UnlockTargetRecord = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = 0;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = reader.int32();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.UnlockTargetRecord[key] = value;
                    break;
                }
            case 15: {
                    if (message.UnlockGetRewardRecord === $util.emptyObject)
                        message.UnlockGetRewardRecord = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = false;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = reader.bool();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.UnlockGetRewardRecord[key] = value;
                    break;
                }
            case 16: {
                    message.RideCollectPoint = reader.int32();
                    break;
                }
            case 17: {
                    if (message.RideCollectQualityCount === $util.emptyObject)
                        message.RideCollectQualityCount = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = null;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = $root.RideQualityCollectInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.RideCollectQualityCount[key] = value;
                    break;
                }
            case 18: {
                    message.WeaponSkinCollectPoint = reader.int32();
                    break;
                }
            case 19: {
                    if (message.PhotosWall === $util.emptyObject)
                        message.PhotosWall = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = 0;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = reader.int32();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.PhotosWall[key] = value;
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PersonalZone message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PersonalZone
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PersonalZone} PersonalZone
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PersonalZone.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PersonalZone message.
     * @function verify
     * @memberof PersonalZone
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PersonalZone.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.OnlinePeriods != null && message.hasOwnProperty("OnlinePeriods")) {
            if (!Array.isArray(message.OnlinePeriods))
                return "OnlinePeriods: array expected";
            for (var i = 0; i < message.OnlinePeriods.length; ++i)
                if (!$util.isInteger(message.OnlinePeriods[i]))
                    return "OnlinePeriods: integer[] expected";
        }
        if (message.Tags != null && message.hasOwnProperty("Tags")) {
            if (!Array.isArray(message.Tags))
                return "Tags: array expected";
            for (var i = 0; i < message.Tags.length; ++i)
                if (!$util.isInteger(message.Tags[i]))
                    return "Tags: integer[] expected";
        }
        if (message.Medals != null && message.hasOwnProperty("Medals")) {
            if (!$util.isObject(message.Medals))
                return "Medals: object expected";
            var key = Object.keys(message.Medals);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "Medals: integer key{k:int32} expected";
                if (!$util.isInteger(message.Medals[key[i]]))
                    return "Medals: integer{k:int32} expected";
            }
        }
        if (message.ThemeId != null && message.hasOwnProperty("ThemeId")) {
            properties._ThemeId = 1;
            if (!$util.isInteger(message.ThemeId))
                return "ThemeId: integer expected";
        }
        if (message.BusinessCardStyleId != null && message.hasOwnProperty("BusinessCardStyleId")) {
            properties._BusinessCardStyleId = 1;
            if (!$util.isInteger(message.BusinessCardStyleId))
                return "BusinessCardStyleId: integer expected";
        }
        if (message.AvatarFrameId != null && message.hasOwnProperty("AvatarFrameId")) {
            properties._AvatarFrameId = 1;
            if (!$util.isInteger(message.AvatarFrameId))
                return "AvatarFrameId: integer expected";
        }
        if (message.ActionInfo != null && message.hasOwnProperty("ActionInfo")) {
            properties._ActionInfo = 1;
            {
                var error = $root.ActionInfo.verify(message.ActionInfo);
                if (error)
                    return "ActionInfo." + error;
            }
        }
        if (message.UiPosition != null && message.hasOwnProperty("UiPosition")) {
            if (!Array.isArray(message.UiPosition))
                return "UiPosition: array expected";
            for (var i = 0; i < message.UiPosition.length; ++i) {
                var error = $root.EditorUIPosition.verify(message.UiPosition[i]);
                if (error)
                    return "UiPosition." + error;
            }
        }
        if (message.TitleId != null && message.hasOwnProperty("TitleId")) {
            properties._TitleId = 1;
            if (!$util.isInteger(message.TitleId))
                return "TitleId: integer expected";
        }
        if (message.FashionRefreshFlag != null && message.hasOwnProperty("FashionRefreshFlag")) {
            properties._FashionRefreshFlag = 1;
            if (typeof message.FashionRefreshFlag !== "boolean")
                return "FashionRefreshFlag: boolean expected";
        }
        if (message.FashionCollectPoint != null && message.hasOwnProperty("FashionCollectPoint")) {
            properties._FashionCollectPoint = 1;
            if (!$util.isInteger(message.FashionCollectPoint))
                return "FashionCollectPoint: integer expected";
        }
        if (message.FashionCollectQualityCount != null && message.hasOwnProperty("FashionCollectQualityCount")) {
            if (!$util.isObject(message.FashionCollectQualityCount))
                return "FashionCollectQualityCount: object expected";
            var key = Object.keys(message.FashionCollectQualityCount);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "FashionCollectQualityCount: integer key{k:int32} expected";
                {
                    var error = $root.FashionQualityCollectInfo.verify(message.FashionCollectQualityCount[key[i]]);
                    if (error)
                        return "FashionCollectQualityCount." + error;
                }
            }
        }
        if (message.Photos != null && message.hasOwnProperty("Photos")) {
            if (!Array.isArray(message.Photos))
                return "Photos: array expected";
            for (var i = 0; i < message.Photos.length; ++i)
                if (!$util.isInteger(message.Photos[i]))
                    return "Photos: integer[] expected";
        }
        if (message.UnlockTargetRecord != null && message.hasOwnProperty("UnlockTargetRecord")) {
            if (!$util.isObject(message.UnlockTargetRecord))
                return "UnlockTargetRecord: object expected";
            var key = Object.keys(message.UnlockTargetRecord);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "UnlockTargetRecord: integer key{k:int32} expected";
                if (!$util.isInteger(message.UnlockTargetRecord[key[i]]))
                    return "UnlockTargetRecord: integer{k:int32} expected";
            }
        }
        if (message.UnlockGetRewardRecord != null && message.hasOwnProperty("UnlockGetRewardRecord")) {
            if (!$util.isObject(message.UnlockGetRewardRecord))
                return "UnlockGetRewardRecord: object expected";
            var key = Object.keys(message.UnlockGetRewardRecord);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "UnlockGetRewardRecord: integer key{k:int32} expected";
                if (typeof message.UnlockGetRewardRecord[key[i]] !== "boolean")
                    return "UnlockGetRewardRecord: boolean{k:int32} expected";
            }
        }
        if (message.RideCollectPoint != null && message.hasOwnProperty("RideCollectPoint")) {
            properties._RideCollectPoint = 1;
            if (!$util.isInteger(message.RideCollectPoint))
                return "RideCollectPoint: integer expected";
        }
        if (message.RideCollectQualityCount != null && message.hasOwnProperty("RideCollectQualityCount")) {
            if (!$util.isObject(message.RideCollectQualityCount))
                return "RideCollectQualityCount: object expected";
            var key = Object.keys(message.RideCollectQualityCount);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "RideCollectQualityCount: integer key{k:int32} expected";
                {
                    var error = $root.RideQualityCollectInfo.verify(message.RideCollectQualityCount[key[i]]);
                    if (error)
                        return "RideCollectQualityCount." + error;
                }
            }
        }
        if (message.WeaponSkinCollectPoint != null && message.hasOwnProperty("WeaponSkinCollectPoint")) {
            properties._WeaponSkinCollectPoint = 1;
            if (!$util.isInteger(message.WeaponSkinCollectPoint))
                return "WeaponSkinCollectPoint: integer expected";
        }
        if (message.PhotosWall != null && message.hasOwnProperty("PhotosWall")) {
            if (!$util.isObject(message.PhotosWall))
                return "PhotosWall: object expected";
            var key = Object.keys(message.PhotosWall);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "PhotosWall: integer key{k:int32} expected";
                if (!$util.isInteger(message.PhotosWall[key[i]]))
                    return "PhotosWall: integer{k:int32} expected";
            }
        }
        return null;
    };

    /**
     * Creates a PersonalZone message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PersonalZone
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PersonalZone} PersonalZone
     */
    PersonalZone.fromObject = function fromObject(object) {
        if (object instanceof $root.PersonalZone)
            return object;
        var message = new $root.PersonalZone();
        if (object.OnlinePeriods) {
            if (!Array.isArray(object.OnlinePeriods))
                throw TypeError(".PersonalZone.OnlinePeriods: array expected");
            message.OnlinePeriods = [];
            for (var i = 0; i < object.OnlinePeriods.length; ++i)
                message.OnlinePeriods[i] = object.OnlinePeriods[i] | 0;
        }
        if (object.Tags) {
            if (!Array.isArray(object.Tags))
                throw TypeError(".PersonalZone.Tags: array expected");
            message.Tags = [];
            for (var i = 0; i < object.Tags.length; ++i)
                message.Tags[i] = object.Tags[i] | 0;
        }
        if (object.Medals) {
            if (typeof object.Medals !== "object")
                throw TypeError(".PersonalZone.Medals: object expected");
            message.Medals = {};
            for (var keys = Object.keys(object.Medals), i = 0; i < keys.length; ++i)
                message.Medals[keys[i]] = object.Medals[keys[i]] | 0;
        }
        if (object.ThemeId != null)
            message.ThemeId = object.ThemeId | 0;
        if (object.BusinessCardStyleId != null)
            message.BusinessCardStyleId = object.BusinessCardStyleId | 0;
        if (object.AvatarFrameId != null)
            message.AvatarFrameId = object.AvatarFrameId | 0;
        if (object.ActionInfo != null) {
            if (typeof object.ActionInfo !== "object")
                throw TypeError(".PersonalZone.ActionInfo: object expected");
            message.ActionInfo = $root.ActionInfo.fromObject(object.ActionInfo);
        }
        if (object.UiPosition) {
            if (!Array.isArray(object.UiPosition))
                throw TypeError(".PersonalZone.UiPosition: array expected");
            message.UiPosition = [];
            for (var i = 0; i < object.UiPosition.length; ++i) {
                if (typeof object.UiPosition[i] !== "object")
                    throw TypeError(".PersonalZone.UiPosition: object expected");
                message.UiPosition[i] = $root.EditorUIPosition.fromObject(object.UiPosition[i]);
            }
        }
        if (object.TitleId != null)
            message.TitleId = object.TitleId | 0;
        if (object.FashionRefreshFlag != null)
            message.FashionRefreshFlag = Boolean(object.FashionRefreshFlag);
        if (object.FashionCollectPoint != null)
            message.FashionCollectPoint = object.FashionCollectPoint | 0;
        if (object.FashionCollectQualityCount) {
            if (typeof object.FashionCollectQualityCount !== "object")
                throw TypeError(".PersonalZone.FashionCollectQualityCount: object expected");
            message.FashionCollectQualityCount = {};
            for (var keys = Object.keys(object.FashionCollectQualityCount), i = 0; i < keys.length; ++i) {
                if (typeof object.FashionCollectQualityCount[keys[i]] !== "object")
                    throw TypeError(".PersonalZone.FashionCollectQualityCount: object expected");
                message.FashionCollectQualityCount[keys[i]] = $root.FashionQualityCollectInfo.fromObject(object.FashionCollectQualityCount[keys[i]]);
            }
        }
        if (object.Photos) {
            if (!Array.isArray(object.Photos))
                throw TypeError(".PersonalZone.Photos: array expected");
            message.Photos = [];
            for (var i = 0; i < object.Photos.length; ++i)
                message.Photos[i] = object.Photos[i] | 0;
        }
        if (object.UnlockTargetRecord) {
            if (typeof object.UnlockTargetRecord !== "object")
                throw TypeError(".PersonalZone.UnlockTargetRecord: object expected");
            message.UnlockTargetRecord = {};
            for (var keys = Object.keys(object.UnlockTargetRecord), i = 0; i < keys.length; ++i)
                message.UnlockTargetRecord[keys[i]] = object.UnlockTargetRecord[keys[i]] | 0;
        }
        if (object.UnlockGetRewardRecord) {
            if (typeof object.UnlockGetRewardRecord !== "object")
                throw TypeError(".PersonalZone.UnlockGetRewardRecord: object expected");
            message.UnlockGetRewardRecord = {};
            for (var keys = Object.keys(object.UnlockGetRewardRecord), i = 0; i < keys.length; ++i)
                message.UnlockGetRewardRecord[keys[i]] = Boolean(object.UnlockGetRewardRecord[keys[i]]);
        }
        if (object.RideCollectPoint != null)
            message.RideCollectPoint = object.RideCollectPoint | 0;
        if (object.RideCollectQualityCount) {
            if (typeof object.RideCollectQualityCount !== "object")
                throw TypeError(".PersonalZone.RideCollectQualityCount: object expected");
            message.RideCollectQualityCount = {};
            for (var keys = Object.keys(object.RideCollectQualityCount), i = 0; i < keys.length; ++i) {
                if (typeof object.RideCollectQualityCount[keys[i]] !== "object")
                    throw TypeError(".PersonalZone.RideCollectQualityCount: object expected");
                message.RideCollectQualityCount[keys[i]] = $root.RideQualityCollectInfo.fromObject(object.RideCollectQualityCount[keys[i]]);
            }
        }
        if (object.WeaponSkinCollectPoint != null)
            message.WeaponSkinCollectPoint = object.WeaponSkinCollectPoint | 0;
        if (object.PhotosWall) {
            if (typeof object.PhotosWall !== "object")
                throw TypeError(".PersonalZone.PhotosWall: object expected");
            message.PhotosWall = {};
            for (var keys = Object.keys(object.PhotosWall), i = 0; i < keys.length; ++i)
                message.PhotosWall[keys[i]] = object.PhotosWall[keys[i]] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a PersonalZone message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PersonalZone
     * @static
     * @param {PersonalZone} message PersonalZone
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PersonalZone.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.OnlinePeriods = [];
            object.Tags = [];
            object.UiPosition = [];
            object.Photos = [];
        }
        if (options.objects || options.defaults) {
            object.Medals = {};
            object.FashionCollectQualityCount = {};
            object.UnlockTargetRecord = {};
            object.UnlockGetRewardRecord = {};
            object.RideCollectQualityCount = {};
            object.PhotosWall = {};
        }
        if (message.OnlinePeriods && message.OnlinePeriods.length) {
            object.OnlinePeriods = [];
            for (var j = 0; j < message.OnlinePeriods.length; ++j)
                object.OnlinePeriods[j] = message.OnlinePeriods[j];
        }
        if (message.Tags && message.Tags.length) {
            object.Tags = [];
            for (var j = 0; j < message.Tags.length; ++j)
                object.Tags[j] = message.Tags[j];
        }
        var keys2;
        if (message.Medals && (keys2 = Object.keys(message.Medals)).length) {
            object.Medals = {};
            for (var j = 0; j < keys2.length; ++j)
                object.Medals[keys2[j]] = message.Medals[keys2[j]];
        }
        if (message.ThemeId != null && message.hasOwnProperty("ThemeId")) {
            object.ThemeId = message.ThemeId;
            if (options.oneofs)
                object._ThemeId = "ThemeId";
        }
        if (message.BusinessCardStyleId != null && message.hasOwnProperty("BusinessCardStyleId")) {
            object.BusinessCardStyleId = message.BusinessCardStyleId;
            if (options.oneofs)
                object._BusinessCardStyleId = "BusinessCardStyleId";
        }
        if (message.AvatarFrameId != null && message.hasOwnProperty("AvatarFrameId")) {
            object.AvatarFrameId = message.AvatarFrameId;
            if (options.oneofs)
                object._AvatarFrameId = "AvatarFrameId";
        }
        if (message.ActionInfo != null && message.hasOwnProperty("ActionInfo")) {
            object.ActionInfo = $root.ActionInfo.toObject(message.ActionInfo, options);
            if (options.oneofs)
                object._ActionInfo = "ActionInfo";
        }
        if (message.UiPosition && message.UiPosition.length) {
            object.UiPosition = [];
            for (var j = 0; j < message.UiPosition.length; ++j)
                object.UiPosition[j] = $root.EditorUIPosition.toObject(message.UiPosition[j], options);
        }
        if (message.TitleId != null && message.hasOwnProperty("TitleId")) {
            object.TitleId = message.TitleId;
            if (options.oneofs)
                object._TitleId = "TitleId";
        }
        if (message.FashionRefreshFlag != null && message.hasOwnProperty("FashionRefreshFlag")) {
            object.FashionRefreshFlag = message.FashionRefreshFlag;
            if (options.oneofs)
                object._FashionRefreshFlag = "FashionRefreshFlag";
        }
        if (message.FashionCollectPoint != null && message.hasOwnProperty("FashionCollectPoint")) {
            object.FashionCollectPoint = message.FashionCollectPoint;
            if (options.oneofs)
                object._FashionCollectPoint = "FashionCollectPoint";
        }
        if (message.FashionCollectQualityCount && (keys2 = Object.keys(message.FashionCollectQualityCount)).length) {
            object.FashionCollectQualityCount = {};
            for (var j = 0; j < keys2.length; ++j)
                object.FashionCollectQualityCount[keys2[j]] = $root.FashionQualityCollectInfo.toObject(message.FashionCollectQualityCount[keys2[j]], options);
        }
        if (message.Photos && message.Photos.length) {
            object.Photos = [];
            for (var j = 0; j < message.Photos.length; ++j)
                object.Photos[j] = message.Photos[j];
        }
        if (message.UnlockTargetRecord && (keys2 = Object.keys(message.UnlockTargetRecord)).length) {
            object.UnlockTargetRecord = {};
            for (var j = 0; j < keys2.length; ++j)
                object.UnlockTargetRecord[keys2[j]] = message.UnlockTargetRecord[keys2[j]];
        }
        if (message.UnlockGetRewardRecord && (keys2 = Object.keys(message.UnlockGetRewardRecord)).length) {
            object.UnlockGetRewardRecord = {};
            for (var j = 0; j < keys2.length; ++j)
                object.UnlockGetRewardRecord[keys2[j]] = message.UnlockGetRewardRecord[keys2[j]];
        }
        if (message.RideCollectPoint != null && message.hasOwnProperty("RideCollectPoint")) {
            object.RideCollectPoint = message.RideCollectPoint;
            if (options.oneofs)
                object._RideCollectPoint = "RideCollectPoint";
        }
        if (message.RideCollectQualityCount && (keys2 = Object.keys(message.RideCollectQualityCount)).length) {
            object.RideCollectQualityCount = {};
            for (var j = 0; j < keys2.length; ++j)
                object.RideCollectQualityCount[keys2[j]] = $root.RideQualityCollectInfo.toObject(message.RideCollectQualityCount[keys2[j]], options);
        }
        if (message.WeaponSkinCollectPoint != null && message.hasOwnProperty("WeaponSkinCollectPoint")) {
            object.WeaponSkinCollectPoint = message.WeaponSkinCollectPoint;
            if (options.oneofs)
                object._WeaponSkinCollectPoint = "WeaponSkinCollectPoint";
        }
        if (message.PhotosWall && (keys2 = Object.keys(message.PhotosWall)).length) {
            object.PhotosWall = {};
            for (var j = 0; j < keys2.length; ++j)
                object.PhotosWall[keys2[j]] = message.PhotosWall[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this PersonalZone to JSON.
     * @function toJSON
     * @memberof PersonalZone
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PersonalZone.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PersonalZone
     * @function getTypeUrl
     * @memberof PersonalZone
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PersonalZone.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PersonalZone";
    };

    return PersonalZone;
})();

$root.WarehouseData = (function() {

    /**
     * Properties of a WarehouseData.
     * @exports IWarehouseData
     * @interface IWarehouseData
     * @property {number|Long|null} [WarehouseId] WarehouseData WarehouseId
     */

    /**
     * Constructs a new WarehouseData.
     * @exports WarehouseData
     * @classdesc Represents a WarehouseData.
     * @implements IWarehouseData
     * @constructor
     * @param {IWarehouseData=} [properties] Properties to set
     */
    function WarehouseData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * WarehouseData WarehouseId.
     * @member {number|Long|null|undefined} WarehouseId
     * @memberof WarehouseData
     * @instance
     */
    WarehouseData.prototype.WarehouseId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * WarehouseData _WarehouseId.
     * @member {"WarehouseId"|undefined} _WarehouseId
     * @memberof WarehouseData
     * @instance
     */
    Object.defineProperty(WarehouseData.prototype, "_WarehouseId", {
        get: $util.oneOfGetter($oneOfFields = ["WarehouseId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new WarehouseData instance using the specified properties.
     * @function create
     * @memberof WarehouseData
     * @static
     * @param {IWarehouseData=} [properties] Properties to set
     * @returns {WarehouseData} WarehouseData instance
     */
    WarehouseData.create = function create(properties) {
        return new WarehouseData(properties);
    };

    /**
     * Encodes the specified WarehouseData message. Does not implicitly {@link WarehouseData.verify|verify} messages.
     * @function encode
     * @memberof WarehouseData
     * @static
     * @param {IWarehouseData} message WarehouseData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    WarehouseData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.WarehouseId != null && Object.hasOwnProperty.call(message, "WarehouseId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.WarehouseId);
        return writer;
    };

    /**
     * Encodes the specified WarehouseData message, length delimited. Does not implicitly {@link WarehouseData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof WarehouseData
     * @static
     * @param {IWarehouseData} message WarehouseData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    WarehouseData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a WarehouseData message from the specified reader or buffer.
     * @function decode
     * @memberof WarehouseData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {WarehouseData} WarehouseData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    WarehouseData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WarehouseData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.WarehouseId = reader.int64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a WarehouseData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof WarehouseData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {WarehouseData} WarehouseData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    WarehouseData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a WarehouseData message.
     * @function verify
     * @memberof WarehouseData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    WarehouseData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.WarehouseId != null && message.hasOwnProperty("WarehouseId")) {
            properties._WarehouseId = 1;
            if (!$util.isInteger(message.WarehouseId) && !(message.WarehouseId && $util.isInteger(message.WarehouseId.low) && $util.isInteger(message.WarehouseId.high)))
                return "WarehouseId: integer|Long expected";
        }
        return null;
    };

    /**
     * Creates a WarehouseData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof WarehouseData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {WarehouseData} WarehouseData
     */
    WarehouseData.fromObject = function fromObject(object) {
        if (object instanceof $root.WarehouseData)
            return object;
        var message = new $root.WarehouseData();
        if (object.WarehouseId != null)
            if ($util.Long)
                (message.WarehouseId = $util.Long.fromValue(object.WarehouseId)).unsigned = false;
            else if (typeof object.WarehouseId === "string")
                message.WarehouseId = parseInt(object.WarehouseId, 10);
            else if (typeof object.WarehouseId === "number")
                message.WarehouseId = object.WarehouseId;
            else if (typeof object.WarehouseId === "object")
                message.WarehouseId = new $util.LongBits(object.WarehouseId.low >>> 0, object.WarehouseId.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a WarehouseData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof WarehouseData
     * @static
     * @param {WarehouseData} message WarehouseData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    WarehouseData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.WarehouseId != null && message.hasOwnProperty("WarehouseId")) {
            if (typeof message.WarehouseId === "number")
                object.WarehouseId = options.longs === String ? String(message.WarehouseId) : message.WarehouseId;
            else
                object.WarehouseId = options.longs === String ? $util.Long.prototype.toString.call(message.WarehouseId) : options.longs === Number ? new $util.LongBits(message.WarehouseId.low >>> 0, message.WarehouseId.high >>> 0).toNumber() : message.WarehouseId;
            if (options.oneofs)
                object._WarehouseId = "WarehouseId";
        }
        return object;
    };

    /**
     * Converts this WarehouseData to JSON.
     * @function toJSON
     * @memberof WarehouseData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    WarehouseData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for WarehouseData
     * @function getTypeUrl
     * @memberof WarehouseData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    WarehouseData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/WarehouseData";
    };

    return WarehouseData;
})();

$root.SeasonRankData = (function() {

    /**
     * Properties of a SeasonRankData.
     * @exports ISeasonRankData
     * @interface ISeasonRankData
     * @property {Object.<string,number>|null} [SeasonRanks] SeasonRankData SeasonRanks
     */

    /**
     * Constructs a new SeasonRankData.
     * @exports SeasonRankData
     * @classdesc Represents a SeasonRankData.
     * @implements ISeasonRankData
     * @constructor
     * @param {ISeasonRankData=} [properties] Properties to set
     */
    function SeasonRankData(properties) {
        this.SeasonRanks = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SeasonRankData SeasonRanks.
     * @member {Object.<string,number>} SeasonRanks
     * @memberof SeasonRankData
     * @instance
     */
    SeasonRankData.prototype.SeasonRanks = $util.emptyObject;

    /**
     * Creates a new SeasonRankData instance using the specified properties.
     * @function create
     * @memberof SeasonRankData
     * @static
     * @param {ISeasonRankData=} [properties] Properties to set
     * @returns {SeasonRankData} SeasonRankData instance
     */
    SeasonRankData.create = function create(properties) {
        return new SeasonRankData(properties);
    };

    /**
     * Encodes the specified SeasonRankData message. Does not implicitly {@link SeasonRankData.verify|verify} messages.
     * @function encode
     * @memberof SeasonRankData
     * @static
     * @param {ISeasonRankData} message SeasonRankData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SeasonRankData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.SeasonRanks != null && Object.hasOwnProperty.call(message, "SeasonRanks"))
            for (var keys = Object.keys(message.SeasonRanks), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).uint32(keys[i]).uint32(/* id 2, wireType 0 =*/16).uint32(message.SeasonRanks[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SeasonRankData message, length delimited. Does not implicitly {@link SeasonRankData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SeasonRankData
     * @static
     * @param {ISeasonRankData} message SeasonRankData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SeasonRankData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SeasonRankData message from the specified reader or buffer.
     * @function decode
     * @memberof SeasonRankData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SeasonRankData} SeasonRankData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SeasonRankData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SeasonRankData(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (message.SeasonRanks === $util.emptyObject)
                        message.SeasonRanks = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = 0;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.uint32();
                            break;
                        case 2:
                            value = reader.uint32();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.SeasonRanks[key] = value;
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SeasonRankData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SeasonRankData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SeasonRankData} SeasonRankData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SeasonRankData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SeasonRankData message.
     * @function verify
     * @memberof SeasonRankData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SeasonRankData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.SeasonRanks != null && message.hasOwnProperty("SeasonRanks")) {
            if (!$util.isObject(message.SeasonRanks))
                return "SeasonRanks: object expected";
            var key = Object.keys(message.SeasonRanks);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "SeasonRanks: integer key{k:uint32} expected";
                if (!$util.isInteger(message.SeasonRanks[key[i]]))
                    return "SeasonRanks: integer{k:uint32} expected";
            }
        }
        return null;
    };

    /**
     * Creates a SeasonRankData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SeasonRankData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SeasonRankData} SeasonRankData
     */
    SeasonRankData.fromObject = function fromObject(object) {
        if (object instanceof $root.SeasonRankData)
            return object;
        var message = new $root.SeasonRankData();
        if (object.SeasonRanks) {
            if (typeof object.SeasonRanks !== "object")
                throw TypeError(".SeasonRankData.SeasonRanks: object expected");
            message.SeasonRanks = {};
            for (var keys = Object.keys(object.SeasonRanks), i = 0; i < keys.length; ++i)
                message.SeasonRanks[keys[i]] = object.SeasonRanks[keys[i]] >>> 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a SeasonRankData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SeasonRankData
     * @static
     * @param {SeasonRankData} message SeasonRankData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SeasonRankData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.SeasonRanks = {};
        var keys2;
        if (message.SeasonRanks && (keys2 = Object.keys(message.SeasonRanks)).length) {
            object.SeasonRanks = {};
            for (var j = 0; j < keys2.length; ++j)
                object.SeasonRanks[keys2[j]] = message.SeasonRanks[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this SeasonRankData to JSON.
     * @function toJSON
     * @memberof SeasonRankData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SeasonRankData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SeasonRankData
     * @function getTypeUrl
     * @memberof SeasonRankData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SeasonRankData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SeasonRankData";
    };

    return SeasonRankData;
})();

$root.FishRecord = (function() {

    /**
     * Properties of a FishRecord.
     * @exports IFishRecord
     * @interface IFishRecord
     * @property {number|null} [FishId] FishRecord FishId
     * @property {boolean|null} [FirstFlag] FishRecord FirstFlag
     * @property {number|null} [Size] FishRecord Size
     * @property {number|Long|null} [Millisecond] FishRecord Millisecond
     * @property {number|null} [Research] FishRecord Research
     * @property {number|null} [Count] FishRecord Count
     * @property {number|null} [MinSize] FishRecord MinSize
     * @property {number|Long|null} [MinSizemillisecond] FishRecord MinSizemillisecond
     * @property {Object.<string,number|Long>|null} [StarCnts] FishRecord StarCnts
     */

    /**
     * Constructs a new FishRecord.
     * @exports FishRecord
     * @classdesc Represents a FishRecord.
     * @implements IFishRecord
     * @constructor
     * @param {IFishRecord=} [properties] Properties to set
     */
    function FishRecord(properties) {
        this.StarCnts = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FishRecord FishId.
     * @member {number|null|undefined} FishId
     * @memberof FishRecord
     * @instance
     */
    FishRecord.prototype.FishId = null;

    /**
     * FishRecord FirstFlag.
     * @member {boolean|null|undefined} FirstFlag
     * @memberof FishRecord
     * @instance
     */
    FishRecord.prototype.FirstFlag = null;

    /**
     * FishRecord Size.
     * @member {number|null|undefined} Size
     * @memberof FishRecord
     * @instance
     */
    FishRecord.prototype.Size = null;

    /**
     * FishRecord Millisecond.
     * @member {number|Long|null|undefined} Millisecond
     * @memberof FishRecord
     * @instance
     */
    FishRecord.prototype.Millisecond = null;

    /**
     * FishRecord Research.
     * @member {number|null|undefined} Research
     * @memberof FishRecord
     * @instance
     */
    FishRecord.prototype.Research = null;

    /**
     * FishRecord Count.
     * @member {number|null|undefined} Count
     * @memberof FishRecord
     * @instance
     */
    FishRecord.prototype.Count = null;

    /**
     * FishRecord MinSize.
     * @member {number|null|undefined} MinSize
     * @memberof FishRecord
     * @instance
     */
    FishRecord.prototype.MinSize = null;

    /**
     * FishRecord MinSizemillisecond.
     * @member {number|Long|null|undefined} MinSizemillisecond
     * @memberof FishRecord
     * @instance
     */
    FishRecord.prototype.MinSizemillisecond = null;

    /**
     * FishRecord StarCnts.
     * @member {Object.<string,number|Long>} StarCnts
     * @memberof FishRecord
     * @instance
     */
    FishRecord.prototype.StarCnts = $util.emptyObject;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * FishRecord _FishId.
     * @member {"FishId"|undefined} _FishId
     * @memberof FishRecord
     * @instance
     */
    Object.defineProperty(FishRecord.prototype, "_FishId", {
        get: $util.oneOfGetter($oneOfFields = ["FishId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FishRecord _FirstFlag.
     * @member {"FirstFlag"|undefined} _FirstFlag
     * @memberof FishRecord
     * @instance
     */
    Object.defineProperty(FishRecord.prototype, "_FirstFlag", {
        get: $util.oneOfGetter($oneOfFields = ["FirstFlag"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FishRecord _Size.
     * @member {"Size"|undefined} _Size
     * @memberof FishRecord
     * @instance
     */
    Object.defineProperty(FishRecord.prototype, "_Size", {
        get: $util.oneOfGetter($oneOfFields = ["Size"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FishRecord _Millisecond.
     * @member {"Millisecond"|undefined} _Millisecond
     * @memberof FishRecord
     * @instance
     */
    Object.defineProperty(FishRecord.prototype, "_Millisecond", {
        get: $util.oneOfGetter($oneOfFields = ["Millisecond"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FishRecord _Research.
     * @member {"Research"|undefined} _Research
     * @memberof FishRecord
     * @instance
     */
    Object.defineProperty(FishRecord.prototype, "_Research", {
        get: $util.oneOfGetter($oneOfFields = ["Research"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FishRecord _Count.
     * @member {"Count"|undefined} _Count
     * @memberof FishRecord
     * @instance
     */
    Object.defineProperty(FishRecord.prototype, "_Count", {
        get: $util.oneOfGetter($oneOfFields = ["Count"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FishRecord _MinSize.
     * @member {"MinSize"|undefined} _MinSize
     * @memberof FishRecord
     * @instance
     */
    Object.defineProperty(FishRecord.prototype, "_MinSize", {
        get: $util.oneOfGetter($oneOfFields = ["MinSize"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FishRecord _MinSizemillisecond.
     * @member {"MinSizemillisecond"|undefined} _MinSizemillisecond
     * @memberof FishRecord
     * @instance
     */
    Object.defineProperty(FishRecord.prototype, "_MinSizemillisecond", {
        get: $util.oneOfGetter($oneOfFields = ["MinSizemillisecond"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new FishRecord instance using the specified properties.
     * @function create
     * @memberof FishRecord
     * @static
     * @param {IFishRecord=} [properties] Properties to set
     * @returns {FishRecord} FishRecord instance
     */
    FishRecord.create = function create(properties) {
        return new FishRecord(properties);
    };

    /**
     * Encodes the specified FishRecord message. Does not implicitly {@link FishRecord.verify|verify} messages.
     * @function encode
     * @memberof FishRecord
     * @static
     * @param {IFishRecord} message FishRecord message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FishRecord.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.FishId != null && Object.hasOwnProperty.call(message, "FishId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.FishId);
        if (message.FirstFlag != null && Object.hasOwnProperty.call(message, "FirstFlag"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.FirstFlag);
        if (message.Size != null && Object.hasOwnProperty.call(message, "Size"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Size);
        if (message.Millisecond != null && Object.hasOwnProperty.call(message, "Millisecond"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.Millisecond);
        if (message.Research != null && Object.hasOwnProperty.call(message, "Research"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.Research);
        if (message.Count != null && Object.hasOwnProperty.call(message, "Count"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.Count);
        if (message.MinSize != null && Object.hasOwnProperty.call(message, "MinSize"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.MinSize);
        if (message.MinSizemillisecond != null && Object.hasOwnProperty.call(message, "MinSizemillisecond"))
            writer.uint32(/* id 8, wireType 0 =*/64).int64(message.MinSizemillisecond);
        if (message.StarCnts != null && Object.hasOwnProperty.call(message, "StarCnts"))
            for (var keys = Object.keys(message.StarCnts), i = 0; i < keys.length; ++i)
                writer.uint32(/* id 9, wireType 2 =*/74).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int64(message.StarCnts[keys[i]]).ldelim();
        return writer;
    };

    /**
     * Encodes the specified FishRecord message, length delimited. Does not implicitly {@link FishRecord.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FishRecord
     * @static
     * @param {IFishRecord} message FishRecord message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FishRecord.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FishRecord message from the specified reader or buffer.
     * @function decode
     * @memberof FishRecord
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FishRecord} FishRecord
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FishRecord.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FishRecord(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.FishId = reader.int32();
                    break;
                }
            case 2: {
                    message.FirstFlag = reader.bool();
                    break;
                }
            case 3: {
                    message.Size = reader.int32();
                    break;
                }
            case 4: {
                    message.Millisecond = reader.int64();
                    break;
                }
            case 5: {
                    message.Research = reader.int32();
                    break;
                }
            case 6: {
                    message.Count = reader.uint32();
                    break;
                }
            case 7: {
                    message.MinSize = reader.int32();
                    break;
                }
            case 8: {
                    message.MinSizemillisecond = reader.int64();
                    break;
                }
            case 9: {
                    if (message.StarCnts === $util.emptyObject)
                        message.StarCnts = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = 0;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = reader.int64();
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.StarCnts[key] = value;
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FishRecord message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FishRecord
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FishRecord} FishRecord
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FishRecord.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FishRecord message.
     * @function verify
     * @memberof FishRecord
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FishRecord.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.FishId != null && message.hasOwnProperty("FishId")) {
            properties._FishId = 1;
            if (!$util.isInteger(message.FishId))
                return "FishId: integer expected";
        }
        if (message.FirstFlag != null && message.hasOwnProperty("FirstFlag")) {
            properties._FirstFlag = 1;
            if (typeof message.FirstFlag !== "boolean")
                return "FirstFlag: boolean expected";
        }
        if (message.Size != null && message.hasOwnProperty("Size")) {
            properties._Size = 1;
            if (!$util.isInteger(message.Size))
                return "Size: integer expected";
        }
        if (message.Millisecond != null && message.hasOwnProperty("Millisecond")) {
            properties._Millisecond = 1;
            if (!$util.isInteger(message.Millisecond) && !(message.Millisecond && $util.isInteger(message.Millisecond.low) && $util.isInteger(message.Millisecond.high)))
                return "Millisecond: integer|Long expected";
        }
        if (message.Research != null && message.hasOwnProperty("Research")) {
            properties._Research = 1;
            if (!$util.isInteger(message.Research))
                return "Research: integer expected";
        }
        if (message.Count != null && message.hasOwnProperty("Count")) {
            properties._Count = 1;
            if (!$util.isInteger(message.Count))
                return "Count: integer expected";
        }
        if (message.MinSize != null && message.hasOwnProperty("MinSize")) {
            properties._MinSize = 1;
            if (!$util.isInteger(message.MinSize))
                return "MinSize: integer expected";
        }
        if (message.MinSizemillisecond != null && message.hasOwnProperty("MinSizemillisecond")) {
            properties._MinSizemillisecond = 1;
            if (!$util.isInteger(message.MinSizemillisecond) && !(message.MinSizemillisecond && $util.isInteger(message.MinSizemillisecond.low) && $util.isInteger(message.MinSizemillisecond.high)))
                return "MinSizemillisecond: integer|Long expected";
        }
        if (message.StarCnts != null && message.hasOwnProperty("StarCnts")) {
            if (!$util.isObject(message.StarCnts))
                return "StarCnts: object expected";
            var key = Object.keys(message.StarCnts);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "StarCnts: integer key{k:int32} expected";
                if (!$util.isInteger(message.StarCnts[key[i]]) && !(message.StarCnts[key[i]] && $util.isInteger(message.StarCnts[key[i]].low) && $util.isInteger(message.StarCnts[key[i]].high)))
                    return "StarCnts: integer|Long{k:int32} expected";
            }
        }
        return null;
    };

    /**
     * Creates a FishRecord message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FishRecord
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FishRecord} FishRecord
     */
    FishRecord.fromObject = function fromObject(object) {
        if (object instanceof $root.FishRecord)
            return object;
        var message = new $root.FishRecord();
        if (object.FishId != null)
            message.FishId = object.FishId | 0;
        if (object.FirstFlag != null)
            message.FirstFlag = Boolean(object.FirstFlag);
        if (object.Size != null)
            message.Size = object.Size | 0;
        if (object.Millisecond != null)
            if ($util.Long)
                (message.Millisecond = $util.Long.fromValue(object.Millisecond)).unsigned = false;
            else if (typeof object.Millisecond === "string")
                message.Millisecond = parseInt(object.Millisecond, 10);
            else if (typeof object.Millisecond === "number")
                message.Millisecond = object.Millisecond;
            else if (typeof object.Millisecond === "object")
                message.Millisecond = new $util.LongBits(object.Millisecond.low >>> 0, object.Millisecond.high >>> 0).toNumber();
        if (object.Research != null)
            message.Research = object.Research | 0;
        if (object.Count != null)
            message.Count = object.Count >>> 0;
        if (object.MinSize != null)
            message.MinSize = object.MinSize | 0;
        if (object.MinSizemillisecond != null)
            if ($util.Long)
                (message.MinSizemillisecond = $util.Long.fromValue(object.MinSizemillisecond)).unsigned = false;
            else if (typeof object.MinSizemillisecond === "string")
                message.MinSizemillisecond = parseInt(object.MinSizemillisecond, 10);
            else if (typeof object.MinSizemillisecond === "number")
                message.MinSizemillisecond = object.MinSizemillisecond;
            else if (typeof object.MinSizemillisecond === "object")
                message.MinSizemillisecond = new $util.LongBits(object.MinSizemillisecond.low >>> 0, object.MinSizemillisecond.high >>> 0).toNumber();
        if (object.StarCnts) {
            if (typeof object.StarCnts !== "object")
                throw TypeError(".FishRecord.StarCnts: object expected");
            message.StarCnts = {};
            for (var keys = Object.keys(object.StarCnts), i = 0; i < keys.length; ++i)
                if ($util.Long)
                    (message.StarCnts[keys[i]] = $util.Long.fromValue(object.StarCnts[keys[i]])).unsigned = false;
                else if (typeof object.StarCnts[keys[i]] === "string")
                    message.StarCnts[keys[i]] = parseInt(object.StarCnts[keys[i]], 10);
                else if (typeof object.StarCnts[keys[i]] === "number")
                    message.StarCnts[keys[i]] = object.StarCnts[keys[i]];
                else if (typeof object.StarCnts[keys[i]] === "object")
                    message.StarCnts[keys[i]] = new $util.LongBits(object.StarCnts[keys[i]].low >>> 0, object.StarCnts[keys[i]].high >>> 0).toNumber();
        }
        return message;
    };

    /**
     * Creates a plain object from a FishRecord message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FishRecord
     * @static
     * @param {FishRecord} message FishRecord
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FishRecord.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.StarCnts = {};
        if (message.FishId != null && message.hasOwnProperty("FishId")) {
            object.FishId = message.FishId;
            if (options.oneofs)
                object._FishId = "FishId";
        }
        if (message.FirstFlag != null && message.hasOwnProperty("FirstFlag")) {
            object.FirstFlag = message.FirstFlag;
            if (options.oneofs)
                object._FirstFlag = "FirstFlag";
        }
        if (message.Size != null && message.hasOwnProperty("Size")) {
            object.Size = message.Size;
            if (options.oneofs)
                object._Size = "Size";
        }
        if (message.Millisecond != null && message.hasOwnProperty("Millisecond")) {
            if (typeof message.Millisecond === "number")
                object.Millisecond = options.longs === String ? String(message.Millisecond) : message.Millisecond;
            else
                object.Millisecond = options.longs === String ? $util.Long.prototype.toString.call(message.Millisecond) : options.longs === Number ? new $util.LongBits(message.Millisecond.low >>> 0, message.Millisecond.high >>> 0).toNumber() : message.Millisecond;
            if (options.oneofs)
                object._Millisecond = "Millisecond";
        }
        if (message.Research != null && message.hasOwnProperty("Research")) {
            object.Research = message.Research;
            if (options.oneofs)
                object._Research = "Research";
        }
        if (message.Count != null && message.hasOwnProperty("Count")) {
            object.Count = message.Count;
            if (options.oneofs)
                object._Count = "Count";
        }
        if (message.MinSize != null && message.hasOwnProperty("MinSize")) {
            object.MinSize = message.MinSize;
            if (options.oneofs)
                object._MinSize = "MinSize";
        }
        if (message.MinSizemillisecond != null && message.hasOwnProperty("MinSizemillisecond")) {
            if (typeof message.MinSizemillisecond === "number")
                object.MinSizemillisecond = options.longs === String ? String(message.MinSizemillisecond) : message.MinSizemillisecond;
            else
                object.MinSizemillisecond = options.longs === String ? $util.Long.prototype.toString.call(message.MinSizemillisecond) : options.longs === Number ? new $util.LongBits(message.MinSizemillisecond.low >>> 0, message.MinSizemillisecond.high >>> 0).toNumber() : message.MinSizemillisecond;
            if (options.oneofs)
                object._MinSizemillisecond = "MinSizemillisecond";
        }
        var keys2;
        if (message.StarCnts && (keys2 = Object.keys(message.StarCnts)).length) {
            object.StarCnts = {};
            for (var j = 0; j < keys2.length; ++j)
                if (typeof message.StarCnts[keys2[j]] === "number")
                    object.StarCnts[keys2[j]] = options.longs === String ? String(message.StarCnts[keys2[j]]) : message.StarCnts[keys2[j]];
                else
                    object.StarCnts[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.StarCnts[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.StarCnts[keys2[j]].low >>> 0, message.StarCnts[keys2[j]].high >>> 0).toNumber() : message.StarCnts[keys2[j]];
        }
        return object;
    };

    /**
     * Converts this FishRecord to JSON.
     * @function toJSON
     * @memberof FishRecord
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FishRecord.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FishRecord
     * @function getTypeUrl
     * @memberof FishRecord
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FishRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FishRecord";
    };

    return FishRecord;
})();

$root.FishSocialData = (function() {

    /**
     * Properties of a FishSocialData.
     * @exports IFishSocialData
     * @interface IFishSocialData
     * @property {Object.<string,IFishRecord>|null} [FishRecords] FishSocialData FishRecords
     */

    /**
     * Constructs a new FishSocialData.
     * @exports FishSocialData
     * @classdesc Represents a FishSocialData.
     * @implements IFishSocialData
     * @constructor
     * @param {IFishSocialData=} [properties] Properties to set
     */
    function FishSocialData(properties) {
        this.FishRecords = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FishSocialData FishRecords.
     * @member {Object.<string,IFishRecord>} FishRecords
     * @memberof FishSocialData
     * @instance
     */
    FishSocialData.prototype.FishRecords = $util.emptyObject;

    /**
     * Creates a new FishSocialData instance using the specified properties.
     * @function create
     * @memberof FishSocialData
     * @static
     * @param {IFishSocialData=} [properties] Properties to set
     * @returns {FishSocialData} FishSocialData instance
     */
    FishSocialData.create = function create(properties) {
        return new FishSocialData(properties);
    };

    /**
     * Encodes the specified FishSocialData message. Does not implicitly {@link FishSocialData.verify|verify} messages.
     * @function encode
     * @memberof FishSocialData
     * @static
     * @param {IFishSocialData} message FishSocialData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FishSocialData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.FishRecords != null && Object.hasOwnProperty.call(message, "FishRecords"))
            for (var keys = Object.keys(message.FishRecords), i = 0; i < keys.length; ++i) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]);
                $root.FishRecord.encode(message.FishRecords[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
            }
        return writer;
    };

    /**
     * Encodes the specified FishSocialData message, length delimited. Does not implicitly {@link FishSocialData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FishSocialData
     * @static
     * @param {IFishSocialData} message FishSocialData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FishSocialData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FishSocialData message from the specified reader or buffer.
     * @function decode
     * @memberof FishSocialData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FishSocialData} FishSocialData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FishSocialData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FishSocialData(), key, value;
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (message.FishRecords === $util.emptyObject)
                        message.FishRecords = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = 0;
                    value = null;
                    while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            key = reader.int32();
                            break;
                        case 2:
                            value = $root.FishRecord.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                    }
                    message.FishRecords[key] = value;
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FishSocialData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FishSocialData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FishSocialData} FishSocialData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FishSocialData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FishSocialData message.
     * @function verify
     * @memberof FishSocialData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FishSocialData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.FishRecords != null && message.hasOwnProperty("FishRecords")) {
            if (!$util.isObject(message.FishRecords))
                return "FishRecords: object expected";
            var key = Object.keys(message.FishRecords);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "FishRecords: integer key{k:int32} expected";
                {
                    var error = $root.FishRecord.verify(message.FishRecords[key[i]]);
                    if (error)
                        return "FishRecords." + error;
                }
            }
        }
        return null;
    };

    /**
     * Creates a FishSocialData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FishSocialData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FishSocialData} FishSocialData
     */
    FishSocialData.fromObject = function fromObject(object) {
        if (object instanceof $root.FishSocialData)
            return object;
        var message = new $root.FishSocialData();
        if (object.FishRecords) {
            if (typeof object.FishRecords !== "object")
                throw TypeError(".FishSocialData.FishRecords: object expected");
            message.FishRecords = {};
            for (var keys = Object.keys(object.FishRecords), i = 0; i < keys.length; ++i) {
                if (typeof object.FishRecords[keys[i]] !== "object")
                    throw TypeError(".FishSocialData.FishRecords: object expected");
                message.FishRecords[keys[i]] = $root.FishRecord.fromObject(object.FishRecords[keys[i]]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a FishSocialData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FishSocialData
     * @static
     * @param {FishSocialData} message FishSocialData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FishSocialData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.objects || options.defaults)
            object.FishRecords = {};
        var keys2;
        if (message.FishRecords && (keys2 = Object.keys(message.FishRecords)).length) {
            object.FishRecords = {};
            for (var j = 0; j < keys2.length; ++j)
                object.FishRecords[keys2[j]] = $root.FishRecord.toObject(message.FishRecords[keys2[j]], options);
        }
        return object;
    };

    /**
     * Converts this FishSocialData to JSON.
     * @function toJSON
     * @memberof FishSocialData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FishSocialData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FishSocialData
     * @function getTypeUrl
     * @memberof FishSocialData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FishSocialData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FishSocialData";
    };

    return FishSocialData;
})();

$root.CommunityData = (function() {

    /**
     * Properties of a CommunityData.
     * @exports ICommunityData
     * @interface ICommunityData
     * @property {number|Long|null} [CommunityId] CommunityData CommunityId
     * @property {number|Long|null} [HomelandId] CommunityData HomelandId
     * @property {Array.<number|Long>|null} [CohabitantIds] CommunityData CohabitantIds
     * @property {number|Long|null} [LastExitCohabitationTime] CommunityData LastExitCohabitationTime
     * @property {number|null} [BuyCount] CommunityData BuyCount
     * @property {number|null} [Level] CommunityData Level
     */

    /**
     * Constructs a new CommunityData.
     * @exports CommunityData
     * @classdesc Represents a CommunityData.
     * @implements ICommunityData
     * @constructor
     * @param {ICommunityData=} [properties] Properties to set
     */
    function CommunityData(properties) {
        this.CohabitantIds = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CommunityData CommunityId.
     * @member {number|Long|null|undefined} CommunityId
     * @memberof CommunityData
     * @instance
     */
    CommunityData.prototype.CommunityId = null;

    /**
     * CommunityData HomelandId.
     * @member {number|Long|null|undefined} HomelandId
     * @memberof CommunityData
     * @instance
     */
    CommunityData.prototype.HomelandId = null;

    /**
     * CommunityData CohabitantIds.
     * @member {Array.<number|Long>} CohabitantIds
     * @memberof CommunityData
     * @instance
     */
    CommunityData.prototype.CohabitantIds = $util.emptyArray;

    /**
     * CommunityData LastExitCohabitationTime.
     * @member {number|Long|null|undefined} LastExitCohabitationTime
     * @memberof CommunityData
     * @instance
     */
    CommunityData.prototype.LastExitCohabitationTime = null;

    /**
     * CommunityData BuyCount.
     * @member {number|null|undefined} BuyCount
     * @memberof CommunityData
     * @instance
     */
    CommunityData.prototype.BuyCount = null;

    /**
     * CommunityData Level.
     * @member {number|null|undefined} Level
     * @memberof CommunityData
     * @instance
     */
    CommunityData.prototype.Level = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * CommunityData _CommunityId.
     * @member {"CommunityId"|undefined} _CommunityId
     * @memberof CommunityData
     * @instance
     */
    Object.defineProperty(CommunityData.prototype, "_CommunityId", {
        get: $util.oneOfGetter($oneOfFields = ["CommunityId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * CommunityData _HomelandId.
     * @member {"HomelandId"|undefined} _HomelandId
     * @memberof CommunityData
     * @instance
     */
    Object.defineProperty(CommunityData.prototype, "_HomelandId", {
        get: $util.oneOfGetter($oneOfFields = ["HomelandId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * CommunityData _LastExitCohabitationTime.
     * @member {"LastExitCohabitationTime"|undefined} _LastExitCohabitationTime
     * @memberof CommunityData
     * @instance
     */
    Object.defineProperty(CommunityData.prototype, "_LastExitCohabitationTime", {
        get: $util.oneOfGetter($oneOfFields = ["LastExitCohabitationTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * CommunityData _BuyCount.
     * @member {"BuyCount"|undefined} _BuyCount
     * @memberof CommunityData
     * @instance
     */
    Object.defineProperty(CommunityData.prototype, "_BuyCount", {
        get: $util.oneOfGetter($oneOfFields = ["BuyCount"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * CommunityData _Level.
     * @member {"Level"|undefined} _Level
     * @memberof CommunityData
     * @instance
     */
    Object.defineProperty(CommunityData.prototype, "_Level", {
        get: $util.oneOfGetter($oneOfFields = ["Level"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new CommunityData instance using the specified properties.
     * @function create
     * @memberof CommunityData
     * @static
     * @param {ICommunityData=} [properties] Properties to set
     * @returns {CommunityData} CommunityData instance
     */
    CommunityData.create = function create(properties) {
        return new CommunityData(properties);
    };

    /**
     * Encodes the specified CommunityData message. Does not implicitly {@link CommunityData.verify|verify} messages.
     * @function encode
     * @memberof CommunityData
     * @static
     * @param {ICommunityData} message CommunityData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CommunityData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.CommunityId != null && Object.hasOwnProperty.call(message, "CommunityId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.CommunityId);
        if (message.HomelandId != null && Object.hasOwnProperty.call(message, "HomelandId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.HomelandId);
        if (message.CohabitantIds != null && message.CohabitantIds.length) {
            writer.uint32(/* id 3, wireType 2 =*/26).fork();
            for (var i = 0; i < message.CohabitantIds.length; ++i)
                writer.int64(message.CohabitantIds[i]);
            writer.ldelim();
        }
        if (message.LastExitCohabitationTime != null && Object.hasOwnProperty.call(message, "LastExitCohabitationTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.LastExitCohabitationTime);
        if (message.BuyCount != null && Object.hasOwnProperty.call(message, "BuyCount"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.BuyCount);
        if (message.Level != null && Object.hasOwnProperty.call(message, "Level"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.Level);
        return writer;
    };

    /**
     * Encodes the specified CommunityData message, length delimited. Does not implicitly {@link CommunityData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CommunityData
     * @static
     * @param {ICommunityData} message CommunityData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CommunityData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CommunityData message from the specified reader or buffer.
     * @function decode
     * @memberof CommunityData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CommunityData} CommunityData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CommunityData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommunityData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.CommunityId = reader.int64();
                    break;
                }
            case 2: {
                    message.HomelandId = reader.int64();
                    break;
                }
            case 3: {
                    if (!(message.CohabitantIds && message.CohabitantIds.length))
                        message.CohabitantIds = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.CohabitantIds.push(reader.int64());
                    } else
                        message.CohabitantIds.push(reader.int64());
                    break;
                }
            case 4: {
                    message.LastExitCohabitationTime = reader.int64();
                    break;
                }
            case 5: {
                    message.BuyCount = reader.int32();
                    break;
                }
            case 6: {
                    message.Level = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CommunityData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CommunityData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CommunityData} CommunityData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CommunityData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CommunityData message.
     * @function verify
     * @memberof CommunityData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CommunityData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.CommunityId != null && message.hasOwnProperty("CommunityId")) {
            properties._CommunityId = 1;
            if (!$util.isInteger(message.CommunityId) && !(message.CommunityId && $util.isInteger(message.CommunityId.low) && $util.isInteger(message.CommunityId.high)))
                return "CommunityId: integer|Long expected";
        }
        if (message.HomelandId != null && message.hasOwnProperty("HomelandId")) {
            properties._HomelandId = 1;
            if (!$util.isInteger(message.HomelandId) && !(message.HomelandId && $util.isInteger(message.HomelandId.low) && $util.isInteger(message.HomelandId.high)))
                return "HomelandId: integer|Long expected";
        }
        if (message.CohabitantIds != null && message.hasOwnProperty("CohabitantIds")) {
            if (!Array.isArray(message.CohabitantIds))
                return "CohabitantIds: array expected";
            for (var i = 0; i < message.CohabitantIds.length; ++i)
                if (!$util.isInteger(message.CohabitantIds[i]) && !(message.CohabitantIds[i] && $util.isInteger(message.CohabitantIds[i].low) && $util.isInteger(message.CohabitantIds[i].high)))
                    return "CohabitantIds: integer|Long[] expected";
        }
        if (message.LastExitCohabitationTime != null && message.hasOwnProperty("LastExitCohabitationTime")) {
            properties._LastExitCohabitationTime = 1;
            if (!$util.isInteger(message.LastExitCohabitationTime) && !(message.LastExitCohabitationTime && $util.isInteger(message.LastExitCohabitationTime.low) && $util.isInteger(message.LastExitCohabitationTime.high)))
                return "LastExitCohabitationTime: integer|Long expected";
        }
        if (message.BuyCount != null && message.hasOwnProperty("BuyCount")) {
            properties._BuyCount = 1;
            if (!$util.isInteger(message.BuyCount))
                return "BuyCount: integer expected";
        }
        if (message.Level != null && message.hasOwnProperty("Level")) {
            properties._Level = 1;
            if (!$util.isInteger(message.Level))
                return "Level: integer expected";
        }
        return null;
    };

    /**
     * Creates a CommunityData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CommunityData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CommunityData} CommunityData
     */
    CommunityData.fromObject = function fromObject(object) {
        if (object instanceof $root.CommunityData)
            return object;
        var message = new $root.CommunityData();
        if (object.CommunityId != null)
            if ($util.Long)
                (message.CommunityId = $util.Long.fromValue(object.CommunityId)).unsigned = false;
            else if (typeof object.CommunityId === "string")
                message.CommunityId = parseInt(object.CommunityId, 10);
            else if (typeof object.CommunityId === "number")
                message.CommunityId = object.CommunityId;
            else if (typeof object.CommunityId === "object")
                message.CommunityId = new $util.LongBits(object.CommunityId.low >>> 0, object.CommunityId.high >>> 0).toNumber();
        if (object.HomelandId != null)
            if ($util.Long)
                (message.HomelandId = $util.Long.fromValue(object.HomelandId)).unsigned = false;
            else if (typeof object.HomelandId === "string")
                message.HomelandId = parseInt(object.HomelandId, 10);
            else if (typeof object.HomelandId === "number")
                message.HomelandId = object.HomelandId;
            else if (typeof object.HomelandId === "object")
                message.HomelandId = new $util.LongBits(object.HomelandId.low >>> 0, object.HomelandId.high >>> 0).toNumber();
        if (object.CohabitantIds) {
            if (!Array.isArray(object.CohabitantIds))
                throw TypeError(".CommunityData.CohabitantIds: array expected");
            message.CohabitantIds = [];
            for (var i = 0; i < object.CohabitantIds.length; ++i)
                if ($util.Long)
                    (message.CohabitantIds[i] = $util.Long.fromValue(object.CohabitantIds[i])).unsigned = false;
                else if (typeof object.CohabitantIds[i] === "string")
                    message.CohabitantIds[i] = parseInt(object.CohabitantIds[i], 10);
                else if (typeof object.CohabitantIds[i] === "number")
                    message.CohabitantIds[i] = object.CohabitantIds[i];
                else if (typeof object.CohabitantIds[i] === "object")
                    message.CohabitantIds[i] = new $util.LongBits(object.CohabitantIds[i].low >>> 0, object.CohabitantIds[i].high >>> 0).toNumber();
        }
        if (object.LastExitCohabitationTime != null)
            if ($util.Long)
                (message.LastExitCohabitationTime = $util.Long.fromValue(object.LastExitCohabitationTime)).unsigned = false;
            else if (typeof object.LastExitCohabitationTime === "string")
                message.LastExitCohabitationTime = parseInt(object.LastExitCohabitationTime, 10);
            else if (typeof object.LastExitCohabitationTime === "number")
                message.LastExitCohabitationTime = object.LastExitCohabitationTime;
            else if (typeof object.LastExitCohabitationTime === "object")
                message.LastExitCohabitationTime = new $util.LongBits(object.LastExitCohabitationTime.low >>> 0, object.LastExitCohabitationTime.high >>> 0).toNumber();
        if (object.BuyCount != null)
            message.BuyCount = object.BuyCount | 0;
        if (object.Level != null)
            message.Level = object.Level | 0;
        return message;
    };

    /**
     * Creates a plain object from a CommunityData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CommunityData
     * @static
     * @param {CommunityData} message CommunityData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CommunityData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.CohabitantIds = [];
        if (message.CommunityId != null && message.hasOwnProperty("CommunityId")) {
            if (typeof message.CommunityId === "number")
                object.CommunityId = options.longs === String ? String(message.CommunityId) : message.CommunityId;
            else
                object.CommunityId = options.longs === String ? $util.Long.prototype.toString.call(message.CommunityId) : options.longs === Number ? new $util.LongBits(message.CommunityId.low >>> 0, message.CommunityId.high >>> 0).toNumber() : message.CommunityId;
            if (options.oneofs)
                object._CommunityId = "CommunityId";
        }
        if (message.HomelandId != null && message.hasOwnProperty("HomelandId")) {
            if (typeof message.HomelandId === "number")
                object.HomelandId = options.longs === String ? String(message.HomelandId) : message.HomelandId;
            else
                object.HomelandId = options.longs === String ? $util.Long.prototype.toString.call(message.HomelandId) : options.longs === Number ? new $util.LongBits(message.HomelandId.low >>> 0, message.HomelandId.high >>> 0).toNumber() : message.HomelandId;
            if (options.oneofs)
                object._HomelandId = "HomelandId";
        }
        if (message.CohabitantIds && message.CohabitantIds.length) {
            object.CohabitantIds = [];
            for (var j = 0; j < message.CohabitantIds.length; ++j)
                if (typeof message.CohabitantIds[j] === "number")
                    object.CohabitantIds[j] = options.longs === String ? String(message.CohabitantIds[j]) : message.CohabitantIds[j];
                else
                    object.CohabitantIds[j] = options.longs === String ? $util.Long.prototype.toString.call(message.CohabitantIds[j]) : options.longs === Number ? new $util.LongBits(message.CohabitantIds[j].low >>> 0, message.CohabitantIds[j].high >>> 0).toNumber() : message.CohabitantIds[j];
        }
        if (message.LastExitCohabitationTime != null && message.hasOwnProperty("LastExitCohabitationTime")) {
            if (typeof message.LastExitCohabitationTime === "number")
                object.LastExitCohabitationTime = options.longs === String ? String(message.LastExitCohabitationTime) : message.LastExitCohabitationTime;
            else
                object.LastExitCohabitationTime = options.longs === String ? $util.Long.prototype.toString.call(message.LastExitCohabitationTime) : options.longs === Number ? new $util.LongBits(message.LastExitCohabitationTime.low >>> 0, message.LastExitCohabitationTime.high >>> 0).toNumber() : message.LastExitCohabitationTime;
            if (options.oneofs)
                object._LastExitCohabitationTime = "LastExitCohabitationTime";
        }
        if (message.BuyCount != null && message.hasOwnProperty("BuyCount")) {
            object.BuyCount = message.BuyCount;
            if (options.oneofs)
                object._BuyCount = "BuyCount";
        }
        if (message.Level != null && message.hasOwnProperty("Level")) {
            object.Level = message.Level;
            if (options.oneofs)
                object._Level = "Level";
        }
        return object;
    };

    /**
     * Converts this CommunityData to JSON.
     * @function toJSON
     * @memberof CommunityData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CommunityData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CommunityData
     * @function getTypeUrl
     * @memberof CommunityData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CommunityData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CommunityData";
    };

    return CommunityData;
})();

/**
 * LaunchPlatform enum.
 * @exports LaunchPlatform
 * @enum {number}
 * @property {number} LaunchPlatformNull=0 LaunchPlatformNull value
 * @property {number} LaunchPlatformWeXin=1001 LaunchPlatformWeXin value
 * @property {number} LaunchPlatformQq=1002 LaunchPlatformQq value
 */
$root.LaunchPlatform = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "LaunchPlatformNull"] = 0;
    values[valuesById[1001] = "LaunchPlatformWeXin"] = 1001;
    values[valuesById[1002] = "LaunchPlatformQq"] = 1002;
    return values;
})();

$root.PrivilegeData = (function() {

    /**
     * Properties of a PrivilegeData.
     * @exports IPrivilegeData
     * @interface IPrivilegeData
     * @property {LaunchPlatform|null} [launchPlatform] PrivilegeData launchPlatform
     * @property {boolean|null} [isPrivilege] PrivilegeData isPrivilege
     * @property {number|Long|null} [lastUpdateTime] PrivilegeData lastUpdateTime
     */

    /**
     * Constructs a new PrivilegeData.
     * @exports PrivilegeData
     * @classdesc Represents a PrivilegeData.
     * @implements IPrivilegeData
     * @constructor
     * @param {IPrivilegeData=} [properties] Properties to set
     */
    function PrivilegeData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PrivilegeData launchPlatform.
     * @member {LaunchPlatform|null|undefined} launchPlatform
     * @memberof PrivilegeData
     * @instance
     */
    PrivilegeData.prototype.launchPlatform = null;

    /**
     * PrivilegeData isPrivilege.
     * @member {boolean|null|undefined} isPrivilege
     * @memberof PrivilegeData
     * @instance
     */
    PrivilegeData.prototype.isPrivilege = null;

    /**
     * PrivilegeData lastUpdateTime.
     * @member {number|Long|null|undefined} lastUpdateTime
     * @memberof PrivilegeData
     * @instance
     */
    PrivilegeData.prototype.lastUpdateTime = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * PrivilegeData _launchPlatform.
     * @member {"launchPlatform"|undefined} _launchPlatform
     * @memberof PrivilegeData
     * @instance
     */
    Object.defineProperty(PrivilegeData.prototype, "_launchPlatform", {
        get: $util.oneOfGetter($oneOfFields = ["launchPlatform"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PrivilegeData _isPrivilege.
     * @member {"isPrivilege"|undefined} _isPrivilege
     * @memberof PrivilegeData
     * @instance
     */
    Object.defineProperty(PrivilegeData.prototype, "_isPrivilege", {
        get: $util.oneOfGetter($oneOfFields = ["isPrivilege"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PrivilegeData _lastUpdateTime.
     * @member {"lastUpdateTime"|undefined} _lastUpdateTime
     * @memberof PrivilegeData
     * @instance
     */
    Object.defineProperty(PrivilegeData.prototype, "_lastUpdateTime", {
        get: $util.oneOfGetter($oneOfFields = ["lastUpdateTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new PrivilegeData instance using the specified properties.
     * @function create
     * @memberof PrivilegeData
     * @static
     * @param {IPrivilegeData=} [properties] Properties to set
     * @returns {PrivilegeData} PrivilegeData instance
     */
    PrivilegeData.create = function create(properties) {
        return new PrivilegeData(properties);
    };

    /**
     * Encodes the specified PrivilegeData message. Does not implicitly {@link PrivilegeData.verify|verify} messages.
     * @function encode
     * @memberof PrivilegeData
     * @static
     * @param {IPrivilegeData} message PrivilegeData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PrivilegeData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.launchPlatform != null && Object.hasOwnProperty.call(message, "launchPlatform"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.launchPlatform);
        if (message.isPrivilege != null && Object.hasOwnProperty.call(message, "isPrivilege"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isPrivilege);
        if (message.lastUpdateTime != null && Object.hasOwnProperty.call(message, "lastUpdateTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.lastUpdateTime);
        return writer;
    };

    /**
     * Encodes the specified PrivilegeData message, length delimited. Does not implicitly {@link PrivilegeData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PrivilegeData
     * @static
     * @param {IPrivilegeData} message PrivilegeData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PrivilegeData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PrivilegeData message from the specified reader or buffer.
     * @function decode
     * @memberof PrivilegeData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PrivilegeData} PrivilegeData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PrivilegeData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PrivilegeData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.launchPlatform = reader.int32();
                    break;
                }
            case 2: {
                    message.isPrivilege = reader.bool();
                    break;
                }
            case 3: {
                    message.lastUpdateTime = reader.int64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PrivilegeData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PrivilegeData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PrivilegeData} PrivilegeData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PrivilegeData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PrivilegeData message.
     * @function verify
     * @memberof PrivilegeData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PrivilegeData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.launchPlatform != null && message.hasOwnProperty("launchPlatform")) {
            properties._launchPlatform = 1;
            switch (message.launchPlatform) {
            default:
                return "launchPlatform: enum value expected";
            case 0:
            case 1001:
            case 1002:
                break;
            }
        }
        if (message.isPrivilege != null && message.hasOwnProperty("isPrivilege")) {
            properties._isPrivilege = 1;
            if (typeof message.isPrivilege !== "boolean")
                return "isPrivilege: boolean expected";
        }
        if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime")) {
            properties._lastUpdateTime = 1;
            if (!$util.isInteger(message.lastUpdateTime) && !(message.lastUpdateTime && $util.isInteger(message.lastUpdateTime.low) && $util.isInteger(message.lastUpdateTime.high)))
                return "lastUpdateTime: integer|Long expected";
        }
        return null;
    };

    /**
     * Creates a PrivilegeData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PrivilegeData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PrivilegeData} PrivilegeData
     */
    PrivilegeData.fromObject = function fromObject(object) {
        if (object instanceof $root.PrivilegeData)
            return object;
        var message = new $root.PrivilegeData();
        switch (object.launchPlatform) {
        default:
            if (typeof object.launchPlatform === "number") {
                message.launchPlatform = object.launchPlatform;
                break;
            }
            break;
        case "LaunchPlatformNull":
        case 0:
            message.launchPlatform = 0;
            break;
        case "LaunchPlatformWeXin":
        case 1001:
            message.launchPlatform = 1001;
            break;
        case "LaunchPlatformQq":
        case 1002:
            message.launchPlatform = 1002;
            break;
        }
        if (object.isPrivilege != null)
            message.isPrivilege = Boolean(object.isPrivilege);
        if (object.lastUpdateTime != null)
            if ($util.Long)
                (message.lastUpdateTime = $util.Long.fromValue(object.lastUpdateTime)).unsigned = false;
            else if (typeof object.lastUpdateTime === "string")
                message.lastUpdateTime = parseInt(object.lastUpdateTime, 10);
            else if (typeof object.lastUpdateTime === "number")
                message.lastUpdateTime = object.lastUpdateTime;
            else if (typeof object.lastUpdateTime === "object")
                message.lastUpdateTime = new $util.LongBits(object.lastUpdateTime.low >>> 0, object.lastUpdateTime.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a PrivilegeData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PrivilegeData
     * @static
     * @param {PrivilegeData} message PrivilegeData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PrivilegeData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.launchPlatform != null && message.hasOwnProperty("launchPlatform")) {
            object.launchPlatform = options.enums === String ? $root.LaunchPlatform[message.launchPlatform] === undefined ? message.launchPlatform : $root.LaunchPlatform[message.launchPlatform] : message.launchPlatform;
            if (options.oneofs)
                object._launchPlatform = "launchPlatform";
        }
        if (message.isPrivilege != null && message.hasOwnProperty("isPrivilege")) {
            object.isPrivilege = message.isPrivilege;
            if (options.oneofs)
                object._isPrivilege = "isPrivilege";
        }
        if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime")) {
            if (typeof message.lastUpdateTime === "number")
                object.lastUpdateTime = options.longs === String ? String(message.lastUpdateTime) : message.lastUpdateTime;
            else
                object.lastUpdateTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastUpdateTime) : options.longs === Number ? new $util.LongBits(message.lastUpdateTime.low >>> 0, message.lastUpdateTime.high >>> 0).toNumber() : message.lastUpdateTime;
            if (options.oneofs)
                object._lastUpdateTime = "lastUpdateTime";
        }
        return object;
    };

    /**
     * Converts this PrivilegeData to JSON.
     * @function toJSON
     * @memberof PrivilegeData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PrivilegeData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PrivilegeData
     * @function getTypeUrl
     * @memberof PrivilegeData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PrivilegeData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PrivilegeData";
    };

    return PrivilegeData;
})();

$root.MasterModeDungeonData = (function() {

    /**
     * Properties of a MasterModeDungeonData.
     * @exports IMasterModeDungeonData
     * @interface IMasterModeDungeonData
     * @property {number|null} [seasonScore] MasterModeDungeonData seasonScore
     * @property {boolean|null} [isShow] MasterModeDungeonData isShow
     */

    /**
     * Constructs a new MasterModeDungeonData.
     * @exports MasterModeDungeonData
     * @classdesc Represents a MasterModeDungeonData.
     * @implements IMasterModeDungeonData
     * @constructor
     * @param {IMasterModeDungeonData=} [properties] Properties to set
     */
    function MasterModeDungeonData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * MasterModeDungeonData seasonScore.
     * @member {number|null|undefined} seasonScore
     * @memberof MasterModeDungeonData
     * @instance
     */
    MasterModeDungeonData.prototype.seasonScore = null;

    /**
     * MasterModeDungeonData isShow.
     * @member {boolean|null|undefined} isShow
     * @memberof MasterModeDungeonData
     * @instance
     */
    MasterModeDungeonData.prototype.isShow = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * MasterModeDungeonData _seasonScore.
     * @member {"seasonScore"|undefined} _seasonScore
     * @memberof MasterModeDungeonData
     * @instance
     */
    Object.defineProperty(MasterModeDungeonData.prototype, "_seasonScore", {
        get: $util.oneOfGetter($oneOfFields = ["seasonScore"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * MasterModeDungeonData _isShow.
     * @member {"isShow"|undefined} _isShow
     * @memberof MasterModeDungeonData
     * @instance
     */
    Object.defineProperty(MasterModeDungeonData.prototype, "_isShow", {
        get: $util.oneOfGetter($oneOfFields = ["isShow"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new MasterModeDungeonData instance using the specified properties.
     * @function create
     * @memberof MasterModeDungeonData
     * @static
     * @param {IMasterModeDungeonData=} [properties] Properties to set
     * @returns {MasterModeDungeonData} MasterModeDungeonData instance
     */
    MasterModeDungeonData.create = function create(properties) {
        return new MasterModeDungeonData(properties);
    };

    /**
     * Encodes the specified MasterModeDungeonData message. Does not implicitly {@link MasterModeDungeonData.verify|verify} messages.
     * @function encode
     * @memberof MasterModeDungeonData
     * @static
     * @param {IMasterModeDungeonData} message MasterModeDungeonData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MasterModeDungeonData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seasonScore != null && Object.hasOwnProperty.call(message, "seasonScore"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seasonScore);
        if (message.isShow != null && Object.hasOwnProperty.call(message, "isShow"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isShow);
        return writer;
    };

    /**
     * Encodes the specified MasterModeDungeonData message, length delimited. Does not implicitly {@link MasterModeDungeonData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MasterModeDungeonData
     * @static
     * @param {IMasterModeDungeonData} message MasterModeDungeonData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MasterModeDungeonData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a MasterModeDungeonData message from the specified reader or buffer.
     * @function decode
     * @memberof MasterModeDungeonData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MasterModeDungeonData} MasterModeDungeonData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MasterModeDungeonData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MasterModeDungeonData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.seasonScore = reader.int32();
                    break;
                }
            case 2: {
                    message.isShow = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a MasterModeDungeonData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MasterModeDungeonData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MasterModeDungeonData} MasterModeDungeonData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MasterModeDungeonData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a MasterModeDungeonData message.
     * @function verify
     * @memberof MasterModeDungeonData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    MasterModeDungeonData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.seasonScore != null && message.hasOwnProperty("seasonScore")) {
            properties._seasonScore = 1;
            if (!$util.isInteger(message.seasonScore))
                return "seasonScore: integer expected";
        }
        if (message.isShow != null && message.hasOwnProperty("isShow")) {
            properties._isShow = 1;
            if (typeof message.isShow !== "boolean")
                return "isShow: boolean expected";
        }
        return null;
    };

    /**
     * Creates a MasterModeDungeonData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MasterModeDungeonData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MasterModeDungeonData} MasterModeDungeonData
     */
    MasterModeDungeonData.fromObject = function fromObject(object) {
        if (object instanceof $root.MasterModeDungeonData)
            return object;
        var message = new $root.MasterModeDungeonData();
        if (object.seasonScore != null)
            message.seasonScore = object.seasonScore | 0;
        if (object.isShow != null)
            message.isShow = Boolean(object.isShow);
        return message;
    };

    /**
     * Creates a plain object from a MasterModeDungeonData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MasterModeDungeonData
     * @static
     * @param {MasterModeDungeonData} message MasterModeDungeonData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    MasterModeDungeonData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.seasonScore != null && message.hasOwnProperty("seasonScore")) {
            object.seasonScore = message.seasonScore;
            if (options.oneofs)
                object._seasonScore = "seasonScore";
        }
        if (message.isShow != null && message.hasOwnProperty("isShow")) {
            object.isShow = message.isShow;
            if (options.oneofs)
                object._isShow = "isShow";
        }
        return object;
    };

    /**
     * Converts this MasterModeDungeonData to JSON.
     * @function toJSON
     * @memberof MasterModeDungeonData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    MasterModeDungeonData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for MasterModeDungeonData
     * @function getTypeUrl
     * @memberof MasterModeDungeonData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    MasterModeDungeonData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/MasterModeDungeonData";
    };

    return MasterModeDungeonData;
})();

$root.SocialData = (function() {

    /**
     * Properties of a SocialData.
     * @exports ISocialData
     * @interface ISocialData
     * @property {number|Long|null} [CharId] SocialData CharId
     * @property {string|null} [AccountId] SocialData AccountId
     * @property {IBasicData|null} [BasicData] SocialData BasicData
     * @property {IAvatarInfo|null} [AvatarInfo] SocialData AvatarInfo
     * @property {IFaceData|null} [FaceData] SocialData FaceData
     * @property {IProfessionData|null} [ProfessionData] SocialData ProfessionData
     * @property {IEquipData|null} [EquipData] SocialData EquipData
     * @property {IFashionData|null} [FashionData] SocialData FashionData
     * @property {ISettingData|null} [SettingData] SocialData SettingData
     * @property {ISceneData|null} [SceneData] SocialData SceneData
     * @property {IUserAttrData|null} [UserAttrData] SocialData UserAttrData
     * @property {ICharTeam|null} [TeamData] SocialData TeamData
     * @property {IUnionData|null} [UnionData] SocialData UnionData
     * @property {IAccountData|null} [AccountData] SocialData AccountData
     * @property {IFunctionData|null} [FunctionData] SocialData FunctionData
     * @property {IPersonalZone|null} [PersonalZone] SocialData PersonalZone
     * @property {IWarehouseData|null} [Warehouse] SocialData Warehouse
     * @property {ISeasonRankData|null} [SeasonRank] SocialData SeasonRank
     * @property {IFishSocialData|null} [FishData] SocialData FishData
     * @property {ICommunityData|null} [CommunityData] SocialData CommunityData
     * @property {IPrivilegeData|null} [PrivilegeData] SocialData PrivilegeData
     * @property {IMasterModeDungeonData|null} [MasterModeDungeonData] SocialData MasterModeDungeonData
     */

    /**
     * Constructs a new SocialData.
     * @exports SocialData
     * @classdesc Represents a SocialData.
     * @implements ISocialData
     * @constructor
     * @param {ISocialData=} [properties] Properties to set
     */
    function SocialData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SocialData CharId.
     * @member {number|Long|null|undefined} CharId
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.CharId = null;

    /**
     * SocialData AccountId.
     * @member {string|null|undefined} AccountId
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.AccountId = null;

    /**
     * SocialData BasicData.
     * @member {IBasicData|null|undefined} BasicData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.BasicData = null;

    /**
     * SocialData AvatarInfo.
     * @member {IAvatarInfo|null|undefined} AvatarInfo
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.AvatarInfo = null;

    /**
     * SocialData FaceData.
     * @member {IFaceData|null|undefined} FaceData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.FaceData = null;

    /**
     * SocialData ProfessionData.
     * @member {IProfessionData|null|undefined} ProfessionData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.ProfessionData = null;

    /**
     * SocialData EquipData.
     * @member {IEquipData|null|undefined} EquipData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.EquipData = null;

    /**
     * SocialData FashionData.
     * @member {IFashionData|null|undefined} FashionData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.FashionData = null;

    /**
     * SocialData SettingData.
     * @member {ISettingData|null|undefined} SettingData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.SettingData = null;

    /**
     * SocialData SceneData.
     * @member {ISceneData|null|undefined} SceneData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.SceneData = null;

    /**
     * SocialData UserAttrData.
     * @member {IUserAttrData|null|undefined} UserAttrData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.UserAttrData = null;

    /**
     * SocialData TeamData.
     * @member {ICharTeam|null|undefined} TeamData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.TeamData = null;

    /**
     * SocialData UnionData.
     * @member {IUnionData|null|undefined} UnionData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.UnionData = null;

    /**
     * SocialData AccountData.
     * @member {IAccountData|null|undefined} AccountData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.AccountData = null;

    /**
     * SocialData FunctionData.
     * @member {IFunctionData|null|undefined} FunctionData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.FunctionData = null;

    /**
     * SocialData PersonalZone.
     * @member {IPersonalZone|null|undefined} PersonalZone
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.PersonalZone = null;

    /**
     * SocialData Warehouse.
     * @member {IWarehouseData|null|undefined} Warehouse
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.Warehouse = null;

    /**
     * SocialData SeasonRank.
     * @member {ISeasonRankData|null|undefined} SeasonRank
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.SeasonRank = null;

    /**
     * SocialData FishData.
     * @member {IFishSocialData|null|undefined} FishData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.FishData = null;

    /**
     * SocialData CommunityData.
     * @member {ICommunityData|null|undefined} CommunityData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.CommunityData = null;

    /**
     * SocialData PrivilegeData.
     * @member {IPrivilegeData|null|undefined} PrivilegeData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.PrivilegeData = null;

    /**
     * SocialData MasterModeDungeonData.
     * @member {IMasterModeDungeonData|null|undefined} MasterModeDungeonData
     * @memberof SocialData
     * @instance
     */
    SocialData.prototype.MasterModeDungeonData = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * SocialData _CharId.
     * @member {"CharId"|undefined} _CharId
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_CharId", {
        get: $util.oneOfGetter($oneOfFields = ["CharId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _AccountId.
     * @member {"AccountId"|undefined} _AccountId
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_AccountId", {
        get: $util.oneOfGetter($oneOfFields = ["AccountId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _BasicData.
     * @member {"BasicData"|undefined} _BasicData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_BasicData", {
        get: $util.oneOfGetter($oneOfFields = ["BasicData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _AvatarInfo.
     * @member {"AvatarInfo"|undefined} _AvatarInfo
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_AvatarInfo", {
        get: $util.oneOfGetter($oneOfFields = ["AvatarInfo"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _FaceData.
     * @member {"FaceData"|undefined} _FaceData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_FaceData", {
        get: $util.oneOfGetter($oneOfFields = ["FaceData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _ProfessionData.
     * @member {"ProfessionData"|undefined} _ProfessionData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_ProfessionData", {
        get: $util.oneOfGetter($oneOfFields = ["ProfessionData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _EquipData.
     * @member {"EquipData"|undefined} _EquipData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_EquipData", {
        get: $util.oneOfGetter($oneOfFields = ["EquipData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _FashionData.
     * @member {"FashionData"|undefined} _FashionData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_FashionData", {
        get: $util.oneOfGetter($oneOfFields = ["FashionData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _SettingData.
     * @member {"SettingData"|undefined} _SettingData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_SettingData", {
        get: $util.oneOfGetter($oneOfFields = ["SettingData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _SceneData.
     * @member {"SceneData"|undefined} _SceneData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_SceneData", {
        get: $util.oneOfGetter($oneOfFields = ["SceneData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _UserAttrData.
     * @member {"UserAttrData"|undefined} _UserAttrData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_UserAttrData", {
        get: $util.oneOfGetter($oneOfFields = ["UserAttrData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _TeamData.
     * @member {"TeamData"|undefined} _TeamData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_TeamData", {
        get: $util.oneOfGetter($oneOfFields = ["TeamData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _UnionData.
     * @member {"UnionData"|undefined} _UnionData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_UnionData", {
        get: $util.oneOfGetter($oneOfFields = ["UnionData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _AccountData.
     * @member {"AccountData"|undefined} _AccountData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_AccountData", {
        get: $util.oneOfGetter($oneOfFields = ["AccountData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _FunctionData.
     * @member {"FunctionData"|undefined} _FunctionData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_FunctionData", {
        get: $util.oneOfGetter($oneOfFields = ["FunctionData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _PersonalZone.
     * @member {"PersonalZone"|undefined} _PersonalZone
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_PersonalZone", {
        get: $util.oneOfGetter($oneOfFields = ["PersonalZone"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _Warehouse.
     * @member {"Warehouse"|undefined} _Warehouse
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_Warehouse", {
        get: $util.oneOfGetter($oneOfFields = ["Warehouse"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _SeasonRank.
     * @member {"SeasonRank"|undefined} _SeasonRank
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_SeasonRank", {
        get: $util.oneOfGetter($oneOfFields = ["SeasonRank"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _FishData.
     * @member {"FishData"|undefined} _FishData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_FishData", {
        get: $util.oneOfGetter($oneOfFields = ["FishData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _CommunityData.
     * @member {"CommunityData"|undefined} _CommunityData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_CommunityData", {
        get: $util.oneOfGetter($oneOfFields = ["CommunityData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _PrivilegeData.
     * @member {"PrivilegeData"|undefined} _PrivilegeData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_PrivilegeData", {
        get: $util.oneOfGetter($oneOfFields = ["PrivilegeData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SocialData _MasterModeDungeonData.
     * @member {"MasterModeDungeonData"|undefined} _MasterModeDungeonData
     * @memberof SocialData
     * @instance
     */
    Object.defineProperty(SocialData.prototype, "_MasterModeDungeonData", {
        get: $util.oneOfGetter($oneOfFields = ["MasterModeDungeonData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new SocialData instance using the specified properties.
     * @function create
     * @memberof SocialData
     * @static
     * @param {ISocialData=} [properties] Properties to set
     * @returns {SocialData} SocialData instance
     */
    SocialData.create = function create(properties) {
        return new SocialData(properties);
    };

    /**
     * Encodes the specified SocialData message. Does not implicitly {@link SocialData.verify|verify} messages.
     * @function encode
     * @memberof SocialData
     * @static
     * @param {ISocialData} message SocialData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SocialData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.CharId != null && Object.hasOwnProperty.call(message, "CharId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.CharId);
        if (message.AccountId != null && Object.hasOwnProperty.call(message, "AccountId"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.AccountId);
        if (message.BasicData != null && Object.hasOwnProperty.call(message, "BasicData"))
            $root.BasicData.encode(message.BasicData, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.AvatarInfo != null && Object.hasOwnProperty.call(message, "AvatarInfo"))
            $root.AvatarInfo.encode(message.AvatarInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.FaceData != null && Object.hasOwnProperty.call(message, "FaceData"))
            $root.FaceData.encode(message.FaceData, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.ProfessionData != null && Object.hasOwnProperty.call(message, "ProfessionData"))
            $root.ProfessionData.encode(message.ProfessionData, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.EquipData != null && Object.hasOwnProperty.call(message, "EquipData"))
            $root.EquipData.encode(message.EquipData, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.FashionData != null && Object.hasOwnProperty.call(message, "FashionData"))
            $root.FashionData.encode(message.FashionData, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.SettingData != null && Object.hasOwnProperty.call(message, "SettingData"))
            $root.SettingData.encode(message.SettingData, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.SceneData != null && Object.hasOwnProperty.call(message, "SceneData"))
            $root.SceneData.encode(message.SceneData, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.UserAttrData != null && Object.hasOwnProperty.call(message, "UserAttrData"))
            $root.UserAttrData.encode(message.UserAttrData, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.TeamData != null && Object.hasOwnProperty.call(message, "TeamData"))
            $root.CharTeam.encode(message.TeamData, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.UnionData != null && Object.hasOwnProperty.call(message, "UnionData"))
            $root.UnionData.encode(message.UnionData, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.AccountData != null && Object.hasOwnProperty.call(message, "AccountData"))
            $root.AccountData.encode(message.AccountData, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.FunctionData != null && Object.hasOwnProperty.call(message, "FunctionData"))
            $root.FunctionData.encode(message.FunctionData, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        if (message.PersonalZone != null && Object.hasOwnProperty.call(message, "PersonalZone"))
            $root.PersonalZone.encode(message.PersonalZone, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
        if (message.Warehouse != null && Object.hasOwnProperty.call(message, "Warehouse"))
            $root.WarehouseData.encode(message.Warehouse, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
        if (message.SeasonRank != null && Object.hasOwnProperty.call(message, "SeasonRank"))
            $root.SeasonRankData.encode(message.SeasonRank, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
        if (message.FishData != null && Object.hasOwnProperty.call(message, "FishData"))
            $root.FishSocialData.encode(message.FishData, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
        if (message.CommunityData != null && Object.hasOwnProperty.call(message, "CommunityData"))
            $root.CommunityData.encode(message.CommunityData, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.PrivilegeData != null && Object.hasOwnProperty.call(message, "PrivilegeData"))
            $root.PrivilegeData.encode(message.PrivilegeData, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
        if (message.MasterModeDungeonData != null && Object.hasOwnProperty.call(message, "MasterModeDungeonData"))
            $root.MasterModeDungeonData.encode(message.MasterModeDungeonData, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SocialData message, length delimited. Does not implicitly {@link SocialData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SocialData
     * @static
     * @param {ISocialData} message SocialData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SocialData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SocialData message from the specified reader or buffer.
     * @function decode
     * @memberof SocialData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SocialData} SocialData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SocialData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SocialData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.CharId = reader.int64();
                    break;
                }
            case 2: {
                    message.AccountId = reader.string();
                    break;
                }
            case 3: {
                    message.BasicData = $root.BasicData.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.AvatarInfo = $root.AvatarInfo.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.FaceData = $root.FaceData.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.ProfessionData = $root.ProfessionData.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.EquipData = $root.EquipData.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.FashionData = $root.FashionData.decode(reader, reader.uint32());
                    break;
                }
            case 9: {
                    message.SettingData = $root.SettingData.decode(reader, reader.uint32());
                    break;
                }
            case 10: {
                    message.SceneData = $root.SceneData.decode(reader, reader.uint32());
                    break;
                }
            case 11: {
                    message.UserAttrData = $root.UserAttrData.decode(reader, reader.uint32());
                    break;
                }
            case 12: {
                    message.TeamData = $root.CharTeam.decode(reader, reader.uint32());
                    break;
                }
            case 13: {
                    message.UnionData = $root.UnionData.decode(reader, reader.uint32());
                    break;
                }
            case 14: {
                    message.AccountData = $root.AccountData.decode(reader, reader.uint32());
                    break;
                }
            case 15: {
                    message.FunctionData = $root.FunctionData.decode(reader, reader.uint32());
                    break;
                }
            case 16: {
                    message.PersonalZone = $root.PersonalZone.decode(reader, reader.uint32());
                    break;
                }
            case 17: {
                    message.Warehouse = $root.WarehouseData.decode(reader, reader.uint32());
                    break;
                }
            case 18: {
                    message.SeasonRank = $root.SeasonRankData.decode(reader, reader.uint32());
                    break;
                }
            case 19: {
                    message.FishData = $root.FishSocialData.decode(reader, reader.uint32());
                    break;
                }
            case 20: {
                    message.CommunityData = $root.CommunityData.decode(reader, reader.uint32());
                    break;
                }
            case 21: {
                    message.PrivilegeData = $root.PrivilegeData.decode(reader, reader.uint32());
                    break;
                }
            case 22: {
                    message.MasterModeDungeonData = $root.MasterModeDungeonData.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SocialData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SocialData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SocialData} SocialData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SocialData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SocialData message.
     * @function verify
     * @memberof SocialData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SocialData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.CharId != null && message.hasOwnProperty("CharId")) {
            properties._CharId = 1;
            if (!$util.isInteger(message.CharId) && !(message.CharId && $util.isInteger(message.CharId.low) && $util.isInteger(message.CharId.high)))
                return "CharId: integer|Long expected";
        }
        if (message.AccountId != null && message.hasOwnProperty("AccountId")) {
            properties._AccountId = 1;
            if (!$util.isString(message.AccountId))
                return "AccountId: string expected";
        }
        if (message.BasicData != null && message.hasOwnProperty("BasicData")) {
            properties._BasicData = 1;
            {
                var error = $root.BasicData.verify(message.BasicData);
                if (error)
                    return "BasicData." + error;
            }
        }
        if (message.AvatarInfo != null && message.hasOwnProperty("AvatarInfo")) {
            properties._AvatarInfo = 1;
            {
                var error = $root.AvatarInfo.verify(message.AvatarInfo);
                if (error)
                    return "AvatarInfo." + error;
            }
        }
        if (message.FaceData != null && message.hasOwnProperty("FaceData")) {
            properties._FaceData = 1;
            {
                var error = $root.FaceData.verify(message.FaceData);
                if (error)
                    return "FaceData." + error;
            }
        }
        if (message.ProfessionData != null && message.hasOwnProperty("ProfessionData")) {
            properties._ProfessionData = 1;
            {
                var error = $root.ProfessionData.verify(message.ProfessionData);
                if (error)
                    return "ProfessionData." + error;
            }
        }
        if (message.EquipData != null && message.hasOwnProperty("EquipData")) {
            properties._EquipData = 1;
            {
                var error = $root.EquipData.verify(message.EquipData);
                if (error)
                    return "EquipData." + error;
            }
        }
        if (message.FashionData != null && message.hasOwnProperty("FashionData")) {
            properties._FashionData = 1;
            {
                var error = $root.FashionData.verify(message.FashionData);
                if (error)
                    return "FashionData." + error;
            }
        }
        if (message.SettingData != null && message.hasOwnProperty("SettingData")) {
            properties._SettingData = 1;
            {
                var error = $root.SettingData.verify(message.SettingData);
                if (error)
                    return "SettingData." + error;
            }
        }
        if (message.SceneData != null && message.hasOwnProperty("SceneData")) {
            properties._SceneData = 1;
            {
                var error = $root.SceneData.verify(message.SceneData);
                if (error)
                    return "SceneData." + error;
            }
        }
        if (message.UserAttrData != null && message.hasOwnProperty("UserAttrData")) {
            properties._UserAttrData = 1;
            {
                var error = $root.UserAttrData.verify(message.UserAttrData);
                if (error)
                    return "UserAttrData." + error;
            }
        }
        if (message.TeamData != null && message.hasOwnProperty("TeamData")) {
            properties._TeamData = 1;
            {
                var error = $root.CharTeam.verify(message.TeamData);
                if (error)
                    return "TeamData." + error;
            }
        }
        if (message.UnionData != null && message.hasOwnProperty("UnionData")) {
            properties._UnionData = 1;
            {
                var error = $root.UnionData.verify(message.UnionData);
                if (error)
                    return "UnionData." + error;
            }
        }
        if (message.AccountData != null && message.hasOwnProperty("AccountData")) {
            properties._AccountData = 1;
            {
                var error = $root.AccountData.verify(message.AccountData);
                if (error)
                    return "AccountData." + error;
            }
        }
        if (message.FunctionData != null && message.hasOwnProperty("FunctionData")) {
            properties._FunctionData = 1;
            {
                var error = $root.FunctionData.verify(message.FunctionData);
                if (error)
                    return "FunctionData." + error;
            }
        }
        if (message.PersonalZone != null && message.hasOwnProperty("PersonalZone")) {
            properties._PersonalZone = 1;
            {
                var error = $root.PersonalZone.verify(message.PersonalZone);
                if (error)
                    return "PersonalZone." + error;
            }
        }
        if (message.Warehouse != null && message.hasOwnProperty("Warehouse")) {
            properties._Warehouse = 1;
            {
                var error = $root.WarehouseData.verify(message.Warehouse);
                if (error)
                    return "Warehouse." + error;
            }
        }
        if (message.SeasonRank != null && message.hasOwnProperty("SeasonRank")) {
            properties._SeasonRank = 1;
            {
                var error = $root.SeasonRankData.verify(message.SeasonRank);
                if (error)
                    return "SeasonRank." + error;
            }
        }
        if (message.FishData != null && message.hasOwnProperty("FishData")) {
            properties._FishData = 1;
            {
                var error = $root.FishSocialData.verify(message.FishData);
                if (error)
                    return "FishData." + error;
            }
        }
        if (message.CommunityData != null && message.hasOwnProperty("CommunityData")) {
            properties._CommunityData = 1;
            {
                var error = $root.CommunityData.verify(message.CommunityData);
                if (error)
                    return "CommunityData." + error;
            }
        }
        if (message.PrivilegeData != null && message.hasOwnProperty("PrivilegeData")) {
            properties._PrivilegeData = 1;
            {
                var error = $root.PrivilegeData.verify(message.PrivilegeData);
                if (error)
                    return "PrivilegeData." + error;
            }
        }
        if (message.MasterModeDungeonData != null && message.hasOwnProperty("MasterModeDungeonData")) {
            properties._MasterModeDungeonData = 1;
            {
                var error = $root.MasterModeDungeonData.verify(message.MasterModeDungeonData);
                if (error)
                    return "MasterModeDungeonData." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SocialData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SocialData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SocialData} SocialData
     */
    SocialData.fromObject = function fromObject(object) {
        if (object instanceof $root.SocialData)
            return object;
        var message = new $root.SocialData();
        if (object.CharId != null)
            if ($util.Long)
                (message.CharId = $util.Long.fromValue(object.CharId)).unsigned = false;
            else if (typeof object.CharId === "string")
                message.CharId = parseInt(object.CharId, 10);
            else if (typeof object.CharId === "number")
                message.CharId = object.CharId;
            else if (typeof object.CharId === "object")
                message.CharId = new $util.LongBits(object.CharId.low >>> 0, object.CharId.high >>> 0).toNumber();
        if (object.AccountId != null)
            message.AccountId = String(object.AccountId);
        if (object.BasicData != null) {
            if (typeof object.BasicData !== "object")
                throw TypeError(".SocialData.BasicData: object expected");
            message.BasicData = $root.BasicData.fromObject(object.BasicData);
        }
        if (object.AvatarInfo != null) {
            if (typeof object.AvatarInfo !== "object")
                throw TypeError(".SocialData.AvatarInfo: object expected");
            message.AvatarInfo = $root.AvatarInfo.fromObject(object.AvatarInfo);
        }
        if (object.FaceData != null) {
            if (typeof object.FaceData !== "object")
                throw TypeError(".SocialData.FaceData: object expected");
            message.FaceData = $root.FaceData.fromObject(object.FaceData);
        }
        if (object.ProfessionData != null) {
            if (typeof object.ProfessionData !== "object")
                throw TypeError(".SocialData.ProfessionData: object expected");
            message.ProfessionData = $root.ProfessionData.fromObject(object.ProfessionData);
        }
        if (object.EquipData != null) {
            if (typeof object.EquipData !== "object")
                throw TypeError(".SocialData.EquipData: object expected");
            message.EquipData = $root.EquipData.fromObject(object.EquipData);
        }
        if (object.FashionData != null) {
            if (typeof object.FashionData !== "object")
                throw TypeError(".SocialData.FashionData: object expected");
            message.FashionData = $root.FashionData.fromObject(object.FashionData);
        }
        if (object.SettingData != null) {
            if (typeof object.SettingData !== "object")
                throw TypeError(".SocialData.SettingData: object expected");
            message.SettingData = $root.SettingData.fromObject(object.SettingData);
        }
        if (object.SceneData != null) {
            if (typeof object.SceneData !== "object")
                throw TypeError(".SocialData.SceneData: object expected");
            message.SceneData = $root.SceneData.fromObject(object.SceneData);
        }
        if (object.UserAttrData != null) {
            if (typeof object.UserAttrData !== "object")
                throw TypeError(".SocialData.UserAttrData: object expected");
            message.UserAttrData = $root.UserAttrData.fromObject(object.UserAttrData);
        }
        if (object.TeamData != null) {
            if (typeof object.TeamData !== "object")
                throw TypeError(".SocialData.TeamData: object expected");
            message.TeamData = $root.CharTeam.fromObject(object.TeamData);
        }
        if (object.UnionData != null) {
            if (typeof object.UnionData !== "object")
                throw TypeError(".SocialData.UnionData: object expected");
            message.UnionData = $root.UnionData.fromObject(object.UnionData);
        }
        if (object.AccountData != null) {
            if (typeof object.AccountData !== "object")
                throw TypeError(".SocialData.AccountData: object expected");
            message.AccountData = $root.AccountData.fromObject(object.AccountData);
        }
        if (object.FunctionData != null) {
            if (typeof object.FunctionData !== "object")
                throw TypeError(".SocialData.FunctionData: object expected");
            message.FunctionData = $root.FunctionData.fromObject(object.FunctionData);
        }
        if (object.PersonalZone != null) {
            if (typeof object.PersonalZone !== "object")
                throw TypeError(".SocialData.PersonalZone: object expected");
            message.PersonalZone = $root.PersonalZone.fromObject(object.PersonalZone);
        }
        if (object.Warehouse != null) {
            if (typeof object.Warehouse !== "object")
                throw TypeError(".SocialData.Warehouse: object expected");
            message.Warehouse = $root.WarehouseData.fromObject(object.Warehouse);
        }
        if (object.SeasonRank != null) {
            if (typeof object.SeasonRank !== "object")
                throw TypeError(".SocialData.SeasonRank: object expected");
            message.SeasonRank = $root.SeasonRankData.fromObject(object.SeasonRank);
        }
        if (object.FishData != null) {
            if (typeof object.FishData !== "object")
                throw TypeError(".SocialData.FishData: object expected");
            message.FishData = $root.FishSocialData.fromObject(object.FishData);
        }
        if (object.CommunityData != null) {
            if (typeof object.CommunityData !== "object")
                throw TypeError(".SocialData.CommunityData: object expected");
            message.CommunityData = $root.CommunityData.fromObject(object.CommunityData);
        }
        if (object.PrivilegeData != null) {
            if (typeof object.PrivilegeData !== "object")
                throw TypeError(".SocialData.PrivilegeData: object expected");
            message.PrivilegeData = $root.PrivilegeData.fromObject(object.PrivilegeData);
        }
        if (object.MasterModeDungeonData != null) {
            if (typeof object.MasterModeDungeonData !== "object")
                throw TypeError(".SocialData.MasterModeDungeonData: object expected");
            message.MasterModeDungeonData = $root.MasterModeDungeonData.fromObject(object.MasterModeDungeonData);
        }
        return message;
    };

    /**
     * Creates a plain object from a SocialData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SocialData
     * @static
     * @param {SocialData} message SocialData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SocialData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.CharId != null && message.hasOwnProperty("CharId")) {
            if (typeof message.CharId === "number")
                object.CharId = options.longs === String ? String(message.CharId) : message.CharId;
            else
                object.CharId = options.longs === String ? $util.Long.prototype.toString.call(message.CharId) : options.longs === Number ? new $util.LongBits(message.CharId.low >>> 0, message.CharId.high >>> 0).toNumber() : message.CharId;
            if (options.oneofs)
                object._CharId = "CharId";
        }
        if (message.AccountId != null && message.hasOwnProperty("AccountId")) {
            object.AccountId = message.AccountId;
            if (options.oneofs)
                object._AccountId = "AccountId";
        }
        if (message.BasicData != null && message.hasOwnProperty("BasicData")) {
            object.BasicData = $root.BasicData.toObject(message.BasicData, options);
            if (options.oneofs)
                object._BasicData = "BasicData";
        }
        if (message.AvatarInfo != null && message.hasOwnProperty("AvatarInfo")) {
            object.AvatarInfo = $root.AvatarInfo.toObject(message.AvatarInfo, options);
            if (options.oneofs)
                object._AvatarInfo = "AvatarInfo";
        }
        if (message.FaceData != null && message.hasOwnProperty("FaceData")) {
            object.FaceData = $root.FaceData.toObject(message.FaceData, options);
            if (options.oneofs)
                object._FaceData = "FaceData";
        }
        if (message.ProfessionData != null && message.hasOwnProperty("ProfessionData")) {
            object.ProfessionData = $root.ProfessionData.toObject(message.ProfessionData, options);
            if (options.oneofs)
                object._ProfessionData = "ProfessionData";
        }
        if (message.EquipData != null && message.hasOwnProperty("EquipData")) {
            object.EquipData = $root.EquipData.toObject(message.EquipData, options);
            if (options.oneofs)
                object._EquipData = "EquipData";
        }
        if (message.FashionData != null && message.hasOwnProperty("FashionData")) {
            object.FashionData = $root.FashionData.toObject(message.FashionData, options);
            if (options.oneofs)
                object._FashionData = "FashionData";
        }
        if (message.SettingData != null && message.hasOwnProperty("SettingData")) {
            object.SettingData = $root.SettingData.toObject(message.SettingData, options);
            if (options.oneofs)
                object._SettingData = "SettingData";
        }
        if (message.SceneData != null && message.hasOwnProperty("SceneData")) {
            object.SceneData = $root.SceneData.toObject(message.SceneData, options);
            if (options.oneofs)
                object._SceneData = "SceneData";
        }
        if (message.UserAttrData != null && message.hasOwnProperty("UserAttrData")) {
            object.UserAttrData = $root.UserAttrData.toObject(message.UserAttrData, options);
            if (options.oneofs)
                object._UserAttrData = "UserAttrData";
        }
        if (message.TeamData != null && message.hasOwnProperty("TeamData")) {
            object.TeamData = $root.CharTeam.toObject(message.TeamData, options);
            if (options.oneofs)
                object._TeamData = "TeamData";
        }
        if (message.UnionData != null && message.hasOwnProperty("UnionData")) {
            object.UnionData = $root.UnionData.toObject(message.UnionData, options);
            if (options.oneofs)
                object._UnionData = "UnionData";
        }
        if (message.AccountData != null && message.hasOwnProperty("AccountData")) {
            object.AccountData = $root.AccountData.toObject(message.AccountData, options);
            if (options.oneofs)
                object._AccountData = "AccountData";
        }
        if (message.FunctionData != null && message.hasOwnProperty("FunctionData")) {
            object.FunctionData = $root.FunctionData.toObject(message.FunctionData, options);
            if (options.oneofs)
                object._FunctionData = "FunctionData";
        }
        if (message.PersonalZone != null && message.hasOwnProperty("PersonalZone")) {
            object.PersonalZone = $root.PersonalZone.toObject(message.PersonalZone, options);
            if (options.oneofs)
                object._PersonalZone = "PersonalZone";
        }
        if (message.Warehouse != null && message.hasOwnProperty("Warehouse")) {
            object.Warehouse = $root.WarehouseData.toObject(message.Warehouse, options);
            if (options.oneofs)
                object._Warehouse = "Warehouse";
        }
        if (message.SeasonRank != null && message.hasOwnProperty("SeasonRank")) {
            object.SeasonRank = $root.SeasonRankData.toObject(message.SeasonRank, options);
            if (options.oneofs)
                object._SeasonRank = "SeasonRank";
        }
        if (message.FishData != null && message.hasOwnProperty("FishData")) {
            object.FishData = $root.FishSocialData.toObject(message.FishData, options);
            if (options.oneofs)
                object._FishData = "FishData";
        }
        if (message.CommunityData != null && message.hasOwnProperty("CommunityData")) {
            object.CommunityData = $root.CommunityData.toObject(message.CommunityData, options);
            if (options.oneofs)
                object._CommunityData = "CommunityData";
        }
        if (message.PrivilegeData != null && message.hasOwnProperty("PrivilegeData")) {
            object.PrivilegeData = $root.PrivilegeData.toObject(message.PrivilegeData, options);
            if (options.oneofs)
                object._PrivilegeData = "PrivilegeData";
        }
        if (message.MasterModeDungeonData != null && message.hasOwnProperty("MasterModeDungeonData")) {
            object.MasterModeDungeonData = $root.MasterModeDungeonData.toObject(message.MasterModeDungeonData, options);
            if (options.oneofs)
                object._MasterModeDungeonData = "MasterModeDungeonData";
        }
        return object;
    };

    /**
     * Converts this SocialData to JSON.
     * @function toJSON
     * @memberof SocialData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SocialData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SocialData
     * @function getTypeUrl
     * @memberof SocialData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SocialData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SocialData";
    };

    return SocialData;
})();

$root.GetSocialDataReply = (function() {

    /**
     * Properties of a GetSocialDataReply.
     * @exports IGetSocialDataReply
     * @interface IGetSocialDataReply
     * @property {number|Long|null} [Mask] GetSocialDataReply Mask
     * @property {ISocialData|null} [Data] GetSocialDataReply Data
     * @property {number|null} [ErrCode] GetSocialDataReply ErrCode
     */

    /**
     * Constructs a new GetSocialDataReply.
     * @exports GetSocialDataReply
     * @classdesc Represents a GetSocialDataReply.
     * @implements IGetSocialDataReply
     * @constructor
     * @param {IGetSocialDataReply=} [properties] Properties to set
     */
    function GetSocialDataReply(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * GetSocialDataReply Mask.
     * @member {number|Long|null|undefined} Mask
     * @memberof GetSocialDataReply
     * @instance
     */
    GetSocialDataReply.prototype.Mask = null;

    /**
     * GetSocialDataReply Data.
     * @member {ISocialData|null|undefined} Data
     * @memberof GetSocialDataReply
     * @instance
     */
    GetSocialDataReply.prototype.Data = null;

    /**
     * GetSocialDataReply ErrCode.
     * @member {number|null|undefined} ErrCode
     * @memberof GetSocialDataReply
     * @instance
     */
    GetSocialDataReply.prototype.ErrCode = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * GetSocialDataReply _Mask.
     * @member {"Mask"|undefined} _Mask
     * @memberof GetSocialDataReply
     * @instance
     */
    Object.defineProperty(GetSocialDataReply.prototype, "_Mask", {
        get: $util.oneOfGetter($oneOfFields = ["Mask"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * GetSocialDataReply _Data.
     * @member {"Data"|undefined} _Data
     * @memberof GetSocialDataReply
     * @instance
     */
    Object.defineProperty(GetSocialDataReply.prototype, "_Data", {
        get: $util.oneOfGetter($oneOfFields = ["Data"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * GetSocialDataReply _ErrCode.
     * @member {"ErrCode"|undefined} _ErrCode
     * @memberof GetSocialDataReply
     * @instance
     */
    Object.defineProperty(GetSocialDataReply.prototype, "_ErrCode", {
        get: $util.oneOfGetter($oneOfFields = ["ErrCode"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new GetSocialDataReply instance using the specified properties.
     * @function create
     * @memberof GetSocialDataReply
     * @static
     * @param {IGetSocialDataReply=} [properties] Properties to set
     * @returns {GetSocialDataReply} GetSocialDataReply instance
     */
    GetSocialDataReply.create = function create(properties) {
        return new GetSocialDataReply(properties);
    };

    /**
     * Encodes the specified GetSocialDataReply message. Does not implicitly {@link GetSocialDataReply.verify|verify} messages.
     * @function encode
     * @memberof GetSocialDataReply
     * @static
     * @param {IGetSocialDataReply} message GetSocialDataReply message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GetSocialDataReply.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Mask != null && Object.hasOwnProperty.call(message, "Mask"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.Mask);
        if (message.Data != null && Object.hasOwnProperty.call(message, "Data"))
            $root.SocialData.encode(message.Data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.ErrCode != null && Object.hasOwnProperty.call(message, "ErrCode"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ErrCode);
        return writer;
    };

    /**
     * Encodes the specified GetSocialDataReply message, length delimited. Does not implicitly {@link GetSocialDataReply.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetSocialDataReply
     * @static
     * @param {IGetSocialDataReply} message GetSocialDataReply message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GetSocialDataReply.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a GetSocialDataReply message from the specified reader or buffer.
     * @function decode
     * @memberof GetSocialDataReply
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetSocialDataReply} GetSocialDataReply
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GetSocialDataReply.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetSocialDataReply();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Mask = reader.int64();
                    break;
                }
            case 2: {
                    message.Data = $root.SocialData.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.ErrCode = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a GetSocialDataReply message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetSocialDataReply
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetSocialDataReply} GetSocialDataReply
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GetSocialDataReply.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a GetSocialDataReply message.
     * @function verify
     * @memberof GetSocialDataReply
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    GetSocialDataReply.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Mask != null && message.hasOwnProperty("Mask")) {
            properties._Mask = 1;
            if (!$util.isInteger(message.Mask) && !(message.Mask && $util.isInteger(message.Mask.low) && $util.isInteger(message.Mask.high)))
                return "Mask: integer|Long expected";
        }
        if (message.Data != null && message.hasOwnProperty("Data")) {
            properties._Data = 1;
            {
                var error = $root.SocialData.verify(message.Data);
                if (error)
                    return "Data." + error;
            }
        }
        if (message.ErrCode != null && message.hasOwnProperty("ErrCode")) {
            properties._ErrCode = 1;
            if (!$util.isInteger(message.ErrCode))
                return "ErrCode: integer expected";
        }
        return null;
    };

    /**
     * Creates a GetSocialDataReply message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetSocialDataReply
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetSocialDataReply} GetSocialDataReply
     */
    GetSocialDataReply.fromObject = function fromObject(object) {
        if (object instanceof $root.GetSocialDataReply)
            return object;
        var message = new $root.GetSocialDataReply();
        if (object.Mask != null)
            if ($util.Long)
                (message.Mask = $util.Long.fromValue(object.Mask)).unsigned = false;
            else if (typeof object.Mask === "string")
                message.Mask = parseInt(object.Mask, 10);
            else if (typeof object.Mask === "number")
                message.Mask = object.Mask;
            else if (typeof object.Mask === "object")
                message.Mask = new $util.LongBits(object.Mask.low >>> 0, object.Mask.high >>> 0).toNumber();
        if (object.Data != null) {
            if (typeof object.Data !== "object")
                throw TypeError(".GetSocialDataReply.Data: object expected");
            message.Data = $root.SocialData.fromObject(object.Data);
        }
        if (object.ErrCode != null)
            message.ErrCode = object.ErrCode >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a GetSocialDataReply message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetSocialDataReply
     * @static
     * @param {GetSocialDataReply} message GetSocialDataReply
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    GetSocialDataReply.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Mask != null && message.hasOwnProperty("Mask")) {
            if (typeof message.Mask === "number")
                object.Mask = options.longs === String ? String(message.Mask) : message.Mask;
            else
                object.Mask = options.longs === String ? $util.Long.prototype.toString.call(message.Mask) : options.longs === Number ? new $util.LongBits(message.Mask.low >>> 0, message.Mask.high >>> 0).toNumber() : message.Mask;
            if (options.oneofs)
                object._Mask = "Mask";
        }
        if (message.Data != null && message.hasOwnProperty("Data")) {
            object.Data = $root.SocialData.toObject(message.Data, options);
            if (options.oneofs)
                object._Data = "Data";
        }
        if (message.ErrCode != null && message.hasOwnProperty("ErrCode")) {
            object.ErrCode = message.ErrCode;
            if (options.oneofs)
                object._ErrCode = "ErrCode";
        }
        return object;
    };

    /**
     * Converts this GetSocialDataReply to JSON.
     * @function toJSON
     * @memberof GetSocialDataReply
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    GetSocialDataReply.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for GetSocialDataReply
     * @function getTypeUrl
     * @memberof GetSocialDataReply
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    GetSocialDataReply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/GetSocialDataReply";
    };

    return GetSocialDataReply;
})();

$root.ReturnMessageWrapper = (function() {

    /**
     * Properties of a ReturnMessageWrapper.
     * @exports IReturnMessageWrapper
     * @interface IReturnMessageWrapper
     * @property {IGetSocialDataReply|null} [Message] ReturnMessageWrapper Message
     */

    /**
     * Constructs a new ReturnMessageWrapper.
     * @exports ReturnMessageWrapper
     * @classdesc Represents a ReturnMessageWrapper.
     * @implements IReturnMessageWrapper
     * @constructor
     * @param {IReturnMessageWrapper=} [properties] Properties to set
     */
    function ReturnMessageWrapper(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ReturnMessageWrapper Message.
     * @member {IGetSocialDataReply|null|undefined} Message
     * @memberof ReturnMessageWrapper
     * @instance
     */
    ReturnMessageWrapper.prototype.Message = null;

    /**
     * Creates a new ReturnMessageWrapper instance using the specified properties.
     * @function create
     * @memberof ReturnMessageWrapper
     * @static
     * @param {IReturnMessageWrapper=} [properties] Properties to set
     * @returns {ReturnMessageWrapper} ReturnMessageWrapper instance
     */
    ReturnMessageWrapper.create = function create(properties) {
        return new ReturnMessageWrapper(properties);
    };

    /**
     * Encodes the specified ReturnMessageWrapper message. Does not implicitly {@link ReturnMessageWrapper.verify|verify} messages.
     * @function encode
     * @memberof ReturnMessageWrapper
     * @static
     * @param {IReturnMessageWrapper} message ReturnMessageWrapper message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ReturnMessageWrapper.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Message != null && Object.hasOwnProperty.call(message, "Message"))
            $root.GetSocialDataReply.encode(message.Message, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ReturnMessageWrapper message, length delimited. Does not implicitly {@link ReturnMessageWrapper.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ReturnMessageWrapper
     * @static
     * @param {IReturnMessageWrapper} message ReturnMessageWrapper message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ReturnMessageWrapper.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ReturnMessageWrapper message from the specified reader or buffer.
     * @function decode
     * @memberof ReturnMessageWrapper
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ReturnMessageWrapper} ReturnMessageWrapper
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ReturnMessageWrapper.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReturnMessageWrapper();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Message = $root.GetSocialDataReply.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ReturnMessageWrapper message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ReturnMessageWrapper
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ReturnMessageWrapper} ReturnMessageWrapper
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ReturnMessageWrapper.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ReturnMessageWrapper message.
     * @function verify
     * @memberof ReturnMessageWrapper
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ReturnMessageWrapper.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.Message != null && message.hasOwnProperty("Message")) {
            var error = $root.GetSocialDataReply.verify(message.Message);
            if (error)
                return "Message." + error;
        }
        return null;
    };

    /**
     * Creates a ReturnMessageWrapper message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ReturnMessageWrapper
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ReturnMessageWrapper} ReturnMessageWrapper
     */
    ReturnMessageWrapper.fromObject = function fromObject(object) {
        if (object instanceof $root.ReturnMessageWrapper)
            return object;
        var message = new $root.ReturnMessageWrapper();
        if (object.Message != null) {
            if (typeof object.Message !== "object")
                throw TypeError(".ReturnMessageWrapper.Message: object expected");
            message.Message = $root.GetSocialDataReply.fromObject(object.Message);
        }
        return message;
    };

    /**
     * Creates a plain object from a ReturnMessageWrapper message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ReturnMessageWrapper
     * @static
     * @param {ReturnMessageWrapper} message ReturnMessageWrapper
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ReturnMessageWrapper.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.Message = null;
        if (message.Message != null && message.hasOwnProperty("Message"))
            object.Message = $root.GetSocialDataReply.toObject(message.Message, options);
        return object;
    };

    /**
     * Converts this ReturnMessageWrapper to JSON.
     * @function toJSON
     * @memberof ReturnMessageWrapper
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ReturnMessageWrapper.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ReturnMessageWrapper
     * @function getTypeUrl
     * @memberof ReturnMessageWrapper
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ReturnMessageWrapper.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ReturnMessageWrapper";
    };

    return ReturnMessageWrapper;
})();

/**
 * EUserTransferType enum.
 * @exports EUserTransferType
 * @enum {number}
 * @property {number} EUserTransferTypeDefault=0 EUserTransferTypeDefault value
 * @property {number} EUserTransferTypeScenePosition=1 EUserTransferTypeScenePosition value
 * @property {number} EUserTransferTypeScenePosId=2 EUserTransferTypeScenePosId value
 * @property {number} EUserTransferTypePivot=3 EUserTransferTypePivot value
 * @property {number} EUserTransferTypeCutScene=4 EUserTransferTypeCutScene value
 * @property {number} EUserTransferTypeNear=5 EUserTransferTypeNear value
 */
$root.EUserTransferType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EUserTransferTypeDefault"] = 0;
    values[valuesById[1] = "EUserTransferTypeScenePosition"] = 1;
    values[valuesById[2] = "EUserTransferTypeScenePosId"] = 2;
    values[valuesById[3] = "EUserTransferTypePivot"] = 3;
    values[valuesById[4] = "EUserTransferTypeCutScene"] = 4;
    values[valuesById[5] = "EUserTransferTypeNear"] = 5;
    return values;
})();

$root.ScenePointInfo = (function() {

    /**
     * Properties of a ScenePointInfo.
     * @exports IScenePointInfo
     * @interface IScenePointInfo
     * @property {IPosition|null} [Position] ScenePointInfo Position
     * @property {number|null} [CameraId] ScenePointInfo CameraId
     * @property {number|null} [SceneAreaId] ScenePointInfo SceneAreaId
     */

    /**
     * Constructs a new ScenePointInfo.
     * @exports ScenePointInfo
     * @classdesc Represents a ScenePointInfo.
     * @implements IScenePointInfo
     * @constructor
     * @param {IScenePointInfo=} [properties] Properties to set
     */
    function ScenePointInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ScenePointInfo Position.
     * @member {IPosition|null|undefined} Position
     * @memberof ScenePointInfo
     * @instance
     */
    ScenePointInfo.prototype.Position = null;

    /**
     * ScenePointInfo CameraId.
     * @member {number|null|undefined} CameraId
     * @memberof ScenePointInfo
     * @instance
     */
    ScenePointInfo.prototype.CameraId = null;

    /**
     * ScenePointInfo SceneAreaId.
     * @member {number|null|undefined} SceneAreaId
     * @memberof ScenePointInfo
     * @instance
     */
    ScenePointInfo.prototype.SceneAreaId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * ScenePointInfo _Position.
     * @member {"Position"|undefined} _Position
     * @memberof ScenePointInfo
     * @instance
     */
    Object.defineProperty(ScenePointInfo.prototype, "_Position", {
        get: $util.oneOfGetter($oneOfFields = ["Position"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * ScenePointInfo _CameraId.
     * @member {"CameraId"|undefined} _CameraId
     * @memberof ScenePointInfo
     * @instance
     */
    Object.defineProperty(ScenePointInfo.prototype, "_CameraId", {
        get: $util.oneOfGetter($oneOfFields = ["CameraId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * ScenePointInfo _SceneAreaId.
     * @member {"SceneAreaId"|undefined} _SceneAreaId
     * @memberof ScenePointInfo
     * @instance
     */
    Object.defineProperty(ScenePointInfo.prototype, "_SceneAreaId", {
        get: $util.oneOfGetter($oneOfFields = ["SceneAreaId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new ScenePointInfo instance using the specified properties.
     * @function create
     * @memberof ScenePointInfo
     * @static
     * @param {IScenePointInfo=} [properties] Properties to set
     * @returns {ScenePointInfo} ScenePointInfo instance
     */
    ScenePointInfo.create = function create(properties) {
        return new ScenePointInfo(properties);
    };

    /**
     * Encodes the specified ScenePointInfo message. Does not implicitly {@link ScenePointInfo.verify|verify} messages.
     * @function encode
     * @memberof ScenePointInfo
     * @static
     * @param {IScenePointInfo} message ScenePointInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ScenePointInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Position != null && Object.hasOwnProperty.call(message, "Position"))
            $root.Position.encode(message.Position, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.CameraId != null && Object.hasOwnProperty.call(message, "CameraId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.CameraId);
        if (message.SceneAreaId != null && Object.hasOwnProperty.call(message, "SceneAreaId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.SceneAreaId);
        return writer;
    };

    /**
     * Encodes the specified ScenePointInfo message, length delimited. Does not implicitly {@link ScenePointInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ScenePointInfo
     * @static
     * @param {IScenePointInfo} message ScenePointInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ScenePointInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ScenePointInfo message from the specified reader or buffer.
     * @function decode
     * @memberof ScenePointInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ScenePointInfo} ScenePointInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ScenePointInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ScenePointInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Position = $root.Position.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.CameraId = reader.int32();
                    break;
                }
            case 3: {
                    message.SceneAreaId = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ScenePointInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ScenePointInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ScenePointInfo} ScenePointInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ScenePointInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ScenePointInfo message.
     * @function verify
     * @memberof ScenePointInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ScenePointInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Position != null && message.hasOwnProperty("Position")) {
            properties._Position = 1;
            {
                var error = $root.Position.verify(message.Position);
                if (error)
                    return "Position." + error;
            }
        }
        if (message.CameraId != null && message.hasOwnProperty("CameraId")) {
            properties._CameraId = 1;
            if (!$util.isInteger(message.CameraId))
                return "CameraId: integer expected";
        }
        if (message.SceneAreaId != null && message.hasOwnProperty("SceneAreaId")) {
            properties._SceneAreaId = 1;
            if (!$util.isInteger(message.SceneAreaId))
                return "SceneAreaId: integer expected";
        }
        return null;
    };

    /**
     * Creates a ScenePointInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ScenePointInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ScenePointInfo} ScenePointInfo
     */
    ScenePointInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.ScenePointInfo)
            return object;
        var message = new $root.ScenePointInfo();
        if (object.Position != null) {
            if (typeof object.Position !== "object")
                throw TypeError(".ScenePointInfo.Position: object expected");
            message.Position = $root.Position.fromObject(object.Position);
        }
        if (object.CameraId != null)
            message.CameraId = object.CameraId | 0;
        if (object.SceneAreaId != null)
            message.SceneAreaId = object.SceneAreaId | 0;
        return message;
    };

    /**
     * Creates a plain object from a ScenePointInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ScenePointInfo
     * @static
     * @param {ScenePointInfo} message ScenePointInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ScenePointInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Position != null && message.hasOwnProperty("Position")) {
            object.Position = $root.Position.toObject(message.Position, options);
            if (options.oneofs)
                object._Position = "Position";
        }
        if (message.CameraId != null && message.hasOwnProperty("CameraId")) {
            object.CameraId = message.CameraId;
            if (options.oneofs)
                object._CameraId = "CameraId";
        }
        if (message.SceneAreaId != null && message.hasOwnProperty("SceneAreaId")) {
            object.SceneAreaId = message.SceneAreaId;
            if (options.oneofs)
                object._SceneAreaId = "SceneAreaId";
        }
        return object;
    };

    /**
     * Converts this ScenePointInfo to JSON.
     * @function toJSON
     * @memberof ScenePointInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ScenePointInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ScenePointInfo
     * @function getTypeUrl
     * @memberof ScenePointInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ScenePointInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ScenePointInfo";
    };

    return ScenePointInfo;
})();

$root.ScenePosIdInfo = (function() {

    /**
     * Properties of a ScenePosIdInfo.
     * @exports IScenePosIdInfo
     * @interface IScenePosIdInfo
     * @property {number|null} [ScenePosId] ScenePosIdInfo ScenePosId
     */

    /**
     * Constructs a new ScenePosIdInfo.
     * @exports ScenePosIdInfo
     * @classdesc Represents a ScenePosIdInfo.
     * @implements IScenePosIdInfo
     * @constructor
     * @param {IScenePosIdInfo=} [properties] Properties to set
     */
    function ScenePosIdInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ScenePosIdInfo ScenePosId.
     * @member {number|null|undefined} ScenePosId
     * @memberof ScenePosIdInfo
     * @instance
     */
    ScenePosIdInfo.prototype.ScenePosId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * ScenePosIdInfo _ScenePosId.
     * @member {"ScenePosId"|undefined} _ScenePosId
     * @memberof ScenePosIdInfo
     * @instance
     */
    Object.defineProperty(ScenePosIdInfo.prototype, "_ScenePosId", {
        get: $util.oneOfGetter($oneOfFields = ["ScenePosId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new ScenePosIdInfo instance using the specified properties.
     * @function create
     * @memberof ScenePosIdInfo
     * @static
     * @param {IScenePosIdInfo=} [properties] Properties to set
     * @returns {ScenePosIdInfo} ScenePosIdInfo instance
     */
    ScenePosIdInfo.create = function create(properties) {
        return new ScenePosIdInfo(properties);
    };

    /**
     * Encodes the specified ScenePosIdInfo message. Does not implicitly {@link ScenePosIdInfo.verify|verify} messages.
     * @function encode
     * @memberof ScenePosIdInfo
     * @static
     * @param {IScenePosIdInfo} message ScenePosIdInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ScenePosIdInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ScenePosId != null && Object.hasOwnProperty.call(message, "ScenePosId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ScenePosId);
        return writer;
    };

    /**
     * Encodes the specified ScenePosIdInfo message, length delimited. Does not implicitly {@link ScenePosIdInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ScenePosIdInfo
     * @static
     * @param {IScenePosIdInfo} message ScenePosIdInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ScenePosIdInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ScenePosIdInfo message from the specified reader or buffer.
     * @function decode
     * @memberof ScenePosIdInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ScenePosIdInfo} ScenePosIdInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ScenePosIdInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ScenePosIdInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.ScenePosId = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ScenePosIdInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ScenePosIdInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ScenePosIdInfo} ScenePosIdInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ScenePosIdInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ScenePosIdInfo message.
     * @function verify
     * @memberof ScenePosIdInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ScenePosIdInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.ScenePosId != null && message.hasOwnProperty("ScenePosId")) {
            properties._ScenePosId = 1;
            if (!$util.isInteger(message.ScenePosId))
                return "ScenePosId: integer expected";
        }
        return null;
    };

    /**
     * Creates a ScenePosIdInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ScenePosIdInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ScenePosIdInfo} ScenePosIdInfo
     */
    ScenePosIdInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.ScenePosIdInfo)
            return object;
        var message = new $root.ScenePosIdInfo();
        if (object.ScenePosId != null)
            message.ScenePosId = object.ScenePosId | 0;
        return message;
    };

    /**
     * Creates a plain object from a ScenePosIdInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ScenePosIdInfo
     * @static
     * @param {ScenePosIdInfo} message ScenePosIdInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ScenePosIdInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.ScenePosId != null && message.hasOwnProperty("ScenePosId")) {
            object.ScenePosId = message.ScenePosId;
            if (options.oneofs)
                object._ScenePosId = "ScenePosId";
        }
        return object;
    };

    /**
     * Converts this ScenePosIdInfo to JSON.
     * @function toJSON
     * @memberof ScenePosIdInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ScenePosIdInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ScenePosIdInfo
     * @function getTypeUrl
     * @memberof ScenePosIdInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ScenePosIdInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ScenePosIdInfo";
    };

    return ScenePosIdInfo;
})();

$root.CutScenePointInfo = (function() {

    /**
     * Properties of a CutScenePointInfo.
     * @exports ICutScenePointInfo
     * @interface ICutScenePointInfo
     * @property {number|null} [CutSceneId] CutScenePointInfo CutSceneId
     */

    /**
     * Constructs a new CutScenePointInfo.
     * @exports CutScenePointInfo
     * @classdesc Represents a CutScenePointInfo.
     * @implements ICutScenePointInfo
     * @constructor
     * @param {ICutScenePointInfo=} [properties] Properties to set
     */
    function CutScenePointInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CutScenePointInfo CutSceneId.
     * @member {number|null|undefined} CutSceneId
     * @memberof CutScenePointInfo
     * @instance
     */
    CutScenePointInfo.prototype.CutSceneId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * CutScenePointInfo _CutSceneId.
     * @member {"CutSceneId"|undefined} _CutSceneId
     * @memberof CutScenePointInfo
     * @instance
     */
    Object.defineProperty(CutScenePointInfo.prototype, "_CutSceneId", {
        get: $util.oneOfGetter($oneOfFields = ["CutSceneId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new CutScenePointInfo instance using the specified properties.
     * @function create
     * @memberof CutScenePointInfo
     * @static
     * @param {ICutScenePointInfo=} [properties] Properties to set
     * @returns {CutScenePointInfo} CutScenePointInfo instance
     */
    CutScenePointInfo.create = function create(properties) {
        return new CutScenePointInfo(properties);
    };

    /**
     * Encodes the specified CutScenePointInfo message. Does not implicitly {@link CutScenePointInfo.verify|verify} messages.
     * @function encode
     * @memberof CutScenePointInfo
     * @static
     * @param {ICutScenePointInfo} message CutScenePointInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CutScenePointInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.CutSceneId != null && Object.hasOwnProperty.call(message, "CutSceneId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.CutSceneId);
        return writer;
    };

    /**
     * Encodes the specified CutScenePointInfo message, length delimited. Does not implicitly {@link CutScenePointInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CutScenePointInfo
     * @static
     * @param {ICutScenePointInfo} message CutScenePointInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CutScenePointInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CutScenePointInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CutScenePointInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CutScenePointInfo} CutScenePointInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CutScenePointInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CutScenePointInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.CutSceneId = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CutScenePointInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CutScenePointInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CutScenePointInfo} CutScenePointInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CutScenePointInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CutScenePointInfo message.
     * @function verify
     * @memberof CutScenePointInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CutScenePointInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.CutSceneId != null && message.hasOwnProperty("CutSceneId")) {
            properties._CutSceneId = 1;
            if (!$util.isInteger(message.CutSceneId))
                return "CutSceneId: integer expected";
        }
        return null;
    };

    /**
     * Creates a CutScenePointInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CutScenePointInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CutScenePointInfo} CutScenePointInfo
     */
    CutScenePointInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CutScenePointInfo)
            return object;
        var message = new $root.CutScenePointInfo();
        if (object.CutSceneId != null)
            message.CutSceneId = object.CutSceneId | 0;
        return message;
    };

    /**
     * Creates a plain object from a CutScenePointInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CutScenePointInfo
     * @static
     * @param {CutScenePointInfo} message CutScenePointInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CutScenePointInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.CutSceneId != null && message.hasOwnProperty("CutSceneId")) {
            object.CutSceneId = message.CutSceneId;
            if (options.oneofs)
                object._CutSceneId = "CutSceneId";
        }
        return object;
    };

    /**
     * Converts this CutScenePointInfo to JSON.
     * @function toJSON
     * @memberof CutScenePointInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CutScenePointInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CutScenePointInfo
     * @function getTypeUrl
     * @memberof CutScenePointInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CutScenePointInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CutScenePointInfo";
    };

    return CutScenePointInfo;
})();

/**
 * ESceneLineStatus enum.
 * @exports ESceneLineStatus
 * @enum {number}
 * @property {number} SceneLineStatusNone=0 SceneLineStatusNone value
 * @property {number} SceneLineStatusLow=1 SceneLineStatusLow value
 * @property {number} SceneLineStatusMedium=2 SceneLineStatusMedium value
 * @property {number} SceneLineStatusHigh=3 SceneLineStatusHigh value
 * @property {number} SceneLineStatusFull=4 SceneLineStatusFull value
 * @property {number} SceneLineStatusRecycle=5 SceneLineStatusRecycle value
 */
$root.ESceneLineStatus = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "SceneLineStatusNone"] = 0;
    values[valuesById[1] = "SceneLineStatusLow"] = 1;
    values[valuesById[2] = "SceneLineStatusMedium"] = 2;
    values[valuesById[3] = "SceneLineStatusHigh"] = 3;
    values[valuesById[4] = "SceneLineStatusFull"] = 4;
    values[valuesById[5] = "SceneLineStatusRecycle"] = 5;
    return values;
})();

$root.SceneLineData = (function() {

    /**
     * Properties of a SceneLineData.
     * @exports ISceneLineData
     * @interface ISceneLineData
     * @property {number|null} [LineId] SceneLineData LineId
     * @property {ESceneLineStatus|null} [Status] SceneLineData Status
     * @property {string|null} [SceneGuid] SceneLineData SceneGuid
     */

    /**
     * Constructs a new SceneLineData.
     * @exports SceneLineData
     * @classdesc Represents a SceneLineData.
     * @implements ISceneLineData
     * @constructor
     * @param {ISceneLineData=} [properties] Properties to set
     */
    function SceneLineData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SceneLineData LineId.
     * @member {number|null|undefined} LineId
     * @memberof SceneLineData
     * @instance
     */
    SceneLineData.prototype.LineId = null;

    /**
     * SceneLineData Status.
     * @member {ESceneLineStatus|null|undefined} Status
     * @memberof SceneLineData
     * @instance
     */
    SceneLineData.prototype.Status = null;

    /**
     * SceneLineData SceneGuid.
     * @member {string|null|undefined} SceneGuid
     * @memberof SceneLineData
     * @instance
     */
    SceneLineData.prototype.SceneGuid = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * SceneLineData _LineId.
     * @member {"LineId"|undefined} _LineId
     * @memberof SceneLineData
     * @instance
     */
    Object.defineProperty(SceneLineData.prototype, "_LineId", {
        get: $util.oneOfGetter($oneOfFields = ["LineId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneLineData _Status.
     * @member {"Status"|undefined} _Status
     * @memberof SceneLineData
     * @instance
     */
    Object.defineProperty(SceneLineData.prototype, "_Status", {
        get: $util.oneOfGetter($oneOfFields = ["Status"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SceneLineData _SceneGuid.
     * @member {"SceneGuid"|undefined} _SceneGuid
     * @memberof SceneLineData
     * @instance
     */
    Object.defineProperty(SceneLineData.prototype, "_SceneGuid", {
        get: $util.oneOfGetter($oneOfFields = ["SceneGuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new SceneLineData instance using the specified properties.
     * @function create
     * @memberof SceneLineData
     * @static
     * @param {ISceneLineData=} [properties] Properties to set
     * @returns {SceneLineData} SceneLineData instance
     */
    SceneLineData.create = function create(properties) {
        return new SceneLineData(properties);
    };

    /**
     * Encodes the specified SceneLineData message. Does not implicitly {@link SceneLineData.verify|verify} messages.
     * @function encode
     * @memberof SceneLineData
     * @static
     * @param {ISceneLineData} message SceneLineData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SceneLineData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.LineId != null && Object.hasOwnProperty.call(message, "LineId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.LineId);
        if (message.Status != null && Object.hasOwnProperty.call(message, "Status"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Status);
        if (message.SceneGuid != null && Object.hasOwnProperty.call(message, "SceneGuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.SceneGuid);
        return writer;
    };

    /**
     * Encodes the specified SceneLineData message, length delimited. Does not implicitly {@link SceneLineData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SceneLineData
     * @static
     * @param {ISceneLineData} message SceneLineData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SceneLineData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SceneLineData message from the specified reader or buffer.
     * @function decode
     * @memberof SceneLineData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SceneLineData} SceneLineData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SceneLineData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SceneLineData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.LineId = reader.uint32();
                    break;
                }
            case 2: {
                    message.Status = reader.int32();
                    break;
                }
            case 3: {
                    message.SceneGuid = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SceneLineData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SceneLineData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SceneLineData} SceneLineData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SceneLineData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SceneLineData message.
     * @function verify
     * @memberof SceneLineData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SceneLineData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.LineId != null && message.hasOwnProperty("LineId")) {
            properties._LineId = 1;
            if (!$util.isInteger(message.LineId))
                return "LineId: integer expected";
        }
        if (message.Status != null && message.hasOwnProperty("Status")) {
            properties._Status = 1;
            switch (message.Status) {
            default:
                return "Status: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        }
        if (message.SceneGuid != null && message.hasOwnProperty("SceneGuid")) {
            properties._SceneGuid = 1;
            if (!$util.isString(message.SceneGuid))
                return "SceneGuid: string expected";
        }
        return null;
    };

    /**
     * Creates a SceneLineData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SceneLineData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SceneLineData} SceneLineData
     */
    SceneLineData.fromObject = function fromObject(object) {
        if (object instanceof $root.SceneLineData)
            return object;
        var message = new $root.SceneLineData();
        if (object.LineId != null)
            message.LineId = object.LineId >>> 0;
        switch (object.Status) {
        default:
            if (typeof object.Status === "number") {
                message.Status = object.Status;
                break;
            }
            break;
        case "SceneLineStatusNone":
        case 0:
            message.Status = 0;
            break;
        case "SceneLineStatusLow":
        case 1:
            message.Status = 1;
            break;
        case "SceneLineStatusMedium":
        case 2:
            message.Status = 2;
            break;
        case "SceneLineStatusHigh":
        case 3:
            message.Status = 3;
            break;
        case "SceneLineStatusFull":
        case 4:
            message.Status = 4;
            break;
        case "SceneLineStatusRecycle":
        case 5:
            message.Status = 5;
            break;
        }
        if (object.SceneGuid != null)
            message.SceneGuid = String(object.SceneGuid);
        return message;
    };

    /**
     * Creates a plain object from a SceneLineData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SceneLineData
     * @static
     * @param {SceneLineData} message SceneLineData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SceneLineData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.LineId != null && message.hasOwnProperty("LineId")) {
            object.LineId = message.LineId;
            if (options.oneofs)
                object._LineId = "LineId";
        }
        if (message.Status != null && message.hasOwnProperty("Status")) {
            object.Status = options.enums === String ? $root.ESceneLineStatus[message.Status] === undefined ? message.Status : $root.ESceneLineStatus[message.Status] : message.Status;
            if (options.oneofs)
                object._Status = "Status";
        }
        if (message.SceneGuid != null && message.hasOwnProperty("SceneGuid")) {
            object.SceneGuid = message.SceneGuid;
            if (options.oneofs)
                object._SceneGuid = "SceneGuid";
        }
        return object;
    };

    /**
     * Converts this SceneLineData to JSON.
     * @function toJSON
     * @memberof SceneLineData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SceneLineData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SceneLineData
     * @function getTypeUrl
     * @memberof SceneLineData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SceneLineData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SceneLineData";
    };

    return SceneLineData;
})();

$root.PositionParam = (function() {

    /**
     * Properties of a PositionParam.
     * @exports IPositionParam
     * @interface IPositionParam
     * @property {IScenePointInfo|null} [ScenePointInfo] PositionParam ScenePointInfo
     * @property {IScenePosIdInfo|null} [ScenePosInfo] PositionParam ScenePosInfo
     * @property {ICutScenePointInfo|null} [CutScenePointInfo] PositionParam CutScenePointInfo
     */

    /**
     * Constructs a new PositionParam.
     * @exports PositionParam
     * @classdesc Represents a PositionParam.
     * @implements IPositionParam
     * @constructor
     * @param {IPositionParam=} [properties] Properties to set
     */
    function PositionParam(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PositionParam ScenePointInfo.
     * @member {IScenePointInfo|null|undefined} ScenePointInfo
     * @memberof PositionParam
     * @instance
     */
    PositionParam.prototype.ScenePointInfo = null;

    /**
     * PositionParam ScenePosInfo.
     * @member {IScenePosIdInfo|null|undefined} ScenePosInfo
     * @memberof PositionParam
     * @instance
     */
    PositionParam.prototype.ScenePosInfo = null;

    /**
     * PositionParam CutScenePointInfo.
     * @member {ICutScenePointInfo|null|undefined} CutScenePointInfo
     * @memberof PositionParam
     * @instance
     */
    PositionParam.prototype.CutScenePointInfo = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * PositionParam _ScenePointInfo.
     * @member {"ScenePointInfo"|undefined} _ScenePointInfo
     * @memberof PositionParam
     * @instance
     */
    Object.defineProperty(PositionParam.prototype, "_ScenePointInfo", {
        get: $util.oneOfGetter($oneOfFields = ["ScenePointInfo"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PositionParam _ScenePosInfo.
     * @member {"ScenePosInfo"|undefined} _ScenePosInfo
     * @memberof PositionParam
     * @instance
     */
    Object.defineProperty(PositionParam.prototype, "_ScenePosInfo", {
        get: $util.oneOfGetter($oneOfFields = ["ScenePosInfo"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PositionParam _CutScenePointInfo.
     * @member {"CutScenePointInfo"|undefined} _CutScenePointInfo
     * @memberof PositionParam
     * @instance
     */
    Object.defineProperty(PositionParam.prototype, "_CutScenePointInfo", {
        get: $util.oneOfGetter($oneOfFields = ["CutScenePointInfo"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new PositionParam instance using the specified properties.
     * @function create
     * @memberof PositionParam
     * @static
     * @param {IPositionParam=} [properties] Properties to set
     * @returns {PositionParam} PositionParam instance
     */
    PositionParam.create = function create(properties) {
        return new PositionParam(properties);
    };

    /**
     * Encodes the specified PositionParam message. Does not implicitly {@link PositionParam.verify|verify} messages.
     * @function encode
     * @memberof PositionParam
     * @static
     * @param {IPositionParam} message PositionParam message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PositionParam.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ScenePointInfo != null && Object.hasOwnProperty.call(message, "ScenePointInfo"))
            $root.ScenePointInfo.encode(message.ScenePointInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.ScenePosInfo != null && Object.hasOwnProperty.call(message, "ScenePosInfo"))
            $root.ScenePosIdInfo.encode(message.ScenePosInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.CutScenePointInfo != null && Object.hasOwnProperty.call(message, "CutScenePointInfo"))
            $root.CutScenePointInfo.encode(message.CutScenePointInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PositionParam message, length delimited. Does not implicitly {@link PositionParam.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PositionParam
     * @static
     * @param {IPositionParam} message PositionParam message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PositionParam.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PositionParam message from the specified reader or buffer.
     * @function decode
     * @memberof PositionParam
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PositionParam} PositionParam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PositionParam.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PositionParam();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.ScenePointInfo = $root.ScenePointInfo.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.ScenePosInfo = $root.ScenePosIdInfo.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.CutScenePointInfo = $root.CutScenePointInfo.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PositionParam message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PositionParam
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PositionParam} PositionParam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PositionParam.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PositionParam message.
     * @function verify
     * @memberof PositionParam
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PositionParam.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.ScenePointInfo != null && message.hasOwnProperty("ScenePointInfo")) {
            properties._ScenePointInfo = 1;
            {
                var error = $root.ScenePointInfo.verify(message.ScenePointInfo);
                if (error)
                    return "ScenePointInfo." + error;
            }
        }
        if (message.ScenePosInfo != null && message.hasOwnProperty("ScenePosInfo")) {
            properties._ScenePosInfo = 1;
            {
                var error = $root.ScenePosIdInfo.verify(message.ScenePosInfo);
                if (error)
                    return "ScenePosInfo." + error;
            }
        }
        if (message.CutScenePointInfo != null && message.hasOwnProperty("CutScenePointInfo")) {
            properties._CutScenePointInfo = 1;
            {
                var error = $root.CutScenePointInfo.verify(message.CutScenePointInfo);
                if (error)
                    return "CutScenePointInfo." + error;
            }
        }
        return null;
    };

    /**
     * Creates a PositionParam message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PositionParam
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PositionParam} PositionParam
     */
    PositionParam.fromObject = function fromObject(object) {
        if (object instanceof $root.PositionParam)
            return object;
        var message = new $root.PositionParam();
        if (object.ScenePointInfo != null) {
            if (typeof object.ScenePointInfo !== "object")
                throw TypeError(".PositionParam.ScenePointInfo: object expected");
            message.ScenePointInfo = $root.ScenePointInfo.fromObject(object.ScenePointInfo);
        }
        if (object.ScenePosInfo != null) {
            if (typeof object.ScenePosInfo !== "object")
                throw TypeError(".PositionParam.ScenePosInfo: object expected");
            message.ScenePosInfo = $root.ScenePosIdInfo.fromObject(object.ScenePosInfo);
        }
        if (object.CutScenePointInfo != null) {
            if (typeof object.CutScenePointInfo !== "object")
                throw TypeError(".PositionParam.CutScenePointInfo: object expected");
            message.CutScenePointInfo = $root.CutScenePointInfo.fromObject(object.CutScenePointInfo);
        }
        return message;
    };

    /**
     * Creates a plain object from a PositionParam message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PositionParam
     * @static
     * @param {PositionParam} message PositionParam
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PositionParam.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.ScenePointInfo != null && message.hasOwnProperty("ScenePointInfo")) {
            object.ScenePointInfo = $root.ScenePointInfo.toObject(message.ScenePointInfo, options);
            if (options.oneofs)
                object._ScenePointInfo = "ScenePointInfo";
        }
        if (message.ScenePosInfo != null && message.hasOwnProperty("ScenePosInfo")) {
            object.ScenePosInfo = $root.ScenePosIdInfo.toObject(message.ScenePosInfo, options);
            if (options.oneofs)
                object._ScenePosInfo = "ScenePosInfo";
        }
        if (message.CutScenePointInfo != null && message.hasOwnProperty("CutScenePointInfo")) {
            object.CutScenePointInfo = $root.CutScenePointInfo.toObject(message.CutScenePointInfo, options);
            if (options.oneofs)
                object._CutScenePointInfo = "CutScenePointInfo";
        }
        return object;
    };

    /**
     * Converts this PositionParam to JSON.
     * @function toJSON
     * @memberof PositionParam
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PositionParam.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PositionParam
     * @function getTypeUrl
     * @memberof PositionParam
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PositionParam.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PositionParam";
    };

    return PositionParam;
})();

$root.TransferParam = (function() {

    /**
     * Properties of a TransferParam.
     * @exports ITransferParam
     * @interface ITransferParam
     * @property {number|null} [SceneId] TransferParam SceneId
     * @property {EUserTransferType|null} [TransferType] TransferParam TransferType
     * @property {IPositionParam|null} [PositionParam] TransferParam PositionParam
     * @property {number|Long|null} [ChangeFlag] TransferParam ChangeFlag
     * @property {boolean|null} [IsServerSwitch] TransferParam IsServerSwitch
     * @property {number|null} [VisualLayerConfigId] TransferParam VisualLayerConfigId
     * @property {string|null} [SceneGuid] TransferParam SceneGuid
     * @property {string|null} [ConnectGuid] TransferParam ConnectGuid
     * @property {number|Long|null} [SubSceneUuid] TransferParam SubSceneUuid
     */

    /**
     * Constructs a new TransferParam.
     * @exports TransferParam
     * @classdesc Represents a TransferParam.
     * @implements ITransferParam
     * @constructor
     * @param {ITransferParam=} [properties] Properties to set
     */
    function TransferParam(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * TransferParam SceneId.
     * @member {number|null|undefined} SceneId
     * @memberof TransferParam
     * @instance
     */
    TransferParam.prototype.SceneId = null;

    /**
     * TransferParam TransferType.
     * @member {EUserTransferType|null|undefined} TransferType
     * @memberof TransferParam
     * @instance
     */
    TransferParam.prototype.TransferType = null;

    /**
     * TransferParam PositionParam.
     * @member {IPositionParam|null|undefined} PositionParam
     * @memberof TransferParam
     * @instance
     */
    TransferParam.prototype.PositionParam = null;

    /**
     * TransferParam ChangeFlag.
     * @member {number|Long|null|undefined} ChangeFlag
     * @memberof TransferParam
     * @instance
     */
    TransferParam.prototype.ChangeFlag = null;

    /**
     * TransferParam IsServerSwitch.
     * @member {boolean|null|undefined} IsServerSwitch
     * @memberof TransferParam
     * @instance
     */
    TransferParam.prototype.IsServerSwitch = null;

    /**
     * TransferParam VisualLayerConfigId.
     * @member {number|null|undefined} VisualLayerConfigId
     * @memberof TransferParam
     * @instance
     */
    TransferParam.prototype.VisualLayerConfigId = null;

    /**
     * TransferParam SceneGuid.
     * @member {string|null|undefined} SceneGuid
     * @memberof TransferParam
     * @instance
     */
    TransferParam.prototype.SceneGuid = null;

    /**
     * TransferParam ConnectGuid.
     * @member {string|null|undefined} ConnectGuid
     * @memberof TransferParam
     * @instance
     */
    TransferParam.prototype.ConnectGuid = null;

    /**
     * TransferParam SubSceneUuid.
     * @member {number|Long|null|undefined} SubSceneUuid
     * @memberof TransferParam
     * @instance
     */
    TransferParam.prototype.SubSceneUuid = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * TransferParam _SceneId.
     * @member {"SceneId"|undefined} _SceneId
     * @memberof TransferParam
     * @instance
     */
    Object.defineProperty(TransferParam.prototype, "_SceneId", {
        get: $util.oneOfGetter($oneOfFields = ["SceneId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TransferParam _TransferType.
     * @member {"TransferType"|undefined} _TransferType
     * @memberof TransferParam
     * @instance
     */
    Object.defineProperty(TransferParam.prototype, "_TransferType", {
        get: $util.oneOfGetter($oneOfFields = ["TransferType"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TransferParam _PositionParam.
     * @member {"PositionParam"|undefined} _PositionParam
     * @memberof TransferParam
     * @instance
     */
    Object.defineProperty(TransferParam.prototype, "_PositionParam", {
        get: $util.oneOfGetter($oneOfFields = ["PositionParam"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TransferParam _ChangeFlag.
     * @member {"ChangeFlag"|undefined} _ChangeFlag
     * @memberof TransferParam
     * @instance
     */
    Object.defineProperty(TransferParam.prototype, "_ChangeFlag", {
        get: $util.oneOfGetter($oneOfFields = ["ChangeFlag"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TransferParam _IsServerSwitch.
     * @member {"IsServerSwitch"|undefined} _IsServerSwitch
     * @memberof TransferParam
     * @instance
     */
    Object.defineProperty(TransferParam.prototype, "_IsServerSwitch", {
        get: $util.oneOfGetter($oneOfFields = ["IsServerSwitch"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TransferParam _VisualLayerConfigId.
     * @member {"VisualLayerConfigId"|undefined} _VisualLayerConfigId
     * @memberof TransferParam
     * @instance
     */
    Object.defineProperty(TransferParam.prototype, "_VisualLayerConfigId", {
        get: $util.oneOfGetter($oneOfFields = ["VisualLayerConfigId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TransferParam _SceneGuid.
     * @member {"SceneGuid"|undefined} _SceneGuid
     * @memberof TransferParam
     * @instance
     */
    Object.defineProperty(TransferParam.prototype, "_SceneGuid", {
        get: $util.oneOfGetter($oneOfFields = ["SceneGuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TransferParam _ConnectGuid.
     * @member {"ConnectGuid"|undefined} _ConnectGuid
     * @memberof TransferParam
     * @instance
     */
    Object.defineProperty(TransferParam.prototype, "_ConnectGuid", {
        get: $util.oneOfGetter($oneOfFields = ["ConnectGuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TransferParam _SubSceneUuid.
     * @member {"SubSceneUuid"|undefined} _SubSceneUuid
     * @memberof TransferParam
     * @instance
     */
    Object.defineProperty(TransferParam.prototype, "_SubSceneUuid", {
        get: $util.oneOfGetter($oneOfFields = ["SubSceneUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new TransferParam instance using the specified properties.
     * @function create
     * @memberof TransferParam
     * @static
     * @param {ITransferParam=} [properties] Properties to set
     * @returns {TransferParam} TransferParam instance
     */
    TransferParam.create = function create(properties) {
        return new TransferParam(properties);
    };

    /**
     * Encodes the specified TransferParam message. Does not implicitly {@link TransferParam.verify|verify} messages.
     * @function encode
     * @memberof TransferParam
     * @static
     * @param {ITransferParam} message TransferParam message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TransferParam.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.SceneId != null && Object.hasOwnProperty.call(message, "SceneId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.SceneId);
        if (message.TransferType != null && Object.hasOwnProperty.call(message, "TransferType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.TransferType);
        if (message.PositionParam != null && Object.hasOwnProperty.call(message, "PositionParam"))
            $root.PositionParam.encode(message.PositionParam, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.ChangeFlag != null && Object.hasOwnProperty.call(message, "ChangeFlag"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.ChangeFlag);
        if (message.IsServerSwitch != null && Object.hasOwnProperty.call(message, "IsServerSwitch"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.IsServerSwitch);
        if (message.VisualLayerConfigId != null && Object.hasOwnProperty.call(message, "VisualLayerConfigId"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.VisualLayerConfigId);
        if (message.SceneGuid != null && Object.hasOwnProperty.call(message, "SceneGuid"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.SceneGuid);
        if (message.ConnectGuid != null && Object.hasOwnProperty.call(message, "ConnectGuid"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.ConnectGuid);
        if (message.SubSceneUuid != null && Object.hasOwnProperty.call(message, "SubSceneUuid"))
            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.SubSceneUuid);
        return writer;
    };

    /**
     * Encodes the specified TransferParam message, length delimited. Does not implicitly {@link TransferParam.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TransferParam
     * @static
     * @param {ITransferParam} message TransferParam message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TransferParam.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a TransferParam message from the specified reader or buffer.
     * @function decode
     * @memberof TransferParam
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TransferParam} TransferParam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TransferParam.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TransferParam();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.SceneId = reader.int32();
                    break;
                }
            case 2: {
                    message.TransferType = reader.int32();
                    break;
                }
            case 3: {
                    message.PositionParam = $root.PositionParam.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.ChangeFlag = reader.int64();
                    break;
                }
            case 5: {
                    message.IsServerSwitch = reader.bool();
                    break;
                }
            case 6: {
                    message.VisualLayerConfigId = reader.int32();
                    break;
                }
            case 7: {
                    message.SceneGuid = reader.string();
                    break;
                }
            case 8: {
                    message.ConnectGuid = reader.string();
                    break;
                }
            case 9: {
                    message.SubSceneUuid = reader.int64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a TransferParam message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TransferParam
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TransferParam} TransferParam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TransferParam.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a TransferParam message.
     * @function verify
     * @memberof TransferParam
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    TransferParam.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.SceneId != null && message.hasOwnProperty("SceneId")) {
            properties._SceneId = 1;
            if (!$util.isInteger(message.SceneId))
                return "SceneId: integer expected";
        }
        if (message.TransferType != null && message.hasOwnProperty("TransferType")) {
            properties._TransferType = 1;
            switch (message.TransferType) {
            default:
                return "TransferType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        }
        if (message.PositionParam != null && message.hasOwnProperty("PositionParam")) {
            properties._PositionParam = 1;
            {
                var error = $root.PositionParam.verify(message.PositionParam);
                if (error)
                    return "PositionParam." + error;
            }
        }
        if (message.ChangeFlag != null && message.hasOwnProperty("ChangeFlag")) {
            properties._ChangeFlag = 1;
            if (!$util.isInteger(message.ChangeFlag) && !(message.ChangeFlag && $util.isInteger(message.ChangeFlag.low) && $util.isInteger(message.ChangeFlag.high)))
                return "ChangeFlag: integer|Long expected";
        }
        if (message.IsServerSwitch != null && message.hasOwnProperty("IsServerSwitch")) {
            properties._IsServerSwitch = 1;
            if (typeof message.IsServerSwitch !== "boolean")
                return "IsServerSwitch: boolean expected";
        }
        if (message.VisualLayerConfigId != null && message.hasOwnProperty("VisualLayerConfigId")) {
            properties._VisualLayerConfigId = 1;
            if (!$util.isInteger(message.VisualLayerConfigId))
                return "VisualLayerConfigId: integer expected";
        }
        if (message.SceneGuid != null && message.hasOwnProperty("SceneGuid")) {
            properties._SceneGuid = 1;
            if (!$util.isString(message.SceneGuid))
                return "SceneGuid: string expected";
        }
        if (message.ConnectGuid != null && message.hasOwnProperty("ConnectGuid")) {
            properties._ConnectGuid = 1;
            if (!$util.isString(message.ConnectGuid))
                return "ConnectGuid: string expected";
        }
        if (message.SubSceneUuid != null && message.hasOwnProperty("SubSceneUuid")) {
            properties._SubSceneUuid = 1;
            if (!$util.isInteger(message.SubSceneUuid) && !(message.SubSceneUuid && $util.isInteger(message.SubSceneUuid.low) && $util.isInteger(message.SubSceneUuid.high)))
                return "SubSceneUuid: integer|Long expected";
        }
        return null;
    };

    /**
     * Creates a TransferParam message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TransferParam
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TransferParam} TransferParam
     */
    TransferParam.fromObject = function fromObject(object) {
        if (object instanceof $root.TransferParam)
            return object;
        var message = new $root.TransferParam();
        if (object.SceneId != null)
            message.SceneId = object.SceneId | 0;
        switch (object.TransferType) {
        default:
            if (typeof object.TransferType === "number") {
                message.TransferType = object.TransferType;
                break;
            }
            break;
        case "EUserTransferTypeDefault":
        case 0:
            message.TransferType = 0;
            break;
        case "EUserTransferTypeScenePosition":
        case 1:
            message.TransferType = 1;
            break;
        case "EUserTransferTypeScenePosId":
        case 2:
            message.TransferType = 2;
            break;
        case "EUserTransferTypePivot":
        case 3:
            message.TransferType = 3;
            break;
        case "EUserTransferTypeCutScene":
        case 4:
            message.TransferType = 4;
            break;
        case "EUserTransferTypeNear":
        case 5:
            message.TransferType = 5;
            break;
        }
        if (object.PositionParam != null) {
            if (typeof object.PositionParam !== "object")
                throw TypeError(".TransferParam.PositionParam: object expected");
            message.PositionParam = $root.PositionParam.fromObject(object.PositionParam);
        }
        if (object.ChangeFlag != null)
            if ($util.Long)
                (message.ChangeFlag = $util.Long.fromValue(object.ChangeFlag)).unsigned = false;
            else if (typeof object.ChangeFlag === "string")
                message.ChangeFlag = parseInt(object.ChangeFlag, 10);
            else if (typeof object.ChangeFlag === "number")
                message.ChangeFlag = object.ChangeFlag;
            else if (typeof object.ChangeFlag === "object")
                message.ChangeFlag = new $util.LongBits(object.ChangeFlag.low >>> 0, object.ChangeFlag.high >>> 0).toNumber();
        if (object.IsServerSwitch != null)
            message.IsServerSwitch = Boolean(object.IsServerSwitch);
        if (object.VisualLayerConfigId != null)
            message.VisualLayerConfigId = object.VisualLayerConfigId | 0;
        if (object.SceneGuid != null)
            message.SceneGuid = String(object.SceneGuid);
        if (object.ConnectGuid != null)
            message.ConnectGuid = String(object.ConnectGuid);
        if (object.SubSceneUuid != null)
            if ($util.Long)
                (message.SubSceneUuid = $util.Long.fromValue(object.SubSceneUuid)).unsigned = false;
            else if (typeof object.SubSceneUuid === "string")
                message.SubSceneUuid = parseInt(object.SubSceneUuid, 10);
            else if (typeof object.SubSceneUuid === "number")
                message.SubSceneUuid = object.SubSceneUuid;
            else if (typeof object.SubSceneUuid === "object")
                message.SubSceneUuid = new $util.LongBits(object.SubSceneUuid.low >>> 0, object.SubSceneUuid.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a TransferParam message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TransferParam
     * @static
     * @param {TransferParam} message TransferParam
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    TransferParam.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.SceneId != null && message.hasOwnProperty("SceneId")) {
            object.SceneId = message.SceneId;
            if (options.oneofs)
                object._SceneId = "SceneId";
        }
        if (message.TransferType != null && message.hasOwnProperty("TransferType")) {
            object.TransferType = options.enums === String ? $root.EUserTransferType[message.TransferType] === undefined ? message.TransferType : $root.EUserTransferType[message.TransferType] : message.TransferType;
            if (options.oneofs)
                object._TransferType = "TransferType";
        }
        if (message.PositionParam != null && message.hasOwnProperty("PositionParam")) {
            object.PositionParam = $root.PositionParam.toObject(message.PositionParam, options);
            if (options.oneofs)
                object._PositionParam = "PositionParam";
        }
        if (message.ChangeFlag != null && message.hasOwnProperty("ChangeFlag")) {
            if (typeof message.ChangeFlag === "number")
                object.ChangeFlag = options.longs === String ? String(message.ChangeFlag) : message.ChangeFlag;
            else
                object.ChangeFlag = options.longs === String ? $util.Long.prototype.toString.call(message.ChangeFlag) : options.longs === Number ? new $util.LongBits(message.ChangeFlag.low >>> 0, message.ChangeFlag.high >>> 0).toNumber() : message.ChangeFlag;
            if (options.oneofs)
                object._ChangeFlag = "ChangeFlag";
        }
        if (message.IsServerSwitch != null && message.hasOwnProperty("IsServerSwitch")) {
            object.IsServerSwitch = message.IsServerSwitch;
            if (options.oneofs)
                object._IsServerSwitch = "IsServerSwitch";
        }
        if (message.VisualLayerConfigId != null && message.hasOwnProperty("VisualLayerConfigId")) {
            object.VisualLayerConfigId = message.VisualLayerConfigId;
            if (options.oneofs)
                object._VisualLayerConfigId = "VisualLayerConfigId";
        }
        if (message.SceneGuid != null && message.hasOwnProperty("SceneGuid")) {
            object.SceneGuid = message.SceneGuid;
            if (options.oneofs)
                object._SceneGuid = "SceneGuid";
        }
        if (message.ConnectGuid != null && message.hasOwnProperty("ConnectGuid")) {
            object.ConnectGuid = message.ConnectGuid;
            if (options.oneofs)
                object._ConnectGuid = "ConnectGuid";
        }
        if (message.SubSceneUuid != null && message.hasOwnProperty("SubSceneUuid")) {
            if (typeof message.SubSceneUuid === "number")
                object.SubSceneUuid = options.longs === String ? String(message.SubSceneUuid) : message.SubSceneUuid;
            else
                object.SubSceneUuid = options.longs === String ? $util.Long.prototype.toString.call(message.SubSceneUuid) : options.longs === Number ? new $util.LongBits(message.SubSceneUuid.low >>> 0, message.SubSceneUuid.high >>> 0).toNumber() : message.SubSceneUuid;
            if (options.oneofs)
                object._SubSceneUuid = "SubSceneUuid";
        }
        return object;
    };

    /**
     * Converts this TransferParam to JSON.
     * @function toJSON
     * @memberof TransferParam
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    TransferParam.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for TransferParam
     * @function getTypeUrl
     * @memberof TransferParam
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    TransferParam.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/TransferParam";
    };

    return TransferParam;
})();

$root.NotifyEnterWorldRequest = (function() {

    /**
     * Properties of a NotifyEnterWorldRequest.
     * @exports INotifyEnterWorldRequest
     * @interface INotifyEnterWorldRequest
     * @property {string|null} [AccountId] NotifyEnterWorldRequest AccountId
     * @property {string|null} [Token] NotifyEnterWorldRequest Token
     * @property {string|null} [SceneIp] NotifyEnterWorldRequest SceneIp
     * @property {number|null} [ScenePort] NotifyEnterWorldRequest ScenePort
     * @property {ITransferParam|null} [Transform] NotifyEnterWorldRequest Transform
     * @property {ISceneLineData|null} [SceneLineData] NotifyEnterWorldRequest SceneLineData
     */

    /**
     * Constructs a new NotifyEnterWorldRequest.
     * @exports NotifyEnterWorldRequest
     * @classdesc Represents a NotifyEnterWorldRequest.
     * @implements INotifyEnterWorldRequest
     * @constructor
     * @param {INotifyEnterWorldRequest=} [properties] Properties to set
     */
    function NotifyEnterWorldRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * NotifyEnterWorldRequest AccountId.
     * @member {string|null|undefined} AccountId
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    NotifyEnterWorldRequest.prototype.AccountId = null;

    /**
     * NotifyEnterWorldRequest Token.
     * @member {string|null|undefined} Token
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    NotifyEnterWorldRequest.prototype.Token = null;

    /**
     * NotifyEnterWorldRequest SceneIp.
     * @member {string|null|undefined} SceneIp
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    NotifyEnterWorldRequest.prototype.SceneIp = null;

    /**
     * NotifyEnterWorldRequest ScenePort.
     * @member {number|null|undefined} ScenePort
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    NotifyEnterWorldRequest.prototype.ScenePort = null;

    /**
     * NotifyEnterWorldRequest Transform.
     * @member {ITransferParam|null|undefined} Transform
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    NotifyEnterWorldRequest.prototype.Transform = null;

    /**
     * NotifyEnterWorldRequest SceneLineData.
     * @member {ISceneLineData|null|undefined} SceneLineData
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    NotifyEnterWorldRequest.prototype.SceneLineData = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * NotifyEnterWorldRequest _AccountId.
     * @member {"AccountId"|undefined} _AccountId
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    Object.defineProperty(NotifyEnterWorldRequest.prototype, "_AccountId", {
        get: $util.oneOfGetter($oneOfFields = ["AccountId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * NotifyEnterWorldRequest _Token.
     * @member {"Token"|undefined} _Token
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    Object.defineProperty(NotifyEnterWorldRequest.prototype, "_Token", {
        get: $util.oneOfGetter($oneOfFields = ["Token"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * NotifyEnterWorldRequest _SceneIp.
     * @member {"SceneIp"|undefined} _SceneIp
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    Object.defineProperty(NotifyEnterWorldRequest.prototype, "_SceneIp", {
        get: $util.oneOfGetter($oneOfFields = ["SceneIp"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * NotifyEnterWorldRequest _ScenePort.
     * @member {"ScenePort"|undefined} _ScenePort
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    Object.defineProperty(NotifyEnterWorldRequest.prototype, "_ScenePort", {
        get: $util.oneOfGetter($oneOfFields = ["ScenePort"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * NotifyEnterWorldRequest _Transform.
     * @member {"Transform"|undefined} _Transform
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    Object.defineProperty(NotifyEnterWorldRequest.prototype, "_Transform", {
        get: $util.oneOfGetter($oneOfFields = ["Transform"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * NotifyEnterWorldRequest _SceneLineData.
     * @member {"SceneLineData"|undefined} _SceneLineData
     * @memberof NotifyEnterWorldRequest
     * @instance
     */
    Object.defineProperty(NotifyEnterWorldRequest.prototype, "_SceneLineData", {
        get: $util.oneOfGetter($oneOfFields = ["SceneLineData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new NotifyEnterWorldRequest instance using the specified properties.
     * @function create
     * @memberof NotifyEnterWorldRequest
     * @static
     * @param {INotifyEnterWorldRequest=} [properties] Properties to set
     * @returns {NotifyEnterWorldRequest} NotifyEnterWorldRequest instance
     */
    NotifyEnterWorldRequest.create = function create(properties) {
        return new NotifyEnterWorldRequest(properties);
    };

    /**
     * Encodes the specified NotifyEnterWorldRequest message. Does not implicitly {@link NotifyEnterWorldRequest.verify|verify} messages.
     * @function encode
     * @memberof NotifyEnterWorldRequest
     * @static
     * @param {INotifyEnterWorldRequest} message NotifyEnterWorldRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NotifyEnterWorldRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.AccountId != null && Object.hasOwnProperty.call(message, "AccountId"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.AccountId);
        if (message.Token != null && Object.hasOwnProperty.call(message, "Token"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.Token);
        if (message.SceneIp != null && Object.hasOwnProperty.call(message, "SceneIp"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.SceneIp);
        if (message.ScenePort != null && Object.hasOwnProperty.call(message, "ScenePort"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.ScenePort);
        if (message.Transform != null && Object.hasOwnProperty.call(message, "Transform"))
            $root.TransferParam.encode(message.Transform, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.SceneLineData != null && Object.hasOwnProperty.call(message, "SceneLineData"))
            $root.SceneLineData.encode(message.SceneLineData, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified NotifyEnterWorldRequest message, length delimited. Does not implicitly {@link NotifyEnterWorldRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof NotifyEnterWorldRequest
     * @static
     * @param {INotifyEnterWorldRequest} message NotifyEnterWorldRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NotifyEnterWorldRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a NotifyEnterWorldRequest message from the specified reader or buffer.
     * @function decode
     * @memberof NotifyEnterWorldRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {NotifyEnterWorldRequest} NotifyEnterWorldRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NotifyEnterWorldRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NotifyEnterWorldRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.AccountId = reader.string();
                    break;
                }
            case 2: {
                    message.Token = reader.string();
                    break;
                }
            case 3: {
                    message.SceneIp = reader.string();
                    break;
                }
            case 4: {
                    message.ScenePort = reader.int32();
                    break;
                }
            case 5: {
                    message.Transform = $root.TransferParam.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.SceneLineData = $root.SceneLineData.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a NotifyEnterWorldRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof NotifyEnterWorldRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {NotifyEnterWorldRequest} NotifyEnterWorldRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NotifyEnterWorldRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a NotifyEnterWorldRequest message.
     * @function verify
     * @memberof NotifyEnterWorldRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    NotifyEnterWorldRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.AccountId != null && message.hasOwnProperty("AccountId")) {
            properties._AccountId = 1;
            if (!$util.isString(message.AccountId))
                return "AccountId: string expected";
        }
        if (message.Token != null && message.hasOwnProperty("Token")) {
            properties._Token = 1;
            if (!$util.isString(message.Token))
                return "Token: string expected";
        }
        if (message.SceneIp != null && message.hasOwnProperty("SceneIp")) {
            properties._SceneIp = 1;
            if (!$util.isString(message.SceneIp))
                return "SceneIp: string expected";
        }
        if (message.ScenePort != null && message.hasOwnProperty("ScenePort")) {
            properties._ScenePort = 1;
            if (!$util.isInteger(message.ScenePort))
                return "ScenePort: integer expected";
        }
        if (message.Transform != null && message.hasOwnProperty("Transform")) {
            properties._Transform = 1;
            {
                var error = $root.TransferParam.verify(message.Transform);
                if (error)
                    return "Transform." + error;
            }
        }
        if (message.SceneLineData != null && message.hasOwnProperty("SceneLineData")) {
            properties._SceneLineData = 1;
            {
                var error = $root.SceneLineData.verify(message.SceneLineData);
                if (error)
                    return "SceneLineData." + error;
            }
        }
        return null;
    };

    /**
     * Creates a NotifyEnterWorldRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof NotifyEnterWorldRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {NotifyEnterWorldRequest} NotifyEnterWorldRequest
     */
    NotifyEnterWorldRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.NotifyEnterWorldRequest)
            return object;
        var message = new $root.NotifyEnterWorldRequest();
        if (object.AccountId != null)
            message.AccountId = String(object.AccountId);
        if (object.Token != null)
            message.Token = String(object.Token);
        if (object.SceneIp != null)
            message.SceneIp = String(object.SceneIp);
        if (object.ScenePort != null)
            message.ScenePort = object.ScenePort | 0;
        if (object.Transform != null) {
            if (typeof object.Transform !== "object")
                throw TypeError(".NotifyEnterWorldRequest.Transform: object expected");
            message.Transform = $root.TransferParam.fromObject(object.Transform);
        }
        if (object.SceneLineData != null) {
            if (typeof object.SceneLineData !== "object")
                throw TypeError(".NotifyEnterWorldRequest.SceneLineData: object expected");
            message.SceneLineData = $root.SceneLineData.fromObject(object.SceneLineData);
        }
        return message;
    };

    /**
     * Creates a plain object from a NotifyEnterWorldRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof NotifyEnterWorldRequest
     * @static
     * @param {NotifyEnterWorldRequest} message NotifyEnterWorldRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    NotifyEnterWorldRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.AccountId != null && message.hasOwnProperty("AccountId")) {
            object.AccountId = message.AccountId;
            if (options.oneofs)
                object._AccountId = "AccountId";
        }
        if (message.Token != null && message.hasOwnProperty("Token")) {
            object.Token = message.Token;
            if (options.oneofs)
                object._Token = "Token";
        }
        if (message.SceneIp != null && message.hasOwnProperty("SceneIp")) {
            object.SceneIp = message.SceneIp;
            if (options.oneofs)
                object._SceneIp = "SceneIp";
        }
        if (message.ScenePort != null && message.hasOwnProperty("ScenePort")) {
            object.ScenePort = message.ScenePort;
            if (options.oneofs)
                object._ScenePort = "ScenePort";
        }
        if (message.Transform != null && message.hasOwnProperty("Transform")) {
            object.Transform = $root.TransferParam.toObject(message.Transform, options);
            if (options.oneofs)
                object._Transform = "Transform";
        }
        if (message.SceneLineData != null && message.hasOwnProperty("SceneLineData")) {
            object.SceneLineData = $root.SceneLineData.toObject(message.SceneLineData, options);
            if (options.oneofs)
                object._SceneLineData = "SceneLineData";
        }
        return object;
    };

    /**
     * Converts this NotifyEnterWorldRequest to JSON.
     * @function toJSON
     * @memberof NotifyEnterWorldRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    NotifyEnterWorldRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for NotifyEnterWorldRequest
     * @function getTypeUrl
     * @memberof NotifyEnterWorldRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    NotifyEnterWorldRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/NotifyEnterWorldRequest";
    };

    return NotifyEnterWorldRequest;
})();

$root.NotifyEnterWorld = (function() {

    /**
     * Properties of a NotifyEnterWorld.
     * @exports INotifyEnterWorld
     * @interface INotifyEnterWorld
     * @property {INotifyEnterWorldRequest|null} [VRequest] NotifyEnterWorld VRequest
     */

    /**
     * Constructs a new NotifyEnterWorld.
     * @exports NotifyEnterWorld
     * @classdesc Represents a NotifyEnterWorld.
     * @implements INotifyEnterWorld
     * @constructor
     * @param {INotifyEnterWorld=} [properties] Properties to set
     */
    function NotifyEnterWorld(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * NotifyEnterWorld VRequest.
     * @member {INotifyEnterWorldRequest|null|undefined} VRequest
     * @memberof NotifyEnterWorld
     * @instance
     */
    NotifyEnterWorld.prototype.VRequest = null;

    /**
     * Creates a new NotifyEnterWorld instance using the specified properties.
     * @function create
     * @memberof NotifyEnterWorld
     * @static
     * @param {INotifyEnterWorld=} [properties] Properties to set
     * @returns {NotifyEnterWorld} NotifyEnterWorld instance
     */
    NotifyEnterWorld.create = function create(properties) {
        return new NotifyEnterWorld(properties);
    };

    /**
     * Encodes the specified NotifyEnterWorld message. Does not implicitly {@link NotifyEnterWorld.verify|verify} messages.
     * @function encode
     * @memberof NotifyEnterWorld
     * @static
     * @param {INotifyEnterWorld} message NotifyEnterWorld message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NotifyEnterWorld.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.VRequest != null && Object.hasOwnProperty.call(message, "VRequest"))
            $root.NotifyEnterWorldRequest.encode(message.VRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified NotifyEnterWorld message, length delimited. Does not implicitly {@link NotifyEnterWorld.verify|verify} messages.
     * @function encodeDelimited
     * @memberof NotifyEnterWorld
     * @static
     * @param {INotifyEnterWorld} message NotifyEnterWorld message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NotifyEnterWorld.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a NotifyEnterWorld message from the specified reader or buffer.
     * @function decode
     * @memberof NotifyEnterWorld
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {NotifyEnterWorld} NotifyEnterWorld
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NotifyEnterWorld.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NotifyEnterWorld();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.VRequest = $root.NotifyEnterWorldRequest.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a NotifyEnterWorld message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof NotifyEnterWorld
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {NotifyEnterWorld} NotifyEnterWorld
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NotifyEnterWorld.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a NotifyEnterWorld message.
     * @function verify
     * @memberof NotifyEnterWorld
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    NotifyEnterWorld.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.VRequest != null && message.hasOwnProperty("VRequest")) {
            var error = $root.NotifyEnterWorldRequest.verify(message.VRequest);
            if (error)
                return "VRequest." + error;
        }
        return null;
    };

    /**
     * Creates a NotifyEnterWorld message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof NotifyEnterWorld
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {NotifyEnterWorld} NotifyEnterWorld
     */
    NotifyEnterWorld.fromObject = function fromObject(object) {
        if (object instanceof $root.NotifyEnterWorld)
            return object;
        var message = new $root.NotifyEnterWorld();
        if (object.VRequest != null) {
            if (typeof object.VRequest !== "object")
                throw TypeError(".NotifyEnterWorld.VRequest: object expected");
            message.VRequest = $root.NotifyEnterWorldRequest.fromObject(object.VRequest);
        }
        return message;
    };

    /**
     * Creates a plain object from a NotifyEnterWorld message. Also converts values to other types if specified.
     * @function toObject
     * @memberof NotifyEnterWorld
     * @static
     * @param {NotifyEnterWorld} message NotifyEnterWorld
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    NotifyEnterWorld.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.VRequest = null;
        if (message.VRequest != null && message.hasOwnProperty("VRequest"))
            object.VRequest = $root.NotifyEnterWorldRequest.toObject(message.VRequest, options);
        return object;
    };

    /**
     * Converts this NotifyEnterWorld to JSON.
     * @function toJSON
     * @memberof NotifyEnterWorld
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    NotifyEnterWorld.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for NotifyEnterWorld
     * @function getTypeUrl
     * @memberof NotifyEnterWorld
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    NotifyEnterWorld.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/NotifyEnterWorld";
    };

    return NotifyEnterWorld;
})();

$root.Attr = (function() {

    /**
     * Properties of an Attr.
     * @exports IAttr
     * @interface IAttr
     * @property {number|null} [Id] Attr Id
     * @property {Uint8Array|null} [RawData] Attr RawData
     */

    /**
     * Constructs a new Attr.
     * @exports Attr
     * @classdesc Represents an Attr.
     * @implements IAttr
     * @constructor
     * @param {IAttr=} [properties] Properties to set
     */
    function Attr(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Attr Id.
     * @member {number|null|undefined} Id
     * @memberof Attr
     * @instance
     */
    Attr.prototype.Id = null;

    /**
     * Attr RawData.
     * @member {Uint8Array|null|undefined} RawData
     * @memberof Attr
     * @instance
     */
    Attr.prototype.RawData = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * Attr _Id.
     * @member {"Id"|undefined} _Id
     * @memberof Attr
     * @instance
     */
    Object.defineProperty(Attr.prototype, "_Id", {
        get: $util.oneOfGetter($oneOfFields = ["Id"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Attr _RawData.
     * @member {"RawData"|undefined} _RawData
     * @memberof Attr
     * @instance
     */
    Object.defineProperty(Attr.prototype, "_RawData", {
        get: $util.oneOfGetter($oneOfFields = ["RawData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new Attr instance using the specified properties.
     * @function create
     * @memberof Attr
     * @static
     * @param {IAttr=} [properties] Properties to set
     * @returns {Attr} Attr instance
     */
    Attr.create = function create(properties) {
        return new Attr(properties);
    };

    /**
     * Encodes the specified Attr message. Does not implicitly {@link Attr.verify|verify} messages.
     * @function encode
     * @memberof Attr
     * @static
     * @param {IAttr} message Attr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    Attr.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Id != null && Object.hasOwnProperty.call(message, "Id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
        if (message.RawData != null && Object.hasOwnProperty.call(message, "RawData"))
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.RawData);
        return writer;
    };

    /**
     * Encodes the specified Attr message, length delimited. Does not implicitly {@link Attr.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Attr
     * @static
     * @param {IAttr} message Attr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    Attr.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an Attr message from the specified reader or buffer.
     * @function decode
     * @memberof Attr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Attr} Attr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    Attr.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Attr();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Id = reader.int32();
                    break;
                }
            case 2: {
                    message.RawData = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an Attr message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Attr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Attr} Attr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    Attr.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an Attr message.
     * @function verify
     * @memberof Attr
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    Attr.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Id != null && message.hasOwnProperty("Id")) {
            properties._Id = 1;
            if (!$util.isInteger(message.Id))
                return "Id: integer expected";
        }
        if (message.RawData != null && message.hasOwnProperty("RawData")) {
            properties._RawData = 1;
            if (!(message.RawData && typeof message.RawData.length === "number" || $util.isString(message.RawData)))
                return "RawData: buffer expected";
        }
        return null;
    };

    /**
     * Creates an Attr message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Attr
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Attr} Attr
     */
    Attr.fromObject = function fromObject(object) {
        if (object instanceof $root.Attr)
            return object;
        var message = new $root.Attr();
        if (object.Id != null)
            message.Id = object.Id | 0;
        if (object.RawData != null)
            if (typeof object.RawData === "string")
                $util.base64.decode(object.RawData, message.RawData = $util.newBuffer($util.base64.length(object.RawData)), 0);
            else if (object.RawData.length >= 0)
                message.RawData = object.RawData;
        return message;
    };

    /**
     * Creates a plain object from an Attr message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Attr
     * @static
     * @param {Attr} message Attr
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    Attr.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Id != null && message.hasOwnProperty("Id")) {
            object.Id = message.Id;
            if (options.oneofs)
                object._Id = "Id";
        }
        if (message.RawData != null && message.hasOwnProperty("RawData")) {
            object.RawData = options.bytes === String ? $util.base64.encode(message.RawData, 0, message.RawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.RawData) : message.RawData;
            if (options.oneofs)
                object._RawData = "RawData";
        }
        return object;
    };

    /**
     * Converts this Attr to JSON.
     * @function toJSON
     * @memberof Attr
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    Attr.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for Attr
     * @function getTypeUrl
     * @memberof Attr
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    Attr.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/Attr";
    };

    return Attr;
})();

$root.MapAttrValue = (function() {

    /**
     * Properties of a MapAttrValue.
     * @exports IMapAttrValue
     * @interface IMapAttrValue
     * @property {boolean|null} [IsRemove] MapAttrValue IsRemove
     * @property {Uint8Array|null} [Key] MapAttrValue Key
     * @property {Uint8Array|null} [Value] MapAttrValue Value
     */

    /**
     * Constructs a new MapAttrValue.
     * @exports MapAttrValue
     * @classdesc Represents a MapAttrValue.
     * @implements IMapAttrValue
     * @constructor
     * @param {IMapAttrValue=} [properties] Properties to set
     */
    function MapAttrValue(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * MapAttrValue IsRemove.
     * @member {boolean|null|undefined} IsRemove
     * @memberof MapAttrValue
     * @instance
     */
    MapAttrValue.prototype.IsRemove = null;

    /**
     * MapAttrValue Key.
     * @member {Uint8Array|null|undefined} Key
     * @memberof MapAttrValue
     * @instance
     */
    MapAttrValue.prototype.Key = null;

    /**
     * MapAttrValue Value.
     * @member {Uint8Array|null|undefined} Value
     * @memberof MapAttrValue
     * @instance
     */
    MapAttrValue.prototype.Value = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * MapAttrValue _IsRemove.
     * @member {"IsRemove"|undefined} _IsRemove
     * @memberof MapAttrValue
     * @instance
     */
    Object.defineProperty(MapAttrValue.prototype, "_IsRemove", {
        get: $util.oneOfGetter($oneOfFields = ["IsRemove"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * MapAttrValue _Key.
     * @member {"Key"|undefined} _Key
     * @memberof MapAttrValue
     * @instance
     */
    Object.defineProperty(MapAttrValue.prototype, "_Key", {
        get: $util.oneOfGetter($oneOfFields = ["Key"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * MapAttrValue _Value.
     * @member {"Value"|undefined} _Value
     * @memberof MapAttrValue
     * @instance
     */
    Object.defineProperty(MapAttrValue.prototype, "_Value", {
        get: $util.oneOfGetter($oneOfFields = ["Value"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new MapAttrValue instance using the specified properties.
     * @function create
     * @memberof MapAttrValue
     * @static
     * @param {IMapAttrValue=} [properties] Properties to set
     * @returns {MapAttrValue} MapAttrValue instance
     */
    MapAttrValue.create = function create(properties) {
        return new MapAttrValue(properties);
    };

    /**
     * Encodes the specified MapAttrValue message. Does not implicitly {@link MapAttrValue.verify|verify} messages.
     * @function encode
     * @memberof MapAttrValue
     * @static
     * @param {IMapAttrValue} message MapAttrValue message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MapAttrValue.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.IsRemove != null && Object.hasOwnProperty.call(message, "IsRemove"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.IsRemove);
        if (message.Key != null && Object.hasOwnProperty.call(message, "Key"))
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.Key);
        if (message.Value != null && Object.hasOwnProperty.call(message, "Value"))
            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.Value);
        return writer;
    };

    /**
     * Encodes the specified MapAttrValue message, length delimited. Does not implicitly {@link MapAttrValue.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MapAttrValue
     * @static
     * @param {IMapAttrValue} message MapAttrValue message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MapAttrValue.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a MapAttrValue message from the specified reader or buffer.
     * @function decode
     * @memberof MapAttrValue
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MapAttrValue} MapAttrValue
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MapAttrValue.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MapAttrValue();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.IsRemove = reader.bool();
                    break;
                }
            case 2: {
                    message.Key = reader.bytes();
                    break;
                }
            case 3: {
                    message.Value = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a MapAttrValue message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MapAttrValue
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MapAttrValue} MapAttrValue
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MapAttrValue.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a MapAttrValue message.
     * @function verify
     * @memberof MapAttrValue
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    MapAttrValue.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.IsRemove != null && message.hasOwnProperty("IsRemove")) {
            properties._IsRemove = 1;
            if (typeof message.IsRemove !== "boolean")
                return "IsRemove: boolean expected";
        }
        if (message.Key != null && message.hasOwnProperty("Key")) {
            properties._Key = 1;
            if (!(message.Key && typeof message.Key.length === "number" || $util.isString(message.Key)))
                return "Key: buffer expected";
        }
        if (message.Value != null && message.hasOwnProperty("Value")) {
            properties._Value = 1;
            if (!(message.Value && typeof message.Value.length === "number" || $util.isString(message.Value)))
                return "Value: buffer expected";
        }
        return null;
    };

    /**
     * Creates a MapAttrValue message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MapAttrValue
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MapAttrValue} MapAttrValue
     */
    MapAttrValue.fromObject = function fromObject(object) {
        if (object instanceof $root.MapAttrValue)
            return object;
        var message = new $root.MapAttrValue();
        if (object.IsRemove != null)
            message.IsRemove = Boolean(object.IsRemove);
        if (object.Key != null)
            if (typeof object.Key === "string")
                $util.base64.decode(object.Key, message.Key = $util.newBuffer($util.base64.length(object.Key)), 0);
            else if (object.Key.length >= 0)
                message.Key = object.Key;
        if (object.Value != null)
            if (typeof object.Value === "string")
                $util.base64.decode(object.Value, message.Value = $util.newBuffer($util.base64.length(object.Value)), 0);
            else if (object.Value.length >= 0)
                message.Value = object.Value;
        return message;
    };

    /**
     * Creates a plain object from a MapAttrValue message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MapAttrValue
     * @static
     * @param {MapAttrValue} message MapAttrValue
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    MapAttrValue.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.IsRemove != null && message.hasOwnProperty("IsRemove")) {
            object.IsRemove = message.IsRemove;
            if (options.oneofs)
                object._IsRemove = "IsRemove";
        }
        if (message.Key != null && message.hasOwnProperty("Key")) {
            object.Key = options.bytes === String ? $util.base64.encode(message.Key, 0, message.Key.length) : options.bytes === Array ? Array.prototype.slice.call(message.Key) : message.Key;
            if (options.oneofs)
                object._Key = "Key";
        }
        if (message.Value != null && message.hasOwnProperty("Value")) {
            object.Value = options.bytes === String ? $util.base64.encode(message.Value, 0, message.Value.length) : options.bytes === Array ? Array.prototype.slice.call(message.Value) : message.Value;
            if (options.oneofs)
                object._Value = "Value";
        }
        return object;
    };

    /**
     * Converts this MapAttrValue to JSON.
     * @function toJSON
     * @memberof MapAttrValue
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    MapAttrValue.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for MapAttrValue
     * @function getTypeUrl
     * @memberof MapAttrValue
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    MapAttrValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/MapAttrValue";
    };

    return MapAttrValue;
})();

$root.MapAttr = (function() {

    /**
     * Properties of a MapAttr.
     * @exports IMapAttr
     * @interface IMapAttr
     * @property {boolean|null} [IsClear] MapAttr IsClear
     * @property {number|null} [Id] MapAttr Id
     * @property {Array.<IMapAttrValue>|null} [Attrs] MapAttr Attrs
     */

    /**
     * Constructs a new MapAttr.
     * @exports MapAttr
     * @classdesc Represents a MapAttr.
     * @implements IMapAttr
     * @constructor
     * @param {IMapAttr=} [properties] Properties to set
     */
    function MapAttr(properties) {
        this.Attrs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * MapAttr IsClear.
     * @member {boolean|null|undefined} IsClear
     * @memberof MapAttr
     * @instance
     */
    MapAttr.prototype.IsClear = null;

    /**
     * MapAttr Id.
     * @member {number|null|undefined} Id
     * @memberof MapAttr
     * @instance
     */
    MapAttr.prototype.Id = null;

    /**
     * MapAttr Attrs.
     * @member {Array.<IMapAttrValue>} Attrs
     * @memberof MapAttr
     * @instance
     */
    MapAttr.prototype.Attrs = $util.emptyArray;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * MapAttr _IsClear.
     * @member {"IsClear"|undefined} _IsClear
     * @memberof MapAttr
     * @instance
     */
    Object.defineProperty(MapAttr.prototype, "_IsClear", {
        get: $util.oneOfGetter($oneOfFields = ["IsClear"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * MapAttr _Id.
     * @member {"Id"|undefined} _Id
     * @memberof MapAttr
     * @instance
     */
    Object.defineProperty(MapAttr.prototype, "_Id", {
        get: $util.oneOfGetter($oneOfFields = ["Id"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new MapAttr instance using the specified properties.
     * @function create
     * @memberof MapAttr
     * @static
     * @param {IMapAttr=} [properties] Properties to set
     * @returns {MapAttr} MapAttr instance
     */
    MapAttr.create = function create(properties) {
        return new MapAttr(properties);
    };

    /**
     * Encodes the specified MapAttr message. Does not implicitly {@link MapAttr.verify|verify} messages.
     * @function encode
     * @memberof MapAttr
     * @static
     * @param {IMapAttr} message MapAttr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MapAttr.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.IsClear != null && Object.hasOwnProperty.call(message, "IsClear"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.IsClear);
        if (message.Id != null && Object.hasOwnProperty.call(message, "Id"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Id);
        if (message.Attrs != null && message.Attrs.length)
            for (var i = 0; i < message.Attrs.length; ++i)
                $root.MapAttrValue.encode(message.Attrs[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified MapAttr message, length delimited. Does not implicitly {@link MapAttr.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MapAttr
     * @static
     * @param {IMapAttr} message MapAttr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MapAttr.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a MapAttr message from the specified reader or buffer.
     * @function decode
     * @memberof MapAttr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MapAttr} MapAttr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MapAttr.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MapAttr();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.IsClear = reader.bool();
                    break;
                }
            case 2: {
                    message.Id = reader.int32();
                    break;
                }
            case 3: {
                    if (!(message.Attrs && message.Attrs.length))
                        message.Attrs = [];
                    message.Attrs.push($root.MapAttrValue.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a MapAttr message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MapAttr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MapAttr} MapAttr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MapAttr.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a MapAttr message.
     * @function verify
     * @memberof MapAttr
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    MapAttr.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.IsClear != null && message.hasOwnProperty("IsClear")) {
            properties._IsClear = 1;
            if (typeof message.IsClear !== "boolean")
                return "IsClear: boolean expected";
        }
        if (message.Id != null && message.hasOwnProperty("Id")) {
            properties._Id = 1;
            if (!$util.isInteger(message.Id))
                return "Id: integer expected";
        }
        if (message.Attrs != null && message.hasOwnProperty("Attrs")) {
            if (!Array.isArray(message.Attrs))
                return "Attrs: array expected";
            for (var i = 0; i < message.Attrs.length; ++i) {
                var error = $root.MapAttrValue.verify(message.Attrs[i]);
                if (error)
                    return "Attrs." + error;
            }
        }
        return null;
    };

    /**
     * Creates a MapAttr message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MapAttr
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MapAttr} MapAttr
     */
    MapAttr.fromObject = function fromObject(object) {
        if (object instanceof $root.MapAttr)
            return object;
        var message = new $root.MapAttr();
        if (object.IsClear != null)
            message.IsClear = Boolean(object.IsClear);
        if (object.Id != null)
            message.Id = object.Id | 0;
        if (object.Attrs) {
            if (!Array.isArray(object.Attrs))
                throw TypeError(".MapAttr.Attrs: array expected");
            message.Attrs = [];
            for (var i = 0; i < object.Attrs.length; ++i) {
                if (typeof object.Attrs[i] !== "object")
                    throw TypeError(".MapAttr.Attrs: object expected");
                message.Attrs[i] = $root.MapAttrValue.fromObject(object.Attrs[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a MapAttr message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MapAttr
     * @static
     * @param {MapAttr} message MapAttr
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    MapAttr.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.Attrs = [];
        if (message.IsClear != null && message.hasOwnProperty("IsClear")) {
            object.IsClear = message.IsClear;
            if (options.oneofs)
                object._IsClear = "IsClear";
        }
        if (message.Id != null && message.hasOwnProperty("Id")) {
            object.Id = message.Id;
            if (options.oneofs)
                object._Id = "Id";
        }
        if (message.Attrs && message.Attrs.length) {
            object.Attrs = [];
            for (var j = 0; j < message.Attrs.length; ++j)
                object.Attrs[j] = $root.MapAttrValue.toObject(message.Attrs[j], options);
        }
        return object;
    };

    /**
     * Converts this MapAttr to JSON.
     * @function toJSON
     * @memberof MapAttr
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    MapAttr.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for MapAttr
     * @function getTypeUrl
     * @memberof MapAttr
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    MapAttr.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/MapAttr";
    };

    return MapAttr;
})();

$root.AttrCollection = (function() {

    /**
     * Properties of an AttrCollection.
     * @exports IAttrCollection
     * @interface IAttrCollection
     * @property {number|Long|null} [Uuid] AttrCollection Uuid
     * @property {Array.<IAttr>|null} [Attrs] AttrCollection Attrs
     * @property {Array.<IMapAttr>|null} [MapAttrs] AttrCollection MapAttrs
     */

    /**
     * Constructs a new AttrCollection.
     * @exports AttrCollection
     * @classdesc Represents an AttrCollection.
     * @implements IAttrCollection
     * @constructor
     * @param {IAttrCollection=} [properties] Properties to set
     */
    function AttrCollection(properties) {
        this.Attrs = [];
        this.MapAttrs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * AttrCollection Uuid.
     * @member {number|Long|null|undefined} Uuid
     * @memberof AttrCollection
     * @instance
     */
    AttrCollection.prototype.Uuid = null;

    /**
     * AttrCollection Attrs.
     * @member {Array.<IAttr>} Attrs
     * @memberof AttrCollection
     * @instance
     */
    AttrCollection.prototype.Attrs = $util.emptyArray;

    /**
     * AttrCollection MapAttrs.
     * @member {Array.<IMapAttr>} MapAttrs
     * @memberof AttrCollection
     * @instance
     */
    AttrCollection.prototype.MapAttrs = $util.emptyArray;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * AttrCollection _Uuid.
     * @member {"Uuid"|undefined} _Uuid
     * @memberof AttrCollection
     * @instance
     */
    Object.defineProperty(AttrCollection.prototype, "_Uuid", {
        get: $util.oneOfGetter($oneOfFields = ["Uuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new AttrCollection instance using the specified properties.
     * @function create
     * @memberof AttrCollection
     * @static
     * @param {IAttrCollection=} [properties] Properties to set
     * @returns {AttrCollection} AttrCollection instance
     */
    AttrCollection.create = function create(properties) {
        return new AttrCollection(properties);
    };

    /**
     * Encodes the specified AttrCollection message. Does not implicitly {@link AttrCollection.verify|verify} messages.
     * @function encode
     * @memberof AttrCollection
     * @static
     * @param {IAttrCollection} message AttrCollection message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AttrCollection.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.Uuid);
        if (message.Attrs != null && message.Attrs.length)
            for (var i = 0; i < message.Attrs.length; ++i)
                $root.Attr.encode(message.Attrs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.MapAttrs != null && message.MapAttrs.length)
            for (var i = 0; i < message.MapAttrs.length; ++i)
                $root.MapAttr.encode(message.MapAttrs[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified AttrCollection message, length delimited. Does not implicitly {@link AttrCollection.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AttrCollection
     * @static
     * @param {IAttrCollection} message AttrCollection message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AttrCollection.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AttrCollection message from the specified reader or buffer.
     * @function decode
     * @memberof AttrCollection
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AttrCollection} AttrCollection
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AttrCollection.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AttrCollection();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Uuid = reader.int64();
                    break;
                }
            case 2: {
                    if (!(message.Attrs && message.Attrs.length))
                        message.Attrs = [];
                    message.Attrs.push($root.Attr.decode(reader, reader.uint32()));
                    break;
                }
            case 3: {
                    if (!(message.MapAttrs && message.MapAttrs.length))
                        message.MapAttrs = [];
                    message.MapAttrs.push($root.MapAttr.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an AttrCollection message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AttrCollection
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AttrCollection} AttrCollection
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AttrCollection.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AttrCollection message.
     * @function verify
     * @memberof AttrCollection
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AttrCollection.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            properties._Uuid = 1;
            if (!$util.isInteger(message.Uuid) && !(message.Uuid && $util.isInteger(message.Uuid.low) && $util.isInteger(message.Uuid.high)))
                return "Uuid: integer|Long expected";
        }
        if (message.Attrs != null && message.hasOwnProperty("Attrs")) {
            if (!Array.isArray(message.Attrs))
                return "Attrs: array expected";
            for (var i = 0; i < message.Attrs.length; ++i) {
                var error = $root.Attr.verify(message.Attrs[i]);
                if (error)
                    return "Attrs." + error;
            }
        }
        if (message.MapAttrs != null && message.hasOwnProperty("MapAttrs")) {
            if (!Array.isArray(message.MapAttrs))
                return "MapAttrs: array expected";
            for (var i = 0; i < message.MapAttrs.length; ++i) {
                var error = $root.MapAttr.verify(message.MapAttrs[i]);
                if (error)
                    return "MapAttrs." + error;
            }
        }
        return null;
    };

    /**
     * Creates an AttrCollection message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AttrCollection
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AttrCollection} AttrCollection
     */
    AttrCollection.fromObject = function fromObject(object) {
        if (object instanceof $root.AttrCollection)
            return object;
        var message = new $root.AttrCollection();
        if (object.Uuid != null)
            if ($util.Long)
                (message.Uuid = $util.Long.fromValue(object.Uuid)).unsigned = false;
            else if (typeof object.Uuid === "string")
                message.Uuid = parseInt(object.Uuid, 10);
            else if (typeof object.Uuid === "number")
                message.Uuid = object.Uuid;
            else if (typeof object.Uuid === "object")
                message.Uuid = new $util.LongBits(object.Uuid.low >>> 0, object.Uuid.high >>> 0).toNumber();
        if (object.Attrs) {
            if (!Array.isArray(object.Attrs))
                throw TypeError(".AttrCollection.Attrs: array expected");
            message.Attrs = [];
            for (var i = 0; i < object.Attrs.length; ++i) {
                if (typeof object.Attrs[i] !== "object")
                    throw TypeError(".AttrCollection.Attrs: object expected");
                message.Attrs[i] = $root.Attr.fromObject(object.Attrs[i]);
            }
        }
        if (object.MapAttrs) {
            if (!Array.isArray(object.MapAttrs))
                throw TypeError(".AttrCollection.MapAttrs: array expected");
            message.MapAttrs = [];
            for (var i = 0; i < object.MapAttrs.length; ++i) {
                if (typeof object.MapAttrs[i] !== "object")
                    throw TypeError(".AttrCollection.MapAttrs: object expected");
                message.MapAttrs[i] = $root.MapAttr.fromObject(object.MapAttrs[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from an AttrCollection message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AttrCollection
     * @static
     * @param {AttrCollection} message AttrCollection
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AttrCollection.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.Attrs = [];
            object.MapAttrs = [];
        }
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            if (typeof message.Uuid === "number")
                object.Uuid = options.longs === String ? String(message.Uuid) : message.Uuid;
            else
                object.Uuid = options.longs === String ? $util.Long.prototype.toString.call(message.Uuid) : options.longs === Number ? new $util.LongBits(message.Uuid.low >>> 0, message.Uuid.high >>> 0).toNumber() : message.Uuid;
            if (options.oneofs)
                object._Uuid = "Uuid";
        }
        if (message.Attrs && message.Attrs.length) {
            object.Attrs = [];
            for (var j = 0; j < message.Attrs.length; ++j)
                object.Attrs[j] = $root.Attr.toObject(message.Attrs[j], options);
        }
        if (message.MapAttrs && message.MapAttrs.length) {
            object.MapAttrs = [];
            for (var j = 0; j < message.MapAttrs.length; ++j)
                object.MapAttrs[j] = $root.MapAttr.toObject(message.MapAttrs[j], options);
        }
        return object;
    };

    /**
     * Converts this AttrCollection to JSON.
     * @function toJSON
     * @memberof AttrCollection
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AttrCollection.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for AttrCollection
     * @function getTypeUrl
     * @memberof AttrCollection
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    AttrCollection.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/AttrCollection";
    };

    return AttrCollection;
})();

$root.TempAttr = (function() {

    /**
     * Properties of a TempAttr.
     * @exports ITempAttr
     * @interface ITempAttr
     * @property {number|null} [Id] TempAttr Id
     * @property {number|null} [Value] TempAttr Value
     */

    /**
     * Constructs a new TempAttr.
     * @exports TempAttr
     * @classdesc Represents a TempAttr.
     * @implements ITempAttr
     * @constructor
     * @param {ITempAttr=} [properties] Properties to set
     */
    function TempAttr(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * TempAttr Id.
     * @member {number|null|undefined} Id
     * @memberof TempAttr
     * @instance
     */
    TempAttr.prototype.Id = null;

    /**
     * TempAttr Value.
     * @member {number|null|undefined} Value
     * @memberof TempAttr
     * @instance
     */
    TempAttr.prototype.Value = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * TempAttr _Id.
     * @member {"Id"|undefined} _Id
     * @memberof TempAttr
     * @instance
     */
    Object.defineProperty(TempAttr.prototype, "_Id", {
        get: $util.oneOfGetter($oneOfFields = ["Id"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * TempAttr _Value.
     * @member {"Value"|undefined} _Value
     * @memberof TempAttr
     * @instance
     */
    Object.defineProperty(TempAttr.prototype, "_Value", {
        get: $util.oneOfGetter($oneOfFields = ["Value"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new TempAttr instance using the specified properties.
     * @function create
     * @memberof TempAttr
     * @static
     * @param {ITempAttr=} [properties] Properties to set
     * @returns {TempAttr} TempAttr instance
     */
    TempAttr.create = function create(properties) {
        return new TempAttr(properties);
    };

    /**
     * Encodes the specified TempAttr message. Does not implicitly {@link TempAttr.verify|verify} messages.
     * @function encode
     * @memberof TempAttr
     * @static
     * @param {ITempAttr} message TempAttr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TempAttr.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Id != null && Object.hasOwnProperty.call(message, "Id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Id);
        if (message.Value != null && Object.hasOwnProperty.call(message, "Value"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.Value);
        return writer;
    };

    /**
     * Encodes the specified TempAttr message, length delimited. Does not implicitly {@link TempAttr.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TempAttr
     * @static
     * @param {ITempAttr} message TempAttr message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TempAttr.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a TempAttr message from the specified reader or buffer.
     * @function decode
     * @memberof TempAttr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TempAttr} TempAttr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TempAttr.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TempAttr();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Id = reader.int32();
                    break;
                }
            case 2: {
                    message.Value = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a TempAttr message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TempAttr
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TempAttr} TempAttr
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TempAttr.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a TempAttr message.
     * @function verify
     * @memberof TempAttr
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    TempAttr.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Id != null && message.hasOwnProperty("Id")) {
            properties._Id = 1;
            if (!$util.isInteger(message.Id))
                return "Id: integer expected";
        }
        if (message.Value != null && message.hasOwnProperty("Value")) {
            properties._Value = 1;
            if (!$util.isInteger(message.Value))
                return "Value: integer expected";
        }
        return null;
    };

    /**
     * Creates a TempAttr message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TempAttr
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TempAttr} TempAttr
     */
    TempAttr.fromObject = function fromObject(object) {
        if (object instanceof $root.TempAttr)
            return object;
        var message = new $root.TempAttr();
        if (object.Id != null)
            message.Id = object.Id | 0;
        if (object.Value != null)
            message.Value = object.Value | 0;
        return message;
    };

    /**
     * Creates a plain object from a TempAttr message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TempAttr
     * @static
     * @param {TempAttr} message TempAttr
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    TempAttr.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Id != null && message.hasOwnProperty("Id")) {
            object.Id = message.Id;
            if (options.oneofs)
                object._Id = "Id";
        }
        if (message.Value != null && message.hasOwnProperty("Value")) {
            object.Value = message.Value;
            if (options.oneofs)
                object._Value = "Value";
        }
        return object;
    };

    /**
     * Converts this TempAttr to JSON.
     * @function toJSON
     * @memberof TempAttr
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    TempAttr.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for TempAttr
     * @function getTypeUrl
     * @memberof TempAttr
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    TempAttr.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/TempAttr";
    };

    return TempAttr;
})();

$root.TempAttrCollection = (function() {

    /**
     * Properties of a TempAttrCollection.
     * @exports ITempAttrCollection
     * @interface ITempAttrCollection
     * @property {Array.<ITempAttr>|null} [Attrs] TempAttrCollection Attrs
     */

    /**
     * Constructs a new TempAttrCollection.
     * @exports TempAttrCollection
     * @classdesc Represents a TempAttrCollection.
     * @implements ITempAttrCollection
     * @constructor
     * @param {ITempAttrCollection=} [properties] Properties to set
     */
    function TempAttrCollection(properties) {
        this.Attrs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * TempAttrCollection Attrs.
     * @member {Array.<ITempAttr>} Attrs
     * @memberof TempAttrCollection
     * @instance
     */
    TempAttrCollection.prototype.Attrs = $util.emptyArray;

    /**
     * Creates a new TempAttrCollection instance using the specified properties.
     * @function create
     * @memberof TempAttrCollection
     * @static
     * @param {ITempAttrCollection=} [properties] Properties to set
     * @returns {TempAttrCollection} TempAttrCollection instance
     */
    TempAttrCollection.create = function create(properties) {
        return new TempAttrCollection(properties);
    };

    /**
     * Encodes the specified TempAttrCollection message. Does not implicitly {@link TempAttrCollection.verify|verify} messages.
     * @function encode
     * @memberof TempAttrCollection
     * @static
     * @param {ITempAttrCollection} message TempAttrCollection message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TempAttrCollection.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Attrs != null && message.Attrs.length)
            for (var i = 0; i < message.Attrs.length; ++i)
                $root.TempAttr.encode(message.Attrs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified TempAttrCollection message, length delimited. Does not implicitly {@link TempAttrCollection.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TempAttrCollection
     * @static
     * @param {ITempAttrCollection} message TempAttrCollection message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TempAttrCollection.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a TempAttrCollection message from the specified reader or buffer.
     * @function decode
     * @memberof TempAttrCollection
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TempAttrCollection} TempAttrCollection
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TempAttrCollection.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TempAttrCollection();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.Attrs && message.Attrs.length))
                        message.Attrs = [];
                    message.Attrs.push($root.TempAttr.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a TempAttrCollection message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TempAttrCollection
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TempAttrCollection} TempAttrCollection
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TempAttrCollection.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a TempAttrCollection message.
     * @function verify
     * @memberof TempAttrCollection
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    TempAttrCollection.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.Attrs != null && message.hasOwnProperty("Attrs")) {
            if (!Array.isArray(message.Attrs))
                return "Attrs: array expected";
            for (var i = 0; i < message.Attrs.length; ++i) {
                var error = $root.TempAttr.verify(message.Attrs[i]);
                if (error)
                    return "Attrs." + error;
            }
        }
        return null;
    };

    /**
     * Creates a TempAttrCollection message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TempAttrCollection
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TempAttrCollection} TempAttrCollection
     */
    TempAttrCollection.fromObject = function fromObject(object) {
        if (object instanceof $root.TempAttrCollection)
            return object;
        var message = new $root.TempAttrCollection();
        if (object.Attrs) {
            if (!Array.isArray(object.Attrs))
                throw TypeError(".TempAttrCollection.Attrs: array expected");
            message.Attrs = [];
            for (var i = 0; i < object.Attrs.length; ++i) {
                if (typeof object.Attrs[i] !== "object")
                    throw TypeError(".TempAttrCollection.Attrs: object expected");
                message.Attrs[i] = $root.TempAttr.fromObject(object.Attrs[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a TempAttrCollection message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TempAttrCollection
     * @static
     * @param {TempAttrCollection} message TempAttrCollection
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    TempAttrCollection.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.Attrs = [];
        if (message.Attrs && message.Attrs.length) {
            object.Attrs = [];
            for (var j = 0; j < message.Attrs.length; ++j)
                object.Attrs[j] = $root.TempAttr.toObject(message.Attrs[j], options);
        }
        return object;
    };

    /**
     * Converts this TempAttrCollection to JSON.
     * @function toJSON
     * @memberof TempAttrCollection
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    TempAttrCollection.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for TempAttrCollection
     * @function getTypeUrl
     * @memberof TempAttrCollection
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    TempAttrCollection.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/TempAttrCollection";
    };

    return TempAttrCollection;
})();

$root.EventData = (function() {

    /**
     * Properties of an EventData.
     * @exports IEventData
     * @interface IEventData
     * @property {number|null} [EventType] EventData EventType
     * @property {Array.<number>|null} [IntParams] EventData IntParams
     * @property {Array.<number|Long>|null} [LongParams] EventData LongParams
     * @property {Array.<number>|null} [FloatParams] EventData FloatParams
     * @property {Array.<string>|null} [StrParams] EventData StrParams
     */

    /**
     * Constructs a new EventData.
     * @exports EventData
     * @classdesc Represents an EventData.
     * @implements IEventData
     * @constructor
     * @param {IEventData=} [properties] Properties to set
     */
    function EventData(properties) {
        this.IntParams = [];
        this.LongParams = [];
        this.FloatParams = [];
        this.StrParams = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * EventData EventType.
     * @member {number|null|undefined} EventType
     * @memberof EventData
     * @instance
     */
    EventData.prototype.EventType = null;

    /**
     * EventData IntParams.
     * @member {Array.<number>} IntParams
     * @memberof EventData
     * @instance
     */
    EventData.prototype.IntParams = $util.emptyArray;

    /**
     * EventData LongParams.
     * @member {Array.<number|Long>} LongParams
     * @memberof EventData
     * @instance
     */
    EventData.prototype.LongParams = $util.emptyArray;

    /**
     * EventData FloatParams.
     * @member {Array.<number>} FloatParams
     * @memberof EventData
     * @instance
     */
    EventData.prototype.FloatParams = $util.emptyArray;

    /**
     * EventData StrParams.
     * @member {Array.<string>} StrParams
     * @memberof EventData
     * @instance
     */
    EventData.prototype.StrParams = $util.emptyArray;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * EventData _EventType.
     * @member {"EventType"|undefined} _EventType
     * @memberof EventData
     * @instance
     */
    Object.defineProperty(EventData.prototype, "_EventType", {
        get: $util.oneOfGetter($oneOfFields = ["EventType"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new EventData instance using the specified properties.
     * @function create
     * @memberof EventData
     * @static
     * @param {IEventData=} [properties] Properties to set
     * @returns {EventData} EventData instance
     */
    EventData.create = function create(properties) {
        return new EventData(properties);
    };

    /**
     * Encodes the specified EventData message. Does not implicitly {@link EventData.verify|verify} messages.
     * @function encode
     * @memberof EventData
     * @static
     * @param {IEventData} message EventData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EventData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.EventType != null && Object.hasOwnProperty.call(message, "EventType"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.EventType);
        if (message.IntParams != null && message.IntParams.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.IntParams.length; ++i)
                writer.int32(message.IntParams[i]);
            writer.ldelim();
        }
        if (message.LongParams != null && message.LongParams.length) {
            writer.uint32(/* id 3, wireType 2 =*/26).fork();
            for (var i = 0; i < message.LongParams.length; ++i)
                writer.int64(message.LongParams[i]);
            writer.ldelim();
        }
        if (message.FloatParams != null && message.FloatParams.length) {
            writer.uint32(/* id 4, wireType 2 =*/34).fork();
            for (var i = 0; i < message.FloatParams.length; ++i)
                writer.float(message.FloatParams[i]);
            writer.ldelim();
        }
        if (message.StrParams != null && message.StrParams.length)
            for (var i = 0; i < message.StrParams.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.StrParams[i]);
        return writer;
    };

    /**
     * Encodes the specified EventData message, length delimited. Does not implicitly {@link EventData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof EventData
     * @static
     * @param {IEventData} message EventData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EventData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an EventData message from the specified reader or buffer.
     * @function decode
     * @memberof EventData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {EventData} EventData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EventData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EventData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.EventType = reader.int32();
                    break;
                }
            case 2: {
                    if (!(message.IntParams && message.IntParams.length))
                        message.IntParams = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.IntParams.push(reader.int32());
                    } else
                        message.IntParams.push(reader.int32());
                    break;
                }
            case 3: {
                    if (!(message.LongParams && message.LongParams.length))
                        message.LongParams = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.LongParams.push(reader.int64());
                    } else
                        message.LongParams.push(reader.int64());
                    break;
                }
            case 4: {
                    if (!(message.FloatParams && message.FloatParams.length))
                        message.FloatParams = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.FloatParams.push(reader.float());
                    } else
                        message.FloatParams.push(reader.float());
                    break;
                }
            case 5: {
                    if (!(message.StrParams && message.StrParams.length))
                        message.StrParams = [];
                    message.StrParams.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an EventData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof EventData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {EventData} EventData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EventData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an EventData message.
     * @function verify
     * @memberof EventData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    EventData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.EventType != null && message.hasOwnProperty("EventType")) {
            properties._EventType = 1;
            if (!$util.isInteger(message.EventType))
                return "EventType: integer expected";
        }
        if (message.IntParams != null && message.hasOwnProperty("IntParams")) {
            if (!Array.isArray(message.IntParams))
                return "IntParams: array expected";
            for (var i = 0; i < message.IntParams.length; ++i)
                if (!$util.isInteger(message.IntParams[i]))
                    return "IntParams: integer[] expected";
        }
        if (message.LongParams != null && message.hasOwnProperty("LongParams")) {
            if (!Array.isArray(message.LongParams))
                return "LongParams: array expected";
            for (var i = 0; i < message.LongParams.length; ++i)
                if (!$util.isInteger(message.LongParams[i]) && !(message.LongParams[i] && $util.isInteger(message.LongParams[i].low) && $util.isInteger(message.LongParams[i].high)))
                    return "LongParams: integer|Long[] expected";
        }
        if (message.FloatParams != null && message.hasOwnProperty("FloatParams")) {
            if (!Array.isArray(message.FloatParams))
                return "FloatParams: array expected";
            for (var i = 0; i < message.FloatParams.length; ++i)
                if (typeof message.FloatParams[i] !== "number")
                    return "FloatParams: number[] expected";
        }
        if (message.StrParams != null && message.hasOwnProperty("StrParams")) {
            if (!Array.isArray(message.StrParams))
                return "StrParams: array expected";
            for (var i = 0; i < message.StrParams.length; ++i)
                if (!$util.isString(message.StrParams[i]))
                    return "StrParams: string[] expected";
        }
        return null;
    };

    /**
     * Creates an EventData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof EventData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {EventData} EventData
     */
    EventData.fromObject = function fromObject(object) {
        if (object instanceof $root.EventData)
            return object;
        var message = new $root.EventData();
        if (object.EventType != null)
            message.EventType = object.EventType | 0;
        if (object.IntParams) {
            if (!Array.isArray(object.IntParams))
                throw TypeError(".EventData.IntParams: array expected");
            message.IntParams = [];
            for (var i = 0; i < object.IntParams.length; ++i)
                message.IntParams[i] = object.IntParams[i] | 0;
        }
        if (object.LongParams) {
            if (!Array.isArray(object.LongParams))
                throw TypeError(".EventData.LongParams: array expected");
            message.LongParams = [];
            for (var i = 0; i < object.LongParams.length; ++i)
                if ($util.Long)
                    (message.LongParams[i] = $util.Long.fromValue(object.LongParams[i])).unsigned = false;
                else if (typeof object.LongParams[i] === "string")
                    message.LongParams[i] = parseInt(object.LongParams[i], 10);
                else if (typeof object.LongParams[i] === "number")
                    message.LongParams[i] = object.LongParams[i];
                else if (typeof object.LongParams[i] === "object")
                    message.LongParams[i] = new $util.LongBits(object.LongParams[i].low >>> 0, object.LongParams[i].high >>> 0).toNumber();
        }
        if (object.FloatParams) {
            if (!Array.isArray(object.FloatParams))
                throw TypeError(".EventData.FloatParams: array expected");
            message.FloatParams = [];
            for (var i = 0; i < object.FloatParams.length; ++i)
                message.FloatParams[i] = Number(object.FloatParams[i]);
        }
        if (object.StrParams) {
            if (!Array.isArray(object.StrParams))
                throw TypeError(".EventData.StrParams: array expected");
            message.StrParams = [];
            for (var i = 0; i < object.StrParams.length; ++i)
                message.StrParams[i] = String(object.StrParams[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from an EventData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof EventData
     * @static
     * @param {EventData} message EventData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    EventData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.IntParams = [];
            object.LongParams = [];
            object.FloatParams = [];
            object.StrParams = [];
        }
        if (message.EventType != null && message.hasOwnProperty("EventType")) {
            object.EventType = message.EventType;
            if (options.oneofs)
                object._EventType = "EventType";
        }
        if (message.IntParams && message.IntParams.length) {
            object.IntParams = [];
            for (var j = 0; j < message.IntParams.length; ++j)
                object.IntParams[j] = message.IntParams[j];
        }
        if (message.LongParams && message.LongParams.length) {
            object.LongParams = [];
            for (var j = 0; j < message.LongParams.length; ++j)
                if (typeof message.LongParams[j] === "number")
                    object.LongParams[j] = options.longs === String ? String(message.LongParams[j]) : message.LongParams[j];
                else
                    object.LongParams[j] = options.longs === String ? $util.Long.prototype.toString.call(message.LongParams[j]) : options.longs === Number ? new $util.LongBits(message.LongParams[j].low >>> 0, message.LongParams[j].high >>> 0).toNumber() : message.LongParams[j];
        }
        if (message.FloatParams && message.FloatParams.length) {
            object.FloatParams = [];
            for (var j = 0; j < message.FloatParams.length; ++j)
                object.FloatParams[j] = options.json && !isFinite(message.FloatParams[j]) ? String(message.FloatParams[j]) : message.FloatParams[j];
        }
        if (message.StrParams && message.StrParams.length) {
            object.StrParams = [];
            for (var j = 0; j < message.StrParams.length; ++j)
                object.StrParams[j] = message.StrParams[j];
        }
        return object;
    };

    /**
     * Converts this EventData to JSON.
     * @function toJSON
     * @memberof EventData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    EventData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for EventData
     * @function getTypeUrl
     * @memberof EventData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    EventData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/EventData";
    };

    return EventData;
})();

$root.EventDataList = (function() {

    /**
     * Properties of an EventDataList.
     * @exports IEventDataList
     * @interface IEventDataList
     * @property {number|Long|null} [Uuid] EventDataList Uuid
     * @property {Array.<IEventData>|null} [Events] EventDataList Events
     */

    /**
     * Constructs a new EventDataList.
     * @exports EventDataList
     * @classdesc Represents an EventDataList.
     * @implements IEventDataList
     * @constructor
     * @param {IEventDataList=} [properties] Properties to set
     */
    function EventDataList(properties) {
        this.Events = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * EventDataList Uuid.
     * @member {number|Long|null|undefined} Uuid
     * @memberof EventDataList
     * @instance
     */
    EventDataList.prototype.Uuid = null;

    /**
     * EventDataList Events.
     * @member {Array.<IEventData>} Events
     * @memberof EventDataList
     * @instance
     */
    EventDataList.prototype.Events = $util.emptyArray;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * EventDataList _Uuid.
     * @member {"Uuid"|undefined} _Uuid
     * @memberof EventDataList
     * @instance
     */
    Object.defineProperty(EventDataList.prototype, "_Uuid", {
        get: $util.oneOfGetter($oneOfFields = ["Uuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new EventDataList instance using the specified properties.
     * @function create
     * @memberof EventDataList
     * @static
     * @param {IEventDataList=} [properties] Properties to set
     * @returns {EventDataList} EventDataList instance
     */
    EventDataList.create = function create(properties) {
        return new EventDataList(properties);
    };

    /**
     * Encodes the specified EventDataList message. Does not implicitly {@link EventDataList.verify|verify} messages.
     * @function encode
     * @memberof EventDataList
     * @static
     * @param {IEventDataList} message EventDataList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EventDataList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.Uuid);
        if (message.Events != null && message.Events.length)
            for (var i = 0; i < message.Events.length; ++i)
                $root.EventData.encode(message.Events[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified EventDataList message, length delimited. Does not implicitly {@link EventDataList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof EventDataList
     * @static
     * @param {IEventDataList} message EventDataList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EventDataList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an EventDataList message from the specified reader or buffer.
     * @function decode
     * @memberof EventDataList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {EventDataList} EventDataList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EventDataList.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EventDataList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Uuid = reader.int64();
                    break;
                }
            case 2: {
                    if (!(message.Events && message.Events.length))
                        message.Events = [];
                    message.Events.push($root.EventData.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an EventDataList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof EventDataList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {EventDataList} EventDataList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EventDataList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an EventDataList message.
     * @function verify
     * @memberof EventDataList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    EventDataList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            properties._Uuid = 1;
            if (!$util.isInteger(message.Uuid) && !(message.Uuid && $util.isInteger(message.Uuid.low) && $util.isInteger(message.Uuid.high)))
                return "Uuid: integer|Long expected";
        }
        if (message.Events != null && message.hasOwnProperty("Events")) {
            if (!Array.isArray(message.Events))
                return "Events: array expected";
            for (var i = 0; i < message.Events.length; ++i) {
                var error = $root.EventData.verify(message.Events[i]);
                if (error)
                    return "Events." + error;
            }
        }
        return null;
    };

    /**
     * Creates an EventDataList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof EventDataList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {EventDataList} EventDataList
     */
    EventDataList.fromObject = function fromObject(object) {
        if (object instanceof $root.EventDataList)
            return object;
        var message = new $root.EventDataList();
        if (object.Uuid != null)
            if ($util.Long)
                (message.Uuid = $util.Long.fromValue(object.Uuid)).unsigned = false;
            else if (typeof object.Uuid === "string")
                message.Uuid = parseInt(object.Uuid, 10);
            else if (typeof object.Uuid === "number")
                message.Uuid = object.Uuid;
            else if (typeof object.Uuid === "object")
                message.Uuid = new $util.LongBits(object.Uuid.low >>> 0, object.Uuid.high >>> 0).toNumber();
        if (object.Events) {
            if (!Array.isArray(object.Events))
                throw TypeError(".EventDataList.Events: array expected");
            message.Events = [];
            for (var i = 0; i < object.Events.length; ++i) {
                if (typeof object.Events[i] !== "object")
                    throw TypeError(".EventDataList.Events: object expected");
                message.Events[i] = $root.EventData.fromObject(object.Events[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from an EventDataList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof EventDataList
     * @static
     * @param {EventDataList} message EventDataList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    EventDataList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.Events = [];
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            if (typeof message.Uuid === "number")
                object.Uuid = options.longs === String ? String(message.Uuid) : message.Uuid;
            else
                object.Uuid = options.longs === String ? $util.Long.prototype.toString.call(message.Uuid) : options.longs === Number ? new $util.LongBits(message.Uuid.low >>> 0, message.Uuid.high >>> 0).toNumber() : message.Uuid;
            if (options.oneofs)
                object._Uuid = "Uuid";
        }
        if (message.Events && message.Events.length) {
            object.Events = [];
            for (var j = 0; j < message.Events.length; ++j)
                object.Events[j] = $root.EventData.toObject(message.Events[j], options);
        }
        return object;
    };

    /**
     * Converts this EventDataList to JSON.
     * @function toJSON
     * @memberof EventDataList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    EventDataList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for EventDataList
     * @function getTypeUrl
     * @memberof EventDataList
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    EventDataList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/EventDataList";
    };

    return EventDataList;
})();

$root.BulletEvent = (function() {

    /**
     * Properties of a BulletEvent.
     * @exports IBulletEvent
     * @interface IBulletEvent
     * @property {number|Long|null} [Uuid] BulletEvent Uuid
     * @property {number|null} [EnterStageId] BulletEvent EnterStageId
     */

    /**
     * Constructs a new BulletEvent.
     * @exports BulletEvent
     * @classdesc Represents a BulletEvent.
     * @implements IBulletEvent
     * @constructor
     * @param {IBulletEvent=} [properties] Properties to set
     */
    function BulletEvent(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BulletEvent Uuid.
     * @member {number|Long|null|undefined} Uuid
     * @memberof BulletEvent
     * @instance
     */
    BulletEvent.prototype.Uuid = null;

    /**
     * BulletEvent EnterStageId.
     * @member {number|null|undefined} EnterStageId
     * @memberof BulletEvent
     * @instance
     */
    BulletEvent.prototype.EnterStageId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * BulletEvent _Uuid.
     * @member {"Uuid"|undefined} _Uuid
     * @memberof BulletEvent
     * @instance
     */
    Object.defineProperty(BulletEvent.prototype, "_Uuid", {
        get: $util.oneOfGetter($oneOfFields = ["Uuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BulletEvent _EnterStageId.
     * @member {"EnterStageId"|undefined} _EnterStageId
     * @memberof BulletEvent
     * @instance
     */
    Object.defineProperty(BulletEvent.prototype, "_EnterStageId", {
        get: $util.oneOfGetter($oneOfFields = ["EnterStageId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new BulletEvent instance using the specified properties.
     * @function create
     * @memberof BulletEvent
     * @static
     * @param {IBulletEvent=} [properties] Properties to set
     * @returns {BulletEvent} BulletEvent instance
     */
    BulletEvent.create = function create(properties) {
        return new BulletEvent(properties);
    };

    /**
     * Encodes the specified BulletEvent message. Does not implicitly {@link BulletEvent.verify|verify} messages.
     * @function encode
     * @memberof BulletEvent
     * @static
     * @param {IBulletEvent} message BulletEvent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BulletEvent.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.Uuid);
        if (message.EnterStageId != null && Object.hasOwnProperty.call(message, "EnterStageId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.EnterStageId);
        return writer;
    };

    /**
     * Encodes the specified BulletEvent message, length delimited. Does not implicitly {@link BulletEvent.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BulletEvent
     * @static
     * @param {IBulletEvent} message BulletEvent message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BulletEvent.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BulletEvent message from the specified reader or buffer.
     * @function decode
     * @memberof BulletEvent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BulletEvent} BulletEvent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BulletEvent.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BulletEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Uuid = reader.int64();
                    break;
                }
            case 2: {
                    message.EnterStageId = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BulletEvent message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BulletEvent
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BulletEvent} BulletEvent
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BulletEvent.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BulletEvent message.
     * @function verify
     * @memberof BulletEvent
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BulletEvent.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            properties._Uuid = 1;
            if (!$util.isInteger(message.Uuid) && !(message.Uuid && $util.isInteger(message.Uuid.low) && $util.isInteger(message.Uuid.high)))
                return "Uuid: integer|Long expected";
        }
        if (message.EnterStageId != null && message.hasOwnProperty("EnterStageId")) {
            properties._EnterStageId = 1;
            if (!$util.isInteger(message.EnterStageId))
                return "EnterStageId: integer expected";
        }
        return null;
    };

    /**
     * Creates a BulletEvent message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BulletEvent
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BulletEvent} BulletEvent
     */
    BulletEvent.fromObject = function fromObject(object) {
        if (object instanceof $root.BulletEvent)
            return object;
        var message = new $root.BulletEvent();
        if (object.Uuid != null)
            if ($util.Long)
                (message.Uuid = $util.Long.fromValue(object.Uuid)).unsigned = false;
            else if (typeof object.Uuid === "string")
                message.Uuid = parseInt(object.Uuid, 10);
            else if (typeof object.Uuid === "number")
                message.Uuid = object.Uuid;
            else if (typeof object.Uuid === "object")
                message.Uuid = new $util.LongBits(object.Uuid.low >>> 0, object.Uuid.high >>> 0).toNumber();
        if (object.EnterStageId != null)
            message.EnterStageId = object.EnterStageId | 0;
        return message;
    };

    /**
     * Creates a plain object from a BulletEvent message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BulletEvent
     * @static
     * @param {BulletEvent} message BulletEvent
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BulletEvent.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            if (typeof message.Uuid === "number")
                object.Uuid = options.longs === String ? String(message.Uuid) : message.Uuid;
            else
                object.Uuid = options.longs === String ? $util.Long.prototype.toString.call(message.Uuid) : options.longs === Number ? new $util.LongBits(message.Uuid.low >>> 0, message.Uuid.high >>> 0).toNumber() : message.Uuid;
            if (options.oneofs)
                object._Uuid = "Uuid";
        }
        if (message.EnterStageId != null && message.hasOwnProperty("EnterStageId")) {
            object.EnterStageId = message.EnterStageId;
            if (options.oneofs)
                object._EnterStageId = "EnterStageId";
        }
        return object;
    };

    /**
     * Converts this BulletEvent to JSON.
     * @function toJSON
     * @memberof BulletEvent
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BulletEvent.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BulletEvent
     * @function getTypeUrl
     * @memberof BulletEvent
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BulletEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BulletEvent";
    };

    return BulletEvent;
})();

$root.ActorBodyPartInfos = (function() {

    /**
     * Properties of an ActorBodyPartInfos.
     * @exports IActorBodyPartInfos
     * @interface IActorBodyPartInfos
     * @property {number|Long|null} [Uuid] ActorBodyPartInfos Uuid
     * @property {Array.<IActorBodyPartInfo>|null} [Infos] ActorBodyPartInfos Infos
     */

    /**
     * Constructs a new ActorBodyPartInfos.
     * @exports ActorBodyPartInfos
     * @classdesc Represents an ActorBodyPartInfos.
     * @implements IActorBodyPartInfos
     * @constructor
     * @param {IActorBodyPartInfos=} [properties] Properties to set
     */
    function ActorBodyPartInfos(properties) {
        this.Infos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ActorBodyPartInfos Uuid.
     * @member {number|Long|null|undefined} Uuid
     * @memberof ActorBodyPartInfos
     * @instance
     */
    ActorBodyPartInfos.prototype.Uuid = null;

    /**
     * ActorBodyPartInfos Infos.
     * @member {Array.<IActorBodyPartInfo>} Infos
     * @memberof ActorBodyPartInfos
     * @instance
     */
    ActorBodyPartInfos.prototype.Infos = $util.emptyArray;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * ActorBodyPartInfos _Uuid.
     * @member {"Uuid"|undefined} _Uuid
     * @memberof ActorBodyPartInfos
     * @instance
     */
    Object.defineProperty(ActorBodyPartInfos.prototype, "_Uuid", {
        get: $util.oneOfGetter($oneOfFields = ["Uuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new ActorBodyPartInfos instance using the specified properties.
     * @function create
     * @memberof ActorBodyPartInfos
     * @static
     * @param {IActorBodyPartInfos=} [properties] Properties to set
     * @returns {ActorBodyPartInfos} ActorBodyPartInfos instance
     */
    ActorBodyPartInfos.create = function create(properties) {
        return new ActorBodyPartInfos(properties);
    };

    /**
     * Encodes the specified ActorBodyPartInfos message. Does not implicitly {@link ActorBodyPartInfos.verify|verify} messages.
     * @function encode
     * @memberof ActorBodyPartInfos
     * @static
     * @param {IActorBodyPartInfos} message ActorBodyPartInfos message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ActorBodyPartInfos.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.Uuid);
        if (message.Infos != null && message.Infos.length)
            for (var i = 0; i < message.Infos.length; ++i)
                $root.ActorBodyPartInfo.encode(message.Infos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ActorBodyPartInfos message, length delimited. Does not implicitly {@link ActorBodyPartInfos.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ActorBodyPartInfos
     * @static
     * @param {IActorBodyPartInfos} message ActorBodyPartInfos message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ActorBodyPartInfos.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an ActorBodyPartInfos message from the specified reader or buffer.
     * @function decode
     * @memberof ActorBodyPartInfos
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ActorBodyPartInfos} ActorBodyPartInfos
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ActorBodyPartInfos.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorBodyPartInfos();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Uuid = reader.int64();
                    break;
                }
            case 2: {
                    if (!(message.Infos && message.Infos.length))
                        message.Infos = [];
                    message.Infos.push($root.ActorBodyPartInfo.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an ActorBodyPartInfos message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ActorBodyPartInfos
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ActorBodyPartInfos} ActorBodyPartInfos
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ActorBodyPartInfos.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an ActorBodyPartInfos message.
     * @function verify
     * @memberof ActorBodyPartInfos
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ActorBodyPartInfos.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            properties._Uuid = 1;
            if (!$util.isInteger(message.Uuid) && !(message.Uuid && $util.isInteger(message.Uuid.low) && $util.isInteger(message.Uuid.high)))
                return "Uuid: integer|Long expected";
        }
        if (message.Infos != null && message.hasOwnProperty("Infos")) {
            if (!Array.isArray(message.Infos))
                return "Infos: array expected";
            for (var i = 0; i < message.Infos.length; ++i) {
                var error = $root.ActorBodyPartInfo.verify(message.Infos[i]);
                if (error)
                    return "Infos." + error;
            }
        }
        return null;
    };

    /**
     * Creates an ActorBodyPartInfos message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ActorBodyPartInfos
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ActorBodyPartInfos} ActorBodyPartInfos
     */
    ActorBodyPartInfos.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorBodyPartInfos)
            return object;
        var message = new $root.ActorBodyPartInfos();
        if (object.Uuid != null)
            if ($util.Long)
                (message.Uuid = $util.Long.fromValue(object.Uuid)).unsigned = false;
            else if (typeof object.Uuid === "string")
                message.Uuid = parseInt(object.Uuid, 10);
            else if (typeof object.Uuid === "number")
                message.Uuid = object.Uuid;
            else if (typeof object.Uuid === "object")
                message.Uuid = new $util.LongBits(object.Uuid.low >>> 0, object.Uuid.high >>> 0).toNumber();
        if (object.Infos) {
            if (!Array.isArray(object.Infos))
                throw TypeError(".ActorBodyPartInfos.Infos: array expected");
            message.Infos = [];
            for (var i = 0; i < object.Infos.length; ++i) {
                if (typeof object.Infos[i] !== "object")
                    throw TypeError(".ActorBodyPartInfos.Infos: object expected");
                message.Infos[i] = $root.ActorBodyPartInfo.fromObject(object.Infos[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from an ActorBodyPartInfos message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ActorBodyPartInfos
     * @static
     * @param {ActorBodyPartInfos} message ActorBodyPartInfos
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ActorBodyPartInfos.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.Infos = [];
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            if (typeof message.Uuid === "number")
                object.Uuid = options.longs === String ? String(message.Uuid) : message.Uuid;
            else
                object.Uuid = options.longs === String ? $util.Long.prototype.toString.call(message.Uuid) : options.longs === Number ? new $util.LongBits(message.Uuid.low >>> 0, message.Uuid.high >>> 0).toNumber() : message.Uuid;
            if (options.oneofs)
                object._Uuid = "Uuid";
        }
        if (message.Infos && message.Infos.length) {
            object.Infos = [];
            for (var j = 0; j < message.Infos.length; ++j)
                object.Infos[j] = $root.ActorBodyPartInfo.toObject(message.Infos[j], options);
        }
        return object;
    };

    /**
     * Converts this ActorBodyPartInfos to JSON.
     * @function toJSON
     * @memberof ActorBodyPartInfos
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ActorBodyPartInfos.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ActorBodyPartInfos
     * @function getTypeUrl
     * @memberof ActorBodyPartInfos
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ActorBodyPartInfos.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ActorBodyPartInfos";
    };

    return ActorBodyPartInfos;
})();

$root.ActorBodyPartInfo = (function() {

    /**
     * Properties of an ActorBodyPartInfo.
     * @exports IActorBodyPartInfo
     * @interface IActorBodyPartInfo
     * @property {number|null} [PartId] ActorBodyPartInfo PartId
     * @property {number|Long|null} [Hp] ActorBodyPartInfo Hp
     * @property {number|Long|null} [MaxHp] ActorBodyPartInfo MaxHp
     * @property {BodyPartState|null} [State] ActorBodyPartInfo State
     * @property {number|null} [FleshyId] ActorBodyPartInfo FleshyId
     */

    /**
     * Constructs a new ActorBodyPartInfo.
     * @exports ActorBodyPartInfo
     * @classdesc Represents an ActorBodyPartInfo.
     * @implements IActorBodyPartInfo
     * @constructor
     * @param {IActorBodyPartInfo=} [properties] Properties to set
     */
    function ActorBodyPartInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ActorBodyPartInfo PartId.
     * @member {number|null|undefined} PartId
     * @memberof ActorBodyPartInfo
     * @instance
     */
    ActorBodyPartInfo.prototype.PartId = null;

    /**
     * ActorBodyPartInfo Hp.
     * @member {number|Long|null|undefined} Hp
     * @memberof ActorBodyPartInfo
     * @instance
     */
    ActorBodyPartInfo.prototype.Hp = null;

    /**
     * ActorBodyPartInfo MaxHp.
     * @member {number|Long|null|undefined} MaxHp
     * @memberof ActorBodyPartInfo
     * @instance
     */
    ActorBodyPartInfo.prototype.MaxHp = null;

    /**
     * ActorBodyPartInfo State.
     * @member {BodyPartState|null|undefined} State
     * @memberof ActorBodyPartInfo
     * @instance
     */
    ActorBodyPartInfo.prototype.State = null;

    /**
     * ActorBodyPartInfo FleshyId.
     * @member {number|null|undefined} FleshyId
     * @memberof ActorBodyPartInfo
     * @instance
     */
    ActorBodyPartInfo.prototype.FleshyId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * ActorBodyPartInfo _PartId.
     * @member {"PartId"|undefined} _PartId
     * @memberof ActorBodyPartInfo
     * @instance
     */
    Object.defineProperty(ActorBodyPartInfo.prototype, "_PartId", {
        get: $util.oneOfGetter($oneOfFields = ["PartId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * ActorBodyPartInfo _Hp.
     * @member {"Hp"|undefined} _Hp
     * @memberof ActorBodyPartInfo
     * @instance
     */
    Object.defineProperty(ActorBodyPartInfo.prototype, "_Hp", {
        get: $util.oneOfGetter($oneOfFields = ["Hp"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * ActorBodyPartInfo _MaxHp.
     * @member {"MaxHp"|undefined} _MaxHp
     * @memberof ActorBodyPartInfo
     * @instance
     */
    Object.defineProperty(ActorBodyPartInfo.prototype, "_MaxHp", {
        get: $util.oneOfGetter($oneOfFields = ["MaxHp"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * ActorBodyPartInfo _State.
     * @member {"State"|undefined} _State
     * @memberof ActorBodyPartInfo
     * @instance
     */
    Object.defineProperty(ActorBodyPartInfo.prototype, "_State", {
        get: $util.oneOfGetter($oneOfFields = ["State"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * ActorBodyPartInfo _FleshyId.
     * @member {"FleshyId"|undefined} _FleshyId
     * @memberof ActorBodyPartInfo
     * @instance
     */
    Object.defineProperty(ActorBodyPartInfo.prototype, "_FleshyId", {
        get: $util.oneOfGetter($oneOfFields = ["FleshyId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new ActorBodyPartInfo instance using the specified properties.
     * @function create
     * @memberof ActorBodyPartInfo
     * @static
     * @param {IActorBodyPartInfo=} [properties] Properties to set
     * @returns {ActorBodyPartInfo} ActorBodyPartInfo instance
     */
    ActorBodyPartInfo.create = function create(properties) {
        return new ActorBodyPartInfo(properties);
    };

    /**
     * Encodes the specified ActorBodyPartInfo message. Does not implicitly {@link ActorBodyPartInfo.verify|verify} messages.
     * @function encode
     * @memberof ActorBodyPartInfo
     * @static
     * @param {IActorBodyPartInfo} message ActorBodyPartInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ActorBodyPartInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.PartId != null && Object.hasOwnProperty.call(message, "PartId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.PartId);
        if (message.Hp != null && Object.hasOwnProperty.call(message, "Hp"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.Hp);
        if (message.MaxHp != null && Object.hasOwnProperty.call(message, "MaxHp"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.MaxHp);
        if (message.State != null && Object.hasOwnProperty.call(message, "State"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.State);
        if (message.FleshyId != null && Object.hasOwnProperty.call(message, "FleshyId"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.FleshyId);
        return writer;
    };

    /**
     * Encodes the specified ActorBodyPartInfo message, length delimited. Does not implicitly {@link ActorBodyPartInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ActorBodyPartInfo
     * @static
     * @param {IActorBodyPartInfo} message ActorBodyPartInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ActorBodyPartInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an ActorBodyPartInfo message from the specified reader or buffer.
     * @function decode
     * @memberof ActorBodyPartInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ActorBodyPartInfo} ActorBodyPartInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ActorBodyPartInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorBodyPartInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.PartId = reader.int32();
                    break;
                }
            case 2: {
                    message.Hp = reader.uint64();
                    break;
                }
            case 3: {
                    message.MaxHp = reader.uint64();
                    break;
                }
            case 4: {
                    message.State = reader.int32();
                    break;
                }
            case 5: {
                    message.FleshyId = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an ActorBodyPartInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ActorBodyPartInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ActorBodyPartInfo} ActorBodyPartInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ActorBodyPartInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an ActorBodyPartInfo message.
     * @function verify
     * @memberof ActorBodyPartInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ActorBodyPartInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.PartId != null && message.hasOwnProperty("PartId")) {
            properties._PartId = 1;
            if (!$util.isInteger(message.PartId))
                return "PartId: integer expected";
        }
        if (message.Hp != null && message.hasOwnProperty("Hp")) {
            properties._Hp = 1;
            if (!$util.isInteger(message.Hp) && !(message.Hp && $util.isInteger(message.Hp.low) && $util.isInteger(message.Hp.high)))
                return "Hp: integer|Long expected";
        }
        if (message.MaxHp != null && message.hasOwnProperty("MaxHp")) {
            properties._MaxHp = 1;
            if (!$util.isInteger(message.MaxHp) && !(message.MaxHp && $util.isInteger(message.MaxHp.low) && $util.isInteger(message.MaxHp.high)))
                return "MaxHp: integer|Long expected";
        }
        if (message.State != null && message.hasOwnProperty("State")) {
            properties._State = 1;
            switch (message.State) {
            default:
                return "State: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        }
        if (message.FleshyId != null && message.hasOwnProperty("FleshyId")) {
            properties._FleshyId = 1;
            if (!$util.isInteger(message.FleshyId))
                return "FleshyId: integer expected";
        }
        return null;
    };

    /**
     * Creates an ActorBodyPartInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ActorBodyPartInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ActorBodyPartInfo} ActorBodyPartInfo
     */
    ActorBodyPartInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorBodyPartInfo)
            return object;
        var message = new $root.ActorBodyPartInfo();
        if (object.PartId != null)
            message.PartId = object.PartId | 0;
        if (object.Hp != null)
            if ($util.Long)
                (message.Hp = $util.Long.fromValue(object.Hp)).unsigned = true;
            else if (typeof object.Hp === "string")
                message.Hp = parseInt(object.Hp, 10);
            else if (typeof object.Hp === "number")
                message.Hp = object.Hp;
            else if (typeof object.Hp === "object")
                message.Hp = new $util.LongBits(object.Hp.low >>> 0, object.Hp.high >>> 0).toNumber(true);
        if (object.MaxHp != null)
            if ($util.Long)
                (message.MaxHp = $util.Long.fromValue(object.MaxHp)).unsigned = true;
            else if (typeof object.MaxHp === "string")
                message.MaxHp = parseInt(object.MaxHp, 10);
            else if (typeof object.MaxHp === "number")
                message.MaxHp = object.MaxHp;
            else if (typeof object.MaxHp === "object")
                message.MaxHp = new $util.LongBits(object.MaxHp.low >>> 0, object.MaxHp.high >>> 0).toNumber(true);
        switch (object.State) {
        default:
            if (typeof object.State === "number") {
                message.State = object.State;
                break;
            }
            break;
        case "BodyPartStateDefault":
        case 0:
            message.State = 0;
            break;
        case "BodyPartStateInjury":
        case 1:
            message.State = 1;
            break;
        case "BodyPartStateDead":
        case 2:
            message.State = 2;
            break;
        }
        if (object.FleshyId != null)
            message.FleshyId = object.FleshyId | 0;
        return message;
    };

    /**
     * Creates a plain object from an ActorBodyPartInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ActorBodyPartInfo
     * @static
     * @param {ActorBodyPartInfo} message ActorBodyPartInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ActorBodyPartInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.PartId != null && message.hasOwnProperty("PartId")) {
            object.PartId = message.PartId;
            if (options.oneofs)
                object._PartId = "PartId";
        }
        if (message.Hp != null && message.hasOwnProperty("Hp")) {
            if (typeof message.Hp === "number")
                object.Hp = options.longs === String ? String(message.Hp) : message.Hp;
            else
                object.Hp = options.longs === String ? $util.Long.prototype.toString.call(message.Hp) : options.longs === Number ? new $util.LongBits(message.Hp.low >>> 0, message.Hp.high >>> 0).toNumber(true) : message.Hp;
            if (options.oneofs)
                object._Hp = "Hp";
        }
        if (message.MaxHp != null && message.hasOwnProperty("MaxHp")) {
            if (typeof message.MaxHp === "number")
                object.MaxHp = options.longs === String ? String(message.MaxHp) : message.MaxHp;
            else
                object.MaxHp = options.longs === String ? $util.Long.prototype.toString.call(message.MaxHp) : options.longs === Number ? new $util.LongBits(message.MaxHp.low >>> 0, message.MaxHp.high >>> 0).toNumber(true) : message.MaxHp;
            if (options.oneofs)
                object._MaxHp = "MaxHp";
        }
        if (message.State != null && message.hasOwnProperty("State")) {
            object.State = options.enums === String ? $root.BodyPartState[message.State] === undefined ? message.State : $root.BodyPartState[message.State] : message.State;
            if (options.oneofs)
                object._State = "State";
        }
        if (message.FleshyId != null && message.hasOwnProperty("FleshyId")) {
            object.FleshyId = message.FleshyId;
            if (options.oneofs)
                object._FleshyId = "FleshyId";
        }
        return object;
    };

    /**
     * Converts this ActorBodyPartInfo to JSON.
     * @function toJSON
     * @memberof ActorBodyPartInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ActorBodyPartInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ActorBodyPartInfo
     * @function getTypeUrl
     * @memberof ActorBodyPartInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ActorBodyPartInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ActorBodyPartInfo";
    };

    return ActorBodyPartInfo;
})();

/**
 * BodyPartState enum.
 * @exports BodyPartState
 * @enum {number}
 * @property {number} BodyPartStateDefault=0 BodyPartStateDefault value
 * @property {number} BodyPartStateInjury=1 BodyPartStateInjury value
 * @property {number} BodyPartStateDead=2 BodyPartStateDead value
 */
$root.BodyPartState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "BodyPartStateDefault"] = 0;
    values[valuesById[1] = "BodyPartStateInjury"] = 1;
    values[valuesById[2] = "BodyPartStateDead"] = 2;
    return values;
})();

$root.PassiveSkillInfo = (function() {

    /**
     * Properties of a PassiveSkillInfo.
     * @exports IPassiveSkillInfo
     * @interface IPassiveSkillInfo
     * @property {number|null} [Uuid] PassiveSkillInfo Uuid
     * @property {number|Long|null} [TargetUuid] PassiveSkillInfo TargetUuid
     * @property {number|Long|null} [StageBeginTime] PassiveSkillInfo StageBeginTime
     * @property {number|Long|null} [BeginTime] PassiveSkillInfo BeginTime
     * @property {number|null} [StagePlayNum] PassiveSkillInfo StagePlayNum
     * @property {number|null} [SkillId] PassiveSkillInfo SkillId
     * @property {number|null} [SkillLevel] PassiveSkillInfo SkillLevel
     * @property {number|null} [SkillStage] PassiveSkillInfo SkillStage
     */

    /**
     * Constructs a new PassiveSkillInfo.
     * @exports PassiveSkillInfo
     * @classdesc Represents a PassiveSkillInfo.
     * @implements IPassiveSkillInfo
     * @constructor
     * @param {IPassiveSkillInfo=} [properties] Properties to set
     */
    function PassiveSkillInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PassiveSkillInfo Uuid.
     * @member {number|null|undefined} Uuid
     * @memberof PassiveSkillInfo
     * @instance
     */
    PassiveSkillInfo.prototype.Uuid = null;

    /**
     * PassiveSkillInfo TargetUuid.
     * @member {number|Long|null|undefined} TargetUuid
     * @memberof PassiveSkillInfo
     * @instance
     */
    PassiveSkillInfo.prototype.TargetUuid = null;

    /**
     * PassiveSkillInfo StageBeginTime.
     * @member {number|Long|null|undefined} StageBeginTime
     * @memberof PassiveSkillInfo
     * @instance
     */
    PassiveSkillInfo.prototype.StageBeginTime = null;

    /**
     * PassiveSkillInfo BeginTime.
     * @member {number|Long|null|undefined} BeginTime
     * @memberof PassiveSkillInfo
     * @instance
     */
    PassiveSkillInfo.prototype.BeginTime = null;

    /**
     * PassiveSkillInfo StagePlayNum.
     * @member {number|null|undefined} StagePlayNum
     * @memberof PassiveSkillInfo
     * @instance
     */
    PassiveSkillInfo.prototype.StagePlayNum = null;

    /**
     * PassiveSkillInfo SkillId.
     * @member {number|null|undefined} SkillId
     * @memberof PassiveSkillInfo
     * @instance
     */
    PassiveSkillInfo.prototype.SkillId = null;

    /**
     * PassiveSkillInfo SkillLevel.
     * @member {number|null|undefined} SkillLevel
     * @memberof PassiveSkillInfo
     * @instance
     */
    PassiveSkillInfo.prototype.SkillLevel = null;

    /**
     * PassiveSkillInfo SkillStage.
     * @member {number|null|undefined} SkillStage
     * @memberof PassiveSkillInfo
     * @instance
     */
    PassiveSkillInfo.prototype.SkillStage = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * PassiveSkillInfo _Uuid.
     * @member {"Uuid"|undefined} _Uuid
     * @memberof PassiveSkillInfo
     * @instance
     */
    Object.defineProperty(PassiveSkillInfo.prototype, "_Uuid", {
        get: $util.oneOfGetter($oneOfFields = ["Uuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PassiveSkillInfo _TargetUuid.
     * @member {"TargetUuid"|undefined} _TargetUuid
     * @memberof PassiveSkillInfo
     * @instance
     */
    Object.defineProperty(PassiveSkillInfo.prototype, "_TargetUuid", {
        get: $util.oneOfGetter($oneOfFields = ["TargetUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PassiveSkillInfo _StageBeginTime.
     * @member {"StageBeginTime"|undefined} _StageBeginTime
     * @memberof PassiveSkillInfo
     * @instance
     */
    Object.defineProperty(PassiveSkillInfo.prototype, "_StageBeginTime", {
        get: $util.oneOfGetter($oneOfFields = ["StageBeginTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PassiveSkillInfo _BeginTime.
     * @member {"BeginTime"|undefined} _BeginTime
     * @memberof PassiveSkillInfo
     * @instance
     */
    Object.defineProperty(PassiveSkillInfo.prototype, "_BeginTime", {
        get: $util.oneOfGetter($oneOfFields = ["BeginTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PassiveSkillInfo _StagePlayNum.
     * @member {"StagePlayNum"|undefined} _StagePlayNum
     * @memberof PassiveSkillInfo
     * @instance
     */
    Object.defineProperty(PassiveSkillInfo.prototype, "_StagePlayNum", {
        get: $util.oneOfGetter($oneOfFields = ["StagePlayNum"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PassiveSkillInfo _SkillId.
     * @member {"SkillId"|undefined} _SkillId
     * @memberof PassiveSkillInfo
     * @instance
     */
    Object.defineProperty(PassiveSkillInfo.prototype, "_SkillId", {
        get: $util.oneOfGetter($oneOfFields = ["SkillId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PassiveSkillInfo _SkillLevel.
     * @member {"SkillLevel"|undefined} _SkillLevel
     * @memberof PassiveSkillInfo
     * @instance
     */
    Object.defineProperty(PassiveSkillInfo.prototype, "_SkillLevel", {
        get: $util.oneOfGetter($oneOfFields = ["SkillLevel"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PassiveSkillInfo _SkillStage.
     * @member {"SkillStage"|undefined} _SkillStage
     * @memberof PassiveSkillInfo
     * @instance
     */
    Object.defineProperty(PassiveSkillInfo.prototype, "_SkillStage", {
        get: $util.oneOfGetter($oneOfFields = ["SkillStage"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new PassiveSkillInfo instance using the specified properties.
     * @function create
     * @memberof PassiveSkillInfo
     * @static
     * @param {IPassiveSkillInfo=} [properties] Properties to set
     * @returns {PassiveSkillInfo} PassiveSkillInfo instance
     */
    PassiveSkillInfo.create = function create(properties) {
        return new PassiveSkillInfo(properties);
    };

    /**
     * Encodes the specified PassiveSkillInfo message. Does not implicitly {@link PassiveSkillInfo.verify|verify} messages.
     * @function encode
     * @memberof PassiveSkillInfo
     * @static
     * @param {IPassiveSkillInfo} message PassiveSkillInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PassiveSkillInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Uuid);
        if (message.TargetUuid != null && Object.hasOwnProperty.call(message, "TargetUuid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.TargetUuid);
        if (message.StageBeginTime != null && Object.hasOwnProperty.call(message, "StageBeginTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.StageBeginTime);
        if (message.BeginTime != null && Object.hasOwnProperty.call(message, "BeginTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.BeginTime);
        if (message.StagePlayNum != null && Object.hasOwnProperty.call(message, "StagePlayNum"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.StagePlayNum);
        if (message.SkillId != null && Object.hasOwnProperty.call(message, "SkillId"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.SkillId);
        if (message.SkillLevel != null && Object.hasOwnProperty.call(message, "SkillLevel"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.SkillLevel);
        if (message.SkillStage != null && Object.hasOwnProperty.call(message, "SkillStage"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.SkillStage);
        return writer;
    };

    /**
     * Encodes the specified PassiveSkillInfo message, length delimited. Does not implicitly {@link PassiveSkillInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PassiveSkillInfo
     * @static
     * @param {IPassiveSkillInfo} message PassiveSkillInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PassiveSkillInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PassiveSkillInfo message from the specified reader or buffer.
     * @function decode
     * @memberof PassiveSkillInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PassiveSkillInfo} PassiveSkillInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PassiveSkillInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PassiveSkillInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Uuid = reader.int32();
                    break;
                }
            case 2: {
                    message.TargetUuid = reader.int64();
                    break;
                }
            case 3: {
                    message.StageBeginTime = reader.int64();
                    break;
                }
            case 4: {
                    message.BeginTime = reader.int64();
                    break;
                }
            case 5: {
                    message.StagePlayNum = reader.int32();
                    break;
                }
            case 6: {
                    message.SkillId = reader.int32();
                    break;
                }
            case 7: {
                    message.SkillLevel = reader.int32();
                    break;
                }
            case 8: {
                    message.SkillStage = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PassiveSkillInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PassiveSkillInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PassiveSkillInfo} PassiveSkillInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PassiveSkillInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PassiveSkillInfo message.
     * @function verify
     * @memberof PassiveSkillInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PassiveSkillInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            properties._Uuid = 1;
            if (!$util.isInteger(message.Uuid))
                return "Uuid: integer expected";
        }
        if (message.TargetUuid != null && message.hasOwnProperty("TargetUuid")) {
            properties._TargetUuid = 1;
            if (!$util.isInteger(message.TargetUuid) && !(message.TargetUuid && $util.isInteger(message.TargetUuid.low) && $util.isInteger(message.TargetUuid.high)))
                return "TargetUuid: integer|Long expected";
        }
        if (message.StageBeginTime != null && message.hasOwnProperty("StageBeginTime")) {
            properties._StageBeginTime = 1;
            if (!$util.isInteger(message.StageBeginTime) && !(message.StageBeginTime && $util.isInteger(message.StageBeginTime.low) && $util.isInteger(message.StageBeginTime.high)))
                return "StageBeginTime: integer|Long expected";
        }
        if (message.BeginTime != null && message.hasOwnProperty("BeginTime")) {
            properties._BeginTime = 1;
            if (!$util.isInteger(message.BeginTime) && !(message.BeginTime && $util.isInteger(message.BeginTime.low) && $util.isInteger(message.BeginTime.high)))
                return "BeginTime: integer|Long expected";
        }
        if (message.StagePlayNum != null && message.hasOwnProperty("StagePlayNum")) {
            properties._StagePlayNum = 1;
            if (!$util.isInteger(message.StagePlayNum))
                return "StagePlayNum: integer expected";
        }
        if (message.SkillId != null && message.hasOwnProperty("SkillId")) {
            properties._SkillId = 1;
            if (!$util.isInteger(message.SkillId))
                return "SkillId: integer expected";
        }
        if (message.SkillLevel != null && message.hasOwnProperty("SkillLevel")) {
            properties._SkillLevel = 1;
            if (!$util.isInteger(message.SkillLevel))
                return "SkillLevel: integer expected";
        }
        if (message.SkillStage != null && message.hasOwnProperty("SkillStage")) {
            properties._SkillStage = 1;
            if (!$util.isInteger(message.SkillStage))
                return "SkillStage: integer expected";
        }
        return null;
    };

    /**
     * Creates a PassiveSkillInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PassiveSkillInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PassiveSkillInfo} PassiveSkillInfo
     */
    PassiveSkillInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.PassiveSkillInfo)
            return object;
        var message = new $root.PassiveSkillInfo();
        if (object.Uuid != null)
            message.Uuid = object.Uuid | 0;
        if (object.TargetUuid != null)
            if ($util.Long)
                (message.TargetUuid = $util.Long.fromValue(object.TargetUuid)).unsigned = false;
            else if (typeof object.TargetUuid === "string")
                message.TargetUuid = parseInt(object.TargetUuid, 10);
            else if (typeof object.TargetUuid === "number")
                message.TargetUuid = object.TargetUuid;
            else if (typeof object.TargetUuid === "object")
                message.TargetUuid = new $util.LongBits(object.TargetUuid.low >>> 0, object.TargetUuid.high >>> 0).toNumber();
        if (object.StageBeginTime != null)
            if ($util.Long)
                (message.StageBeginTime = $util.Long.fromValue(object.StageBeginTime)).unsigned = false;
            else if (typeof object.StageBeginTime === "string")
                message.StageBeginTime = parseInt(object.StageBeginTime, 10);
            else if (typeof object.StageBeginTime === "number")
                message.StageBeginTime = object.StageBeginTime;
            else if (typeof object.StageBeginTime === "object")
                message.StageBeginTime = new $util.LongBits(object.StageBeginTime.low >>> 0, object.StageBeginTime.high >>> 0).toNumber();
        if (object.BeginTime != null)
            if ($util.Long)
                (message.BeginTime = $util.Long.fromValue(object.BeginTime)).unsigned = false;
            else if (typeof object.BeginTime === "string")
                message.BeginTime = parseInt(object.BeginTime, 10);
            else if (typeof object.BeginTime === "number")
                message.BeginTime = object.BeginTime;
            else if (typeof object.BeginTime === "object")
                message.BeginTime = new $util.LongBits(object.BeginTime.low >>> 0, object.BeginTime.high >>> 0).toNumber();
        if (object.StagePlayNum != null)
            message.StagePlayNum = object.StagePlayNum | 0;
        if (object.SkillId != null)
            message.SkillId = object.SkillId | 0;
        if (object.SkillLevel != null)
            message.SkillLevel = object.SkillLevel | 0;
        if (object.SkillStage != null)
            message.SkillStage = object.SkillStage | 0;
        return message;
    };

    /**
     * Creates a plain object from a PassiveSkillInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PassiveSkillInfo
     * @static
     * @param {PassiveSkillInfo} message PassiveSkillInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PassiveSkillInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            object.Uuid = message.Uuid;
            if (options.oneofs)
                object._Uuid = "Uuid";
        }
        if (message.TargetUuid != null && message.hasOwnProperty("TargetUuid")) {
            if (typeof message.TargetUuid === "number")
                object.TargetUuid = options.longs === String ? String(message.TargetUuid) : message.TargetUuid;
            else
                object.TargetUuid = options.longs === String ? $util.Long.prototype.toString.call(message.TargetUuid) : options.longs === Number ? new $util.LongBits(message.TargetUuid.low >>> 0, message.TargetUuid.high >>> 0).toNumber() : message.TargetUuid;
            if (options.oneofs)
                object._TargetUuid = "TargetUuid";
        }
        if (message.StageBeginTime != null && message.hasOwnProperty("StageBeginTime")) {
            if (typeof message.StageBeginTime === "number")
                object.StageBeginTime = options.longs === String ? String(message.StageBeginTime) : message.StageBeginTime;
            else
                object.StageBeginTime = options.longs === String ? $util.Long.prototype.toString.call(message.StageBeginTime) : options.longs === Number ? new $util.LongBits(message.StageBeginTime.low >>> 0, message.StageBeginTime.high >>> 0).toNumber() : message.StageBeginTime;
            if (options.oneofs)
                object._StageBeginTime = "StageBeginTime";
        }
        if (message.BeginTime != null && message.hasOwnProperty("BeginTime")) {
            if (typeof message.BeginTime === "number")
                object.BeginTime = options.longs === String ? String(message.BeginTime) : message.BeginTime;
            else
                object.BeginTime = options.longs === String ? $util.Long.prototype.toString.call(message.BeginTime) : options.longs === Number ? new $util.LongBits(message.BeginTime.low >>> 0, message.BeginTime.high >>> 0).toNumber() : message.BeginTime;
            if (options.oneofs)
                object._BeginTime = "BeginTime";
        }
        if (message.StagePlayNum != null && message.hasOwnProperty("StagePlayNum")) {
            object.StagePlayNum = message.StagePlayNum;
            if (options.oneofs)
                object._StagePlayNum = "StagePlayNum";
        }
        if (message.SkillId != null && message.hasOwnProperty("SkillId")) {
            object.SkillId = message.SkillId;
            if (options.oneofs)
                object._SkillId = "SkillId";
        }
        if (message.SkillLevel != null && message.hasOwnProperty("SkillLevel")) {
            object.SkillLevel = message.SkillLevel;
            if (options.oneofs)
                object._SkillLevel = "SkillLevel";
        }
        if (message.SkillStage != null && message.hasOwnProperty("SkillStage")) {
            object.SkillStage = message.SkillStage;
            if (options.oneofs)
                object._SkillStage = "SkillStage";
        }
        return object;
    };

    /**
     * Converts this PassiveSkillInfo to JSON.
     * @function toJSON
     * @memberof PassiveSkillInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PassiveSkillInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PassiveSkillInfo
     * @function getTypeUrl
     * @memberof PassiveSkillInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PassiveSkillInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PassiveSkillInfo";
    };

    return PassiveSkillInfo;
})();

$root.SeqPassiveSkillInfo = (function() {

    /**
     * Properties of a SeqPassiveSkillInfo.
     * @exports ISeqPassiveSkillInfo
     * @interface ISeqPassiveSkillInfo
     * @property {number|Long|null} [ActorUuid] SeqPassiveSkillInfo ActorUuid
     * @property {Array.<IPassiveSkillInfo>|null} [PassiveInfos] SeqPassiveSkillInfo PassiveInfos
     */

    /**
     * Constructs a new SeqPassiveSkillInfo.
     * @exports SeqPassiveSkillInfo
     * @classdesc Represents a SeqPassiveSkillInfo.
     * @implements ISeqPassiveSkillInfo
     * @constructor
     * @param {ISeqPassiveSkillInfo=} [properties] Properties to set
     */
    function SeqPassiveSkillInfo(properties) {
        this.PassiveInfos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SeqPassiveSkillInfo ActorUuid.
     * @member {number|Long|null|undefined} ActorUuid
     * @memberof SeqPassiveSkillInfo
     * @instance
     */
    SeqPassiveSkillInfo.prototype.ActorUuid = null;

    /**
     * SeqPassiveSkillInfo PassiveInfos.
     * @member {Array.<IPassiveSkillInfo>} PassiveInfos
     * @memberof SeqPassiveSkillInfo
     * @instance
     */
    SeqPassiveSkillInfo.prototype.PassiveInfos = $util.emptyArray;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * SeqPassiveSkillInfo _ActorUuid.
     * @member {"ActorUuid"|undefined} _ActorUuid
     * @memberof SeqPassiveSkillInfo
     * @instance
     */
    Object.defineProperty(SeqPassiveSkillInfo.prototype, "_ActorUuid", {
        get: $util.oneOfGetter($oneOfFields = ["ActorUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new SeqPassiveSkillInfo instance using the specified properties.
     * @function create
     * @memberof SeqPassiveSkillInfo
     * @static
     * @param {ISeqPassiveSkillInfo=} [properties] Properties to set
     * @returns {SeqPassiveSkillInfo} SeqPassiveSkillInfo instance
     */
    SeqPassiveSkillInfo.create = function create(properties) {
        return new SeqPassiveSkillInfo(properties);
    };

    /**
     * Encodes the specified SeqPassiveSkillInfo message. Does not implicitly {@link SeqPassiveSkillInfo.verify|verify} messages.
     * @function encode
     * @memberof SeqPassiveSkillInfo
     * @static
     * @param {ISeqPassiveSkillInfo} message SeqPassiveSkillInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SeqPassiveSkillInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ActorUuid != null && Object.hasOwnProperty.call(message, "ActorUuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ActorUuid);
        if (message.PassiveInfos != null && message.PassiveInfos.length)
            for (var i = 0; i < message.PassiveInfos.length; ++i)
                $root.PassiveSkillInfo.encode(message.PassiveInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SeqPassiveSkillInfo message, length delimited. Does not implicitly {@link SeqPassiveSkillInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SeqPassiveSkillInfo
     * @static
     * @param {ISeqPassiveSkillInfo} message SeqPassiveSkillInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SeqPassiveSkillInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SeqPassiveSkillInfo message from the specified reader or buffer.
     * @function decode
     * @memberof SeqPassiveSkillInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SeqPassiveSkillInfo} SeqPassiveSkillInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SeqPassiveSkillInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SeqPassiveSkillInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.ActorUuid = reader.int64();
                    break;
                }
            case 2: {
                    if (!(message.PassiveInfos && message.PassiveInfos.length))
                        message.PassiveInfos = [];
                    message.PassiveInfos.push($root.PassiveSkillInfo.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SeqPassiveSkillInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SeqPassiveSkillInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SeqPassiveSkillInfo} SeqPassiveSkillInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SeqPassiveSkillInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SeqPassiveSkillInfo message.
     * @function verify
     * @memberof SeqPassiveSkillInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SeqPassiveSkillInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.ActorUuid != null && message.hasOwnProperty("ActorUuid")) {
            properties._ActorUuid = 1;
            if (!$util.isInteger(message.ActorUuid) && !(message.ActorUuid && $util.isInteger(message.ActorUuid.low) && $util.isInteger(message.ActorUuid.high)))
                return "ActorUuid: integer|Long expected";
        }
        if (message.PassiveInfos != null && message.hasOwnProperty("PassiveInfos")) {
            if (!Array.isArray(message.PassiveInfos))
                return "PassiveInfos: array expected";
            for (var i = 0; i < message.PassiveInfos.length; ++i) {
                var error = $root.PassiveSkillInfo.verify(message.PassiveInfos[i]);
                if (error)
                    return "PassiveInfos." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SeqPassiveSkillInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SeqPassiveSkillInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SeqPassiveSkillInfo} SeqPassiveSkillInfo
     */
    SeqPassiveSkillInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.SeqPassiveSkillInfo)
            return object;
        var message = new $root.SeqPassiveSkillInfo();
        if (object.ActorUuid != null)
            if ($util.Long)
                (message.ActorUuid = $util.Long.fromValue(object.ActorUuid)).unsigned = false;
            else if (typeof object.ActorUuid === "string")
                message.ActorUuid = parseInt(object.ActorUuid, 10);
            else if (typeof object.ActorUuid === "number")
                message.ActorUuid = object.ActorUuid;
            else if (typeof object.ActorUuid === "object")
                message.ActorUuid = new $util.LongBits(object.ActorUuid.low >>> 0, object.ActorUuid.high >>> 0).toNumber();
        if (object.PassiveInfos) {
            if (!Array.isArray(object.PassiveInfos))
                throw TypeError(".SeqPassiveSkillInfo.PassiveInfos: array expected");
            message.PassiveInfos = [];
            for (var i = 0; i < object.PassiveInfos.length; ++i) {
                if (typeof object.PassiveInfos[i] !== "object")
                    throw TypeError(".SeqPassiveSkillInfo.PassiveInfos: object expected");
                message.PassiveInfos[i] = $root.PassiveSkillInfo.fromObject(object.PassiveInfos[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SeqPassiveSkillInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SeqPassiveSkillInfo
     * @static
     * @param {SeqPassiveSkillInfo} message SeqPassiveSkillInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SeqPassiveSkillInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.PassiveInfos = [];
        if (message.ActorUuid != null && message.hasOwnProperty("ActorUuid")) {
            if (typeof message.ActorUuid === "number")
                object.ActorUuid = options.longs === String ? String(message.ActorUuid) : message.ActorUuid;
            else
                object.ActorUuid = options.longs === String ? $util.Long.prototype.toString.call(message.ActorUuid) : options.longs === Number ? new $util.LongBits(message.ActorUuid.low >>> 0, message.ActorUuid.high >>> 0).toNumber() : message.ActorUuid;
            if (options.oneofs)
                object._ActorUuid = "ActorUuid";
        }
        if (message.PassiveInfos && message.PassiveInfos.length) {
            object.PassiveInfos = [];
            for (var j = 0; j < message.PassiveInfos.length; ++j)
                object.PassiveInfos[j] = $root.PassiveSkillInfo.toObject(message.PassiveInfos[j], options);
        }
        return object;
    };

    /**
     * Converts this SeqPassiveSkillInfo to JSON.
     * @function toJSON
     * @memberof SeqPassiveSkillInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SeqPassiveSkillInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SeqPassiveSkillInfo
     * @function getTypeUrl
     * @memberof SeqPassiveSkillInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SeqPassiveSkillInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SeqPassiveSkillInfo";
    };

    return SeqPassiveSkillInfo;
})();

$root.SeqPassiveSkillEndInfo = (function() {

    /**
     * Properties of a SeqPassiveSkillEndInfo.
     * @exports ISeqPassiveSkillEndInfo
     * @interface ISeqPassiveSkillEndInfo
     * @property {number|Long|null} [ActorUuid] SeqPassiveSkillEndInfo ActorUuid
     * @property {Array.<number|Long>|null} [Uuids] SeqPassiveSkillEndInfo Uuids
     */

    /**
     * Constructs a new SeqPassiveSkillEndInfo.
     * @exports SeqPassiveSkillEndInfo
     * @classdesc Represents a SeqPassiveSkillEndInfo.
     * @implements ISeqPassiveSkillEndInfo
     * @constructor
     * @param {ISeqPassiveSkillEndInfo=} [properties] Properties to set
     */
    function SeqPassiveSkillEndInfo(properties) {
        this.Uuids = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SeqPassiveSkillEndInfo ActorUuid.
     * @member {number|Long|null|undefined} ActorUuid
     * @memberof SeqPassiveSkillEndInfo
     * @instance
     */
    SeqPassiveSkillEndInfo.prototype.ActorUuid = null;

    /**
     * SeqPassiveSkillEndInfo Uuids.
     * @member {Array.<number|Long>} Uuids
     * @memberof SeqPassiveSkillEndInfo
     * @instance
     */
    SeqPassiveSkillEndInfo.prototype.Uuids = $util.emptyArray;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * SeqPassiveSkillEndInfo _ActorUuid.
     * @member {"ActorUuid"|undefined} _ActorUuid
     * @memberof SeqPassiveSkillEndInfo
     * @instance
     */
    Object.defineProperty(SeqPassiveSkillEndInfo.prototype, "_ActorUuid", {
        get: $util.oneOfGetter($oneOfFields = ["ActorUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new SeqPassiveSkillEndInfo instance using the specified properties.
     * @function create
     * @memberof SeqPassiveSkillEndInfo
     * @static
     * @param {ISeqPassiveSkillEndInfo=} [properties] Properties to set
     * @returns {SeqPassiveSkillEndInfo} SeqPassiveSkillEndInfo instance
     */
    SeqPassiveSkillEndInfo.create = function create(properties) {
        return new SeqPassiveSkillEndInfo(properties);
    };

    /**
     * Encodes the specified SeqPassiveSkillEndInfo message. Does not implicitly {@link SeqPassiveSkillEndInfo.verify|verify} messages.
     * @function encode
     * @memberof SeqPassiveSkillEndInfo
     * @static
     * @param {ISeqPassiveSkillEndInfo} message SeqPassiveSkillEndInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SeqPassiveSkillEndInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ActorUuid != null && Object.hasOwnProperty.call(message, "ActorUuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ActorUuid);
        if (message.Uuids != null && message.Uuids.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.Uuids.length; ++i)
                writer.int64(message.Uuids[i]);
            writer.ldelim();
        }
        return writer;
    };

    /**
     * Encodes the specified SeqPassiveSkillEndInfo message, length delimited. Does not implicitly {@link SeqPassiveSkillEndInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SeqPassiveSkillEndInfo
     * @static
     * @param {ISeqPassiveSkillEndInfo} message SeqPassiveSkillEndInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SeqPassiveSkillEndInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SeqPassiveSkillEndInfo message from the specified reader or buffer.
     * @function decode
     * @memberof SeqPassiveSkillEndInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SeqPassiveSkillEndInfo} SeqPassiveSkillEndInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SeqPassiveSkillEndInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SeqPassiveSkillEndInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.ActorUuid = reader.int64();
                    break;
                }
            case 2: {
                    if (!(message.Uuids && message.Uuids.length))
                        message.Uuids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.Uuids.push(reader.int64());
                    } else
                        message.Uuids.push(reader.int64());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SeqPassiveSkillEndInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SeqPassiveSkillEndInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SeqPassiveSkillEndInfo} SeqPassiveSkillEndInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SeqPassiveSkillEndInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SeqPassiveSkillEndInfo message.
     * @function verify
     * @memberof SeqPassiveSkillEndInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SeqPassiveSkillEndInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.ActorUuid != null && message.hasOwnProperty("ActorUuid")) {
            properties._ActorUuid = 1;
            if (!$util.isInteger(message.ActorUuid) && !(message.ActorUuid && $util.isInteger(message.ActorUuid.low) && $util.isInteger(message.ActorUuid.high)))
                return "ActorUuid: integer|Long expected";
        }
        if (message.Uuids != null && message.hasOwnProperty("Uuids")) {
            if (!Array.isArray(message.Uuids))
                return "Uuids: array expected";
            for (var i = 0; i < message.Uuids.length; ++i)
                if (!$util.isInteger(message.Uuids[i]) && !(message.Uuids[i] && $util.isInteger(message.Uuids[i].low) && $util.isInteger(message.Uuids[i].high)))
                    return "Uuids: integer|Long[] expected";
        }
        return null;
    };

    /**
     * Creates a SeqPassiveSkillEndInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SeqPassiveSkillEndInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SeqPassiveSkillEndInfo} SeqPassiveSkillEndInfo
     */
    SeqPassiveSkillEndInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.SeqPassiveSkillEndInfo)
            return object;
        var message = new $root.SeqPassiveSkillEndInfo();
        if (object.ActorUuid != null)
            if ($util.Long)
                (message.ActorUuid = $util.Long.fromValue(object.ActorUuid)).unsigned = false;
            else if (typeof object.ActorUuid === "string")
                message.ActorUuid = parseInt(object.ActorUuid, 10);
            else if (typeof object.ActorUuid === "number")
                message.ActorUuid = object.ActorUuid;
            else if (typeof object.ActorUuid === "object")
                message.ActorUuid = new $util.LongBits(object.ActorUuid.low >>> 0, object.ActorUuid.high >>> 0).toNumber();
        if (object.Uuids) {
            if (!Array.isArray(object.Uuids))
                throw TypeError(".SeqPassiveSkillEndInfo.Uuids: array expected");
            message.Uuids = [];
            for (var i = 0; i < object.Uuids.length; ++i)
                if ($util.Long)
                    (message.Uuids[i] = $util.Long.fromValue(object.Uuids[i])).unsigned = false;
                else if (typeof object.Uuids[i] === "string")
                    message.Uuids[i] = parseInt(object.Uuids[i], 10);
                else if (typeof object.Uuids[i] === "number")
                    message.Uuids[i] = object.Uuids[i];
                else if (typeof object.Uuids[i] === "object")
                    message.Uuids[i] = new $util.LongBits(object.Uuids[i].low >>> 0, object.Uuids[i].high >>> 0).toNumber();
        }
        return message;
    };

    /**
     * Creates a plain object from a SeqPassiveSkillEndInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SeqPassiveSkillEndInfo
     * @static
     * @param {SeqPassiveSkillEndInfo} message SeqPassiveSkillEndInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SeqPassiveSkillEndInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.Uuids = [];
        if (message.ActorUuid != null && message.hasOwnProperty("ActorUuid")) {
            if (typeof message.ActorUuid === "number")
                object.ActorUuid = options.longs === String ? String(message.ActorUuid) : message.ActorUuid;
            else
                object.ActorUuid = options.longs === String ? $util.Long.prototype.toString.call(message.ActorUuid) : options.longs === Number ? new $util.LongBits(message.ActorUuid.low >>> 0, message.ActorUuid.high >>> 0).toNumber() : message.ActorUuid;
            if (options.oneofs)
                object._ActorUuid = "ActorUuid";
        }
        if (message.Uuids && message.Uuids.length) {
            object.Uuids = [];
            for (var j = 0; j < message.Uuids.length; ++j)
                if (typeof message.Uuids[j] === "number")
                    object.Uuids[j] = options.longs === String ? String(message.Uuids[j]) : message.Uuids[j];
                else
                    object.Uuids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.Uuids[j]) : options.longs === Number ? new $util.LongBits(message.Uuids[j].low >>> 0, message.Uuids[j].high >>> 0).toNumber() : message.Uuids[j];
        }
        return object;
    };

    /**
     * Converts this SeqPassiveSkillEndInfo to JSON.
     * @function toJSON
     * @memberof SeqPassiveSkillEndInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SeqPassiveSkillEndInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SeqPassiveSkillEndInfo
     * @function getTypeUrl
     * @memberof SeqPassiveSkillEndInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SeqPassiveSkillEndInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SeqPassiveSkillEndInfo";
    };

    return SeqPassiveSkillEndInfo;
})();

$root.BuffInfoSync = (function() {

    /**
     * Properties of a BuffInfoSync.
     * @exports IBuffInfoSync
     * @interface IBuffInfoSync
     * @property {number|Long|null} [Uuid] BuffInfoSync Uuid
     * @property {Array.<IBuffInfo>|null} [BuffInfos] BuffInfoSync BuffInfos
     */

    /**
     * Constructs a new BuffInfoSync.
     * @exports BuffInfoSync
     * @classdesc Represents a BuffInfoSync.
     * @implements IBuffInfoSync
     * @constructor
     * @param {IBuffInfoSync=} [properties] Properties to set
     */
    function BuffInfoSync(properties) {
        this.BuffInfos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BuffInfoSync Uuid.
     * @member {number|Long|null|undefined} Uuid
     * @memberof BuffInfoSync
     * @instance
     */
    BuffInfoSync.prototype.Uuid = null;

    /**
     * BuffInfoSync BuffInfos.
     * @member {Array.<IBuffInfo>} BuffInfos
     * @memberof BuffInfoSync
     * @instance
     */
    BuffInfoSync.prototype.BuffInfos = $util.emptyArray;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * BuffInfoSync _Uuid.
     * @member {"Uuid"|undefined} _Uuid
     * @memberof BuffInfoSync
     * @instance
     */
    Object.defineProperty(BuffInfoSync.prototype, "_Uuid", {
        get: $util.oneOfGetter($oneOfFields = ["Uuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new BuffInfoSync instance using the specified properties.
     * @function create
     * @memberof BuffInfoSync
     * @static
     * @param {IBuffInfoSync=} [properties] Properties to set
     * @returns {BuffInfoSync} BuffInfoSync instance
     */
    BuffInfoSync.create = function create(properties) {
        return new BuffInfoSync(properties);
    };

    /**
     * Encodes the specified BuffInfoSync message. Does not implicitly {@link BuffInfoSync.verify|verify} messages.
     * @function encode
     * @memberof BuffInfoSync
     * @static
     * @param {IBuffInfoSync} message BuffInfoSync message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BuffInfoSync.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.Uuid);
        if (message.BuffInfos != null && message.BuffInfos.length)
            for (var i = 0; i < message.BuffInfos.length; ++i)
                $root.BuffInfo.encode(message.BuffInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified BuffInfoSync message, length delimited. Does not implicitly {@link BuffInfoSync.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BuffInfoSync
     * @static
     * @param {IBuffInfoSync} message BuffInfoSync message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BuffInfoSync.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BuffInfoSync message from the specified reader or buffer.
     * @function decode
     * @memberof BuffInfoSync
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BuffInfoSync} BuffInfoSync
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BuffInfoSync.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuffInfoSync();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Uuid = reader.int64();
                    break;
                }
            case 2: {
                    if (!(message.BuffInfos && message.BuffInfos.length))
                        message.BuffInfos = [];
                    message.BuffInfos.push($root.BuffInfo.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BuffInfoSync message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BuffInfoSync
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BuffInfoSync} BuffInfoSync
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BuffInfoSync.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BuffInfoSync message.
     * @function verify
     * @memberof BuffInfoSync
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BuffInfoSync.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            properties._Uuid = 1;
            if (!$util.isInteger(message.Uuid) && !(message.Uuid && $util.isInteger(message.Uuid.low) && $util.isInteger(message.Uuid.high)))
                return "Uuid: integer|Long expected";
        }
        if (message.BuffInfos != null && message.hasOwnProperty("BuffInfos")) {
            if (!Array.isArray(message.BuffInfos))
                return "BuffInfos: array expected";
            for (var i = 0; i < message.BuffInfos.length; ++i) {
                var error = $root.BuffInfo.verify(message.BuffInfos[i]);
                if (error)
                    return "BuffInfos." + error;
            }
        }
        return null;
    };

    /**
     * Creates a BuffInfoSync message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BuffInfoSync
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BuffInfoSync} BuffInfoSync
     */
    BuffInfoSync.fromObject = function fromObject(object) {
        if (object instanceof $root.BuffInfoSync)
            return object;
        var message = new $root.BuffInfoSync();
        if (object.Uuid != null)
            if ($util.Long)
                (message.Uuid = $util.Long.fromValue(object.Uuid)).unsigned = false;
            else if (typeof object.Uuid === "string")
                message.Uuid = parseInt(object.Uuid, 10);
            else if (typeof object.Uuid === "number")
                message.Uuid = object.Uuid;
            else if (typeof object.Uuid === "object")
                message.Uuid = new $util.LongBits(object.Uuid.low >>> 0, object.Uuid.high >>> 0).toNumber();
        if (object.BuffInfos) {
            if (!Array.isArray(object.BuffInfos))
                throw TypeError(".BuffInfoSync.BuffInfos: array expected");
            message.BuffInfos = [];
            for (var i = 0; i < object.BuffInfos.length; ++i) {
                if (typeof object.BuffInfos[i] !== "object")
                    throw TypeError(".BuffInfoSync.BuffInfos: object expected");
                message.BuffInfos[i] = $root.BuffInfo.fromObject(object.BuffInfos[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a BuffInfoSync message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BuffInfoSync
     * @static
     * @param {BuffInfoSync} message BuffInfoSync
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BuffInfoSync.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.BuffInfos = [];
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            if (typeof message.Uuid === "number")
                object.Uuid = options.longs === String ? String(message.Uuid) : message.Uuid;
            else
                object.Uuid = options.longs === String ? $util.Long.prototype.toString.call(message.Uuid) : options.longs === Number ? new $util.LongBits(message.Uuid.low >>> 0, message.Uuid.high >>> 0).toNumber() : message.Uuid;
            if (options.oneofs)
                object._Uuid = "Uuid";
        }
        if (message.BuffInfos && message.BuffInfos.length) {
            object.BuffInfos = [];
            for (var j = 0; j < message.BuffInfos.length; ++j)
                object.BuffInfos[j] = $root.BuffInfo.toObject(message.BuffInfos[j], options);
        }
        return object;
    };

    /**
     * Converts this BuffInfoSync to JSON.
     * @function toJSON
     * @memberof BuffInfoSync
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BuffInfoSync.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BuffInfoSync
     * @function getTypeUrl
     * @memberof BuffInfoSync
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BuffInfoSync.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BuffInfoSync";
    };

    return BuffInfoSync;
})();

$root.BuffInfo = (function() {

    /**
     * Properties of a BuffInfo.
     * @exports IBuffInfo
     * @interface IBuffInfo
     * @property {number|null} [BuffUuid] BuffInfo BuffUuid
     * @property {number|null} [BaseId] BuffInfo BaseId
     * @property {number|null} [Level] BuffInfo Level
     * @property {number|Long|null} [HostUuid] BuffInfo HostUuid
     * @property {number|null} [TableUuid] BuffInfo TableUuid
     * @property {number|Long|null} [CreateTime] BuffInfo CreateTime
     * @property {number|Long|null} [FireUuid] BuffInfo FireUuid
     * @property {number|null} [Layer] BuffInfo Layer
     * @property {number|null} [PartId] BuffInfo PartId
     * @property {number|null} [Count] BuffInfo Count
     * @property {number|null} [Duration] BuffInfo Duration
     * @property {IFightSourceInfo|null} [FightSourceInfo] BuffInfo FightSourceInfo
     * @property {IBuffEffectLogicInfo|null} [LogicEffect] BuffInfo LogicEffect
     */

    /**
     * Constructs a new BuffInfo.
     * @exports BuffInfo
     * @classdesc Represents a BuffInfo.
     * @implements IBuffInfo
     * @constructor
     * @param {IBuffInfo=} [properties] Properties to set
     */
    function BuffInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BuffInfo BuffUuid.
     * @member {number|null|undefined} BuffUuid
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.BuffUuid = null;

    /**
     * BuffInfo BaseId.
     * @member {number|null|undefined} BaseId
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.BaseId = null;

    /**
     * BuffInfo Level.
     * @member {number|null|undefined} Level
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.Level = null;

    /**
     * BuffInfo HostUuid.
     * @member {number|Long|null|undefined} HostUuid
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.HostUuid = null;

    /**
     * BuffInfo TableUuid.
     * @member {number|null|undefined} TableUuid
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.TableUuid = null;

    /**
     * BuffInfo CreateTime.
     * @member {number|Long|null|undefined} CreateTime
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.CreateTime = null;

    /**
     * BuffInfo FireUuid.
     * @member {number|Long|null|undefined} FireUuid
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.FireUuid = null;

    /**
     * BuffInfo Layer.
     * @member {number|null|undefined} Layer
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.Layer = null;

    /**
     * BuffInfo PartId.
     * @member {number|null|undefined} PartId
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.PartId = null;

    /**
     * BuffInfo Count.
     * @member {number|null|undefined} Count
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.Count = null;

    /**
     * BuffInfo Duration.
     * @member {number|null|undefined} Duration
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.Duration = null;

    /**
     * BuffInfo FightSourceInfo.
     * @member {IFightSourceInfo|null|undefined} FightSourceInfo
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.FightSourceInfo = null;

    /**
     * BuffInfo LogicEffect.
     * @member {IBuffEffectLogicInfo|null|undefined} LogicEffect
     * @memberof BuffInfo
     * @instance
     */
    BuffInfo.prototype.LogicEffect = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * BuffInfo _BuffUuid.
     * @member {"BuffUuid"|undefined} _BuffUuid
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_BuffUuid", {
        get: $util.oneOfGetter($oneOfFields = ["BuffUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _BaseId.
     * @member {"BaseId"|undefined} _BaseId
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_BaseId", {
        get: $util.oneOfGetter($oneOfFields = ["BaseId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _Level.
     * @member {"Level"|undefined} _Level
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_Level", {
        get: $util.oneOfGetter($oneOfFields = ["Level"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _HostUuid.
     * @member {"HostUuid"|undefined} _HostUuid
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_HostUuid", {
        get: $util.oneOfGetter($oneOfFields = ["HostUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _TableUuid.
     * @member {"TableUuid"|undefined} _TableUuid
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_TableUuid", {
        get: $util.oneOfGetter($oneOfFields = ["TableUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _CreateTime.
     * @member {"CreateTime"|undefined} _CreateTime
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_CreateTime", {
        get: $util.oneOfGetter($oneOfFields = ["CreateTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _FireUuid.
     * @member {"FireUuid"|undefined} _FireUuid
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_FireUuid", {
        get: $util.oneOfGetter($oneOfFields = ["FireUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _Layer.
     * @member {"Layer"|undefined} _Layer
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_Layer", {
        get: $util.oneOfGetter($oneOfFields = ["Layer"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _PartId.
     * @member {"PartId"|undefined} _PartId
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_PartId", {
        get: $util.oneOfGetter($oneOfFields = ["PartId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _Count.
     * @member {"Count"|undefined} _Count
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_Count", {
        get: $util.oneOfGetter($oneOfFields = ["Count"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _Duration.
     * @member {"Duration"|undefined} _Duration
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_Duration", {
        get: $util.oneOfGetter($oneOfFields = ["Duration"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _FightSourceInfo.
     * @member {"FightSourceInfo"|undefined} _FightSourceInfo
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_FightSourceInfo", {
        get: $util.oneOfGetter($oneOfFields = ["FightSourceInfo"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffInfo _LogicEffect.
     * @member {"LogicEffect"|undefined} _LogicEffect
     * @memberof BuffInfo
     * @instance
     */
    Object.defineProperty(BuffInfo.prototype, "_LogicEffect", {
        get: $util.oneOfGetter($oneOfFields = ["LogicEffect"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new BuffInfo instance using the specified properties.
     * @function create
     * @memberof BuffInfo
     * @static
     * @param {IBuffInfo=} [properties] Properties to set
     * @returns {BuffInfo} BuffInfo instance
     */
    BuffInfo.create = function create(properties) {
        return new BuffInfo(properties);
    };

    /**
     * Encodes the specified BuffInfo message. Does not implicitly {@link BuffInfo.verify|verify} messages.
     * @function encode
     * @memberof BuffInfo
     * @static
     * @param {IBuffInfo} message BuffInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BuffInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.BuffUuid != null && Object.hasOwnProperty.call(message, "BuffUuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.BuffUuid);
        if (message.BaseId != null && Object.hasOwnProperty.call(message, "BaseId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.BaseId);
        if (message.Level != null && Object.hasOwnProperty.call(message, "Level"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Level);
        if (message.HostUuid != null && Object.hasOwnProperty.call(message, "HostUuid"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.HostUuid);
        if (message.TableUuid != null && Object.hasOwnProperty.call(message, "TableUuid"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.TableUuid);
        if (message.CreateTime != null && Object.hasOwnProperty.call(message, "CreateTime"))
            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.CreateTime);
        if (message.FireUuid != null && Object.hasOwnProperty.call(message, "FireUuid"))
            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.FireUuid);
        if (message.Layer != null && Object.hasOwnProperty.call(message, "Layer"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.Layer);
        if (message.PartId != null && Object.hasOwnProperty.call(message, "PartId"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.PartId);
        if (message.Count != null && Object.hasOwnProperty.call(message, "Count"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.Count);
        if (message.Duration != null && Object.hasOwnProperty.call(message, "Duration"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.Duration);
        if (message.FightSourceInfo != null && Object.hasOwnProperty.call(message, "FightSourceInfo"))
            $root.FightSourceInfo.encode(message.FightSourceInfo, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.LogicEffect != null && Object.hasOwnProperty.call(message, "LogicEffect"))
            $root.BuffEffectLogicInfo.encode(message.LogicEffect, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified BuffInfo message, length delimited. Does not implicitly {@link BuffInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BuffInfo
     * @static
     * @param {IBuffInfo} message BuffInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BuffInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BuffInfo message from the specified reader or buffer.
     * @function decode
     * @memberof BuffInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BuffInfo} BuffInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BuffInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuffInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.BuffUuid = reader.int32();
                    break;
                }
            case 2: {
                    message.BaseId = reader.int32();
                    break;
                }
            case 3: {
                    message.Level = reader.int32();
                    break;
                }
            case 4: {
                    message.HostUuid = reader.int64();
                    break;
                }
            case 5: {
                    message.TableUuid = reader.int32();
                    break;
                }
            case 6: {
                    message.CreateTime = reader.int64();
                    break;
                }
            case 7: {
                    message.FireUuid = reader.int64();
                    break;
                }
            case 8: {
                    message.Layer = reader.int32();
                    break;
                }
            case 9: {
                    message.PartId = reader.int32();
                    break;
                }
            case 10: {
                    message.Count = reader.int32();
                    break;
                }
            case 11: {
                    message.Duration = reader.int32();
                    break;
                }
            case 12: {
                    message.FightSourceInfo = $root.FightSourceInfo.decode(reader, reader.uint32());
                    break;
                }
            case 13: {
                    message.LogicEffect = $root.BuffEffectLogicInfo.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BuffInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BuffInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BuffInfo} BuffInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BuffInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BuffInfo message.
     * @function verify
     * @memberof BuffInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BuffInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.BuffUuid != null && message.hasOwnProperty("BuffUuid")) {
            properties._BuffUuid = 1;
            if (!$util.isInteger(message.BuffUuid))
                return "BuffUuid: integer expected";
        }
        if (message.BaseId != null && message.hasOwnProperty("BaseId")) {
            properties._BaseId = 1;
            if (!$util.isInteger(message.BaseId))
                return "BaseId: integer expected";
        }
        if (message.Level != null && message.hasOwnProperty("Level")) {
            properties._Level = 1;
            if (!$util.isInteger(message.Level))
                return "Level: integer expected";
        }
        if (message.HostUuid != null && message.hasOwnProperty("HostUuid")) {
            properties._HostUuid = 1;
            if (!$util.isInteger(message.HostUuid) && !(message.HostUuid && $util.isInteger(message.HostUuid.low) && $util.isInteger(message.HostUuid.high)))
                return "HostUuid: integer|Long expected";
        }
        if (message.TableUuid != null && message.hasOwnProperty("TableUuid")) {
            properties._TableUuid = 1;
            if (!$util.isInteger(message.TableUuid))
                return "TableUuid: integer expected";
        }
        if (message.CreateTime != null && message.hasOwnProperty("CreateTime")) {
            properties._CreateTime = 1;
            if (!$util.isInteger(message.CreateTime) && !(message.CreateTime && $util.isInteger(message.CreateTime.low) && $util.isInteger(message.CreateTime.high)))
                return "CreateTime: integer|Long expected";
        }
        if (message.FireUuid != null && message.hasOwnProperty("FireUuid")) {
            properties._FireUuid = 1;
            if (!$util.isInteger(message.FireUuid) && !(message.FireUuid && $util.isInteger(message.FireUuid.low) && $util.isInteger(message.FireUuid.high)))
                return "FireUuid: integer|Long expected";
        }
        if (message.Layer != null && message.hasOwnProperty("Layer")) {
            properties._Layer = 1;
            if (!$util.isInteger(message.Layer))
                return "Layer: integer expected";
        }
        if (message.PartId != null && message.hasOwnProperty("PartId")) {
            properties._PartId = 1;
            if (!$util.isInteger(message.PartId))
                return "PartId: integer expected";
        }
        if (message.Count != null && message.hasOwnProperty("Count")) {
            properties._Count = 1;
            if (!$util.isInteger(message.Count))
                return "Count: integer expected";
        }
        if (message.Duration != null && message.hasOwnProperty("Duration")) {
            properties._Duration = 1;
            if (!$util.isInteger(message.Duration))
                return "Duration: integer expected";
        }
        if (message.FightSourceInfo != null && message.hasOwnProperty("FightSourceInfo")) {
            properties._FightSourceInfo = 1;
            {
                var error = $root.FightSourceInfo.verify(message.FightSourceInfo);
                if (error)
                    return "FightSourceInfo." + error;
            }
        }
        if (message.LogicEffect != null && message.hasOwnProperty("LogicEffect")) {
            properties._LogicEffect = 1;
            {
                var error = $root.BuffEffectLogicInfo.verify(message.LogicEffect);
                if (error)
                    return "LogicEffect." + error;
            }
        }
        return null;
    };

    /**
     * Creates a BuffInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BuffInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BuffInfo} BuffInfo
     */
    BuffInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.BuffInfo)
            return object;
        var message = new $root.BuffInfo();
        if (object.BuffUuid != null)
            message.BuffUuid = object.BuffUuid | 0;
        if (object.BaseId != null)
            message.BaseId = object.BaseId | 0;
        if (object.Level != null)
            message.Level = object.Level | 0;
        if (object.HostUuid != null)
            if ($util.Long)
                (message.HostUuid = $util.Long.fromValue(object.HostUuid)).unsigned = false;
            else if (typeof object.HostUuid === "string")
                message.HostUuid = parseInt(object.HostUuid, 10);
            else if (typeof object.HostUuid === "number")
                message.HostUuid = object.HostUuid;
            else if (typeof object.HostUuid === "object")
                message.HostUuid = new $util.LongBits(object.HostUuid.low >>> 0, object.HostUuid.high >>> 0).toNumber();
        if (object.TableUuid != null)
            message.TableUuid = object.TableUuid | 0;
        if (object.CreateTime != null)
            if ($util.Long)
                (message.CreateTime = $util.Long.fromValue(object.CreateTime)).unsigned = false;
            else if (typeof object.CreateTime === "string")
                message.CreateTime = parseInt(object.CreateTime, 10);
            else if (typeof object.CreateTime === "number")
                message.CreateTime = object.CreateTime;
            else if (typeof object.CreateTime === "object")
                message.CreateTime = new $util.LongBits(object.CreateTime.low >>> 0, object.CreateTime.high >>> 0).toNumber();
        if (object.FireUuid != null)
            if ($util.Long)
                (message.FireUuid = $util.Long.fromValue(object.FireUuid)).unsigned = false;
            else if (typeof object.FireUuid === "string")
                message.FireUuid = parseInt(object.FireUuid, 10);
            else if (typeof object.FireUuid === "number")
                message.FireUuid = object.FireUuid;
            else if (typeof object.FireUuid === "object")
                message.FireUuid = new $util.LongBits(object.FireUuid.low >>> 0, object.FireUuid.high >>> 0).toNumber();
        if (object.Layer != null)
            message.Layer = object.Layer | 0;
        if (object.PartId != null)
            message.PartId = object.PartId | 0;
        if (object.Count != null)
            message.Count = object.Count | 0;
        if (object.Duration != null)
            message.Duration = object.Duration | 0;
        if (object.FightSourceInfo != null) {
            if (typeof object.FightSourceInfo !== "object")
                throw TypeError(".BuffInfo.FightSourceInfo: object expected");
            message.FightSourceInfo = $root.FightSourceInfo.fromObject(object.FightSourceInfo);
        }
        if (object.LogicEffect != null) {
            if (typeof object.LogicEffect !== "object")
                throw TypeError(".BuffInfo.LogicEffect: object expected");
            message.LogicEffect = $root.BuffEffectLogicInfo.fromObject(object.LogicEffect);
        }
        return message;
    };

    /**
     * Creates a plain object from a BuffInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BuffInfo
     * @static
     * @param {BuffInfo} message BuffInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BuffInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.BuffUuid != null && message.hasOwnProperty("BuffUuid")) {
            object.BuffUuid = message.BuffUuid;
            if (options.oneofs)
                object._BuffUuid = "BuffUuid";
        }
        if (message.BaseId != null && message.hasOwnProperty("BaseId")) {
            object.BaseId = message.BaseId;
            if (options.oneofs)
                object._BaseId = "BaseId";
        }
        if (message.Level != null && message.hasOwnProperty("Level")) {
            object.Level = message.Level;
            if (options.oneofs)
                object._Level = "Level";
        }
        if (message.HostUuid != null && message.hasOwnProperty("HostUuid")) {
            if (typeof message.HostUuid === "number")
                object.HostUuid = options.longs === String ? String(message.HostUuid) : message.HostUuid;
            else
                object.HostUuid = options.longs === String ? $util.Long.prototype.toString.call(message.HostUuid) : options.longs === Number ? new $util.LongBits(message.HostUuid.low >>> 0, message.HostUuid.high >>> 0).toNumber() : message.HostUuid;
            if (options.oneofs)
                object._HostUuid = "HostUuid";
        }
        if (message.TableUuid != null && message.hasOwnProperty("TableUuid")) {
            object.TableUuid = message.TableUuid;
            if (options.oneofs)
                object._TableUuid = "TableUuid";
        }
        if (message.CreateTime != null && message.hasOwnProperty("CreateTime")) {
            if (typeof message.CreateTime === "number")
                object.CreateTime = options.longs === String ? String(message.CreateTime) : message.CreateTime;
            else
                object.CreateTime = options.longs === String ? $util.Long.prototype.toString.call(message.CreateTime) : options.longs === Number ? new $util.LongBits(message.CreateTime.low >>> 0, message.CreateTime.high >>> 0).toNumber() : message.CreateTime;
            if (options.oneofs)
                object._CreateTime = "CreateTime";
        }
        if (message.FireUuid != null && message.hasOwnProperty("FireUuid")) {
            if (typeof message.FireUuid === "number")
                object.FireUuid = options.longs === String ? String(message.FireUuid) : message.FireUuid;
            else
                object.FireUuid = options.longs === String ? $util.Long.prototype.toString.call(message.FireUuid) : options.longs === Number ? new $util.LongBits(message.FireUuid.low >>> 0, message.FireUuid.high >>> 0).toNumber() : message.FireUuid;
            if (options.oneofs)
                object._FireUuid = "FireUuid";
        }
        if (message.Layer != null && message.hasOwnProperty("Layer")) {
            object.Layer = message.Layer;
            if (options.oneofs)
                object._Layer = "Layer";
        }
        if (message.PartId != null && message.hasOwnProperty("PartId")) {
            object.PartId = message.PartId;
            if (options.oneofs)
                object._PartId = "PartId";
        }
        if (message.Count != null && message.hasOwnProperty("Count")) {
            object.Count = message.Count;
            if (options.oneofs)
                object._Count = "Count";
        }
        if (message.Duration != null && message.hasOwnProperty("Duration")) {
            object.Duration = message.Duration;
            if (options.oneofs)
                object._Duration = "Duration";
        }
        if (message.FightSourceInfo != null && message.hasOwnProperty("FightSourceInfo")) {
            object.FightSourceInfo = $root.FightSourceInfo.toObject(message.FightSourceInfo, options);
            if (options.oneofs)
                object._FightSourceInfo = "FightSourceInfo";
        }
        if (message.LogicEffect != null && message.hasOwnProperty("LogicEffect")) {
            object.LogicEffect = $root.BuffEffectLogicInfo.toObject(message.LogicEffect, options);
            if (options.oneofs)
                object._LogicEffect = "LogicEffect";
        }
        return object;
    };

    /**
     * Converts this BuffInfo to JSON.
     * @function toJSON
     * @memberof BuffInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BuffInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BuffInfo
     * @function getTypeUrl
     * @memberof BuffInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BuffInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BuffInfo";
    };

    return BuffInfo;
})();

$root.FightSourceInfo = (function() {

    /**
     * Properties of a FightSourceInfo.
     * @exports IFightSourceInfo
     * @interface IFightSourceInfo
     * @property {number|null} [FightSourceType] FightSourceInfo FightSourceType
     * @property {number|null} [SourceConfigId] FightSourceInfo SourceConfigId
     */

    /**
     * Constructs a new FightSourceInfo.
     * @exports FightSourceInfo
     * @classdesc Represents a FightSourceInfo.
     * @implements IFightSourceInfo
     * @constructor
     * @param {IFightSourceInfo=} [properties] Properties to set
     */
    function FightSourceInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FightSourceInfo FightSourceType.
     * @member {number|null|undefined} FightSourceType
     * @memberof FightSourceInfo
     * @instance
     */
    FightSourceInfo.prototype.FightSourceType = null;

    /**
     * FightSourceInfo SourceConfigId.
     * @member {number|null|undefined} SourceConfigId
     * @memberof FightSourceInfo
     * @instance
     */
    FightSourceInfo.prototype.SourceConfigId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * FightSourceInfo _FightSourceType.
     * @member {"FightSourceType"|undefined} _FightSourceType
     * @memberof FightSourceInfo
     * @instance
     */
    Object.defineProperty(FightSourceInfo.prototype, "_FightSourceType", {
        get: $util.oneOfGetter($oneOfFields = ["FightSourceType"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FightSourceInfo _SourceConfigId.
     * @member {"SourceConfigId"|undefined} _SourceConfigId
     * @memberof FightSourceInfo
     * @instance
     */
    Object.defineProperty(FightSourceInfo.prototype, "_SourceConfigId", {
        get: $util.oneOfGetter($oneOfFields = ["SourceConfigId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new FightSourceInfo instance using the specified properties.
     * @function create
     * @memberof FightSourceInfo
     * @static
     * @param {IFightSourceInfo=} [properties] Properties to set
     * @returns {FightSourceInfo} FightSourceInfo instance
     */
    FightSourceInfo.create = function create(properties) {
        return new FightSourceInfo(properties);
    };

    /**
     * Encodes the specified FightSourceInfo message. Does not implicitly {@link FightSourceInfo.verify|verify} messages.
     * @function encode
     * @memberof FightSourceInfo
     * @static
     * @param {IFightSourceInfo} message FightSourceInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FightSourceInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.FightSourceType != null && Object.hasOwnProperty.call(message, "FightSourceType"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.FightSourceType);
        if (message.SourceConfigId != null && Object.hasOwnProperty.call(message, "SourceConfigId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.SourceConfigId);
        return writer;
    };

    /**
     * Encodes the specified FightSourceInfo message, length delimited. Does not implicitly {@link FightSourceInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FightSourceInfo
     * @static
     * @param {IFightSourceInfo} message FightSourceInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FightSourceInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FightSourceInfo message from the specified reader or buffer.
     * @function decode
     * @memberof FightSourceInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FightSourceInfo} FightSourceInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FightSourceInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FightSourceInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.FightSourceType = reader.int32();
                    break;
                }
            case 2: {
                    message.SourceConfigId = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FightSourceInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FightSourceInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FightSourceInfo} FightSourceInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FightSourceInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FightSourceInfo message.
     * @function verify
     * @memberof FightSourceInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FightSourceInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.FightSourceType != null && message.hasOwnProperty("FightSourceType")) {
            properties._FightSourceType = 1;
            if (!$util.isInteger(message.FightSourceType))
                return "FightSourceType: integer expected";
        }
        if (message.SourceConfigId != null && message.hasOwnProperty("SourceConfigId")) {
            properties._SourceConfigId = 1;
            if (!$util.isInteger(message.SourceConfigId))
                return "SourceConfigId: integer expected";
        }
        return null;
    };

    /**
     * Creates a FightSourceInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FightSourceInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FightSourceInfo} FightSourceInfo
     */
    FightSourceInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.FightSourceInfo)
            return object;
        var message = new $root.FightSourceInfo();
        if (object.FightSourceType != null)
            message.FightSourceType = object.FightSourceType | 0;
        if (object.SourceConfigId != null)
            message.SourceConfigId = object.SourceConfigId | 0;
        return message;
    };

    /**
     * Creates a plain object from a FightSourceInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FightSourceInfo
     * @static
     * @param {FightSourceInfo} message FightSourceInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FightSourceInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.FightSourceType != null && message.hasOwnProperty("FightSourceType")) {
            object.FightSourceType = message.FightSourceType;
            if (options.oneofs)
                object._FightSourceType = "FightSourceType";
        }
        if (message.SourceConfigId != null && message.hasOwnProperty("SourceConfigId")) {
            object.SourceConfigId = message.SourceConfigId;
            if (options.oneofs)
                object._SourceConfigId = "SourceConfigId";
        }
        return object;
    };

    /**
     * Converts this FightSourceInfo to JSON.
     * @function toJSON
     * @memberof FightSourceInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FightSourceInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FightSourceInfo
     * @function getTypeUrl
     * @memberof FightSourceInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FightSourceInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FightSourceInfo";
    };

    return FightSourceInfo;
})();

$root.BuffEffectLogicInfo = (function() {

    /**
     * Properties of a BuffEffectLogicInfo.
     * @exports IBuffEffectLogicInfo
     * @interface IBuffEffectLogicInfo
     * @property {EBuffEffectLogicPbType|null} [EffectType] BuffEffectLogicInfo EffectType
     * @property {Uint8Array|null} [RawData] BuffEffectLogicInfo RawData
     * @property {boolean|null} [IsLoop] BuffEffectLogicInfo IsLoop
     */

    /**
     * Constructs a new BuffEffectLogicInfo.
     * @exports BuffEffectLogicInfo
     * @classdesc Represents a BuffEffectLogicInfo.
     * @implements IBuffEffectLogicInfo
     * @constructor
     * @param {IBuffEffectLogicInfo=} [properties] Properties to set
     */
    function BuffEffectLogicInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BuffEffectLogicInfo EffectType.
     * @member {EBuffEffectLogicPbType|null|undefined} EffectType
     * @memberof BuffEffectLogicInfo
     * @instance
     */
    BuffEffectLogicInfo.prototype.EffectType = null;

    /**
     * BuffEffectLogicInfo RawData.
     * @member {Uint8Array|null|undefined} RawData
     * @memberof BuffEffectLogicInfo
     * @instance
     */
    BuffEffectLogicInfo.prototype.RawData = null;

    /**
     * BuffEffectLogicInfo IsLoop.
     * @member {boolean|null|undefined} IsLoop
     * @memberof BuffEffectLogicInfo
     * @instance
     */
    BuffEffectLogicInfo.prototype.IsLoop = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * BuffEffectLogicInfo _EffectType.
     * @member {"EffectType"|undefined} _EffectType
     * @memberof BuffEffectLogicInfo
     * @instance
     */
    Object.defineProperty(BuffEffectLogicInfo.prototype, "_EffectType", {
        get: $util.oneOfGetter($oneOfFields = ["EffectType"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffEffectLogicInfo _RawData.
     * @member {"RawData"|undefined} _RawData
     * @memberof BuffEffectLogicInfo
     * @instance
     */
    Object.defineProperty(BuffEffectLogicInfo.prototype, "_RawData", {
        get: $util.oneOfGetter($oneOfFields = ["RawData"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffEffectLogicInfo _IsLoop.
     * @member {"IsLoop"|undefined} _IsLoop
     * @memberof BuffEffectLogicInfo
     * @instance
     */
    Object.defineProperty(BuffEffectLogicInfo.prototype, "_IsLoop", {
        get: $util.oneOfGetter($oneOfFields = ["IsLoop"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new BuffEffectLogicInfo instance using the specified properties.
     * @function create
     * @memberof BuffEffectLogicInfo
     * @static
     * @param {IBuffEffectLogicInfo=} [properties] Properties to set
     * @returns {BuffEffectLogicInfo} BuffEffectLogicInfo instance
     */
    BuffEffectLogicInfo.create = function create(properties) {
        return new BuffEffectLogicInfo(properties);
    };

    /**
     * Encodes the specified BuffEffectLogicInfo message. Does not implicitly {@link BuffEffectLogicInfo.verify|verify} messages.
     * @function encode
     * @memberof BuffEffectLogicInfo
     * @static
     * @param {IBuffEffectLogicInfo} message BuffEffectLogicInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BuffEffectLogicInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.EffectType != null && Object.hasOwnProperty.call(message, "EffectType"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.EffectType);
        if (message.RawData != null && Object.hasOwnProperty.call(message, "RawData"))
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.RawData);
        if (message.IsLoop != null && Object.hasOwnProperty.call(message, "IsLoop"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.IsLoop);
        return writer;
    };

    /**
     * Encodes the specified BuffEffectLogicInfo message, length delimited. Does not implicitly {@link BuffEffectLogicInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BuffEffectLogicInfo
     * @static
     * @param {IBuffEffectLogicInfo} message BuffEffectLogicInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BuffEffectLogicInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BuffEffectLogicInfo message from the specified reader or buffer.
     * @function decode
     * @memberof BuffEffectLogicInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BuffEffectLogicInfo} BuffEffectLogicInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BuffEffectLogicInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuffEffectLogicInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.EffectType = reader.int32();
                    break;
                }
            case 2: {
                    message.RawData = reader.bytes();
                    break;
                }
            case 3: {
                    message.IsLoop = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BuffEffectLogicInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BuffEffectLogicInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BuffEffectLogicInfo} BuffEffectLogicInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BuffEffectLogicInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BuffEffectLogicInfo message.
     * @function verify
     * @memberof BuffEffectLogicInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BuffEffectLogicInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.EffectType != null && message.hasOwnProperty("EffectType")) {
            properties._EffectType = 1;
            switch (message.EffectType) {
            default:
                return "EffectType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
                break;
            }
        }
        if (message.RawData != null && message.hasOwnProperty("RawData")) {
            properties._RawData = 1;
            if (!(message.RawData && typeof message.RawData.length === "number" || $util.isString(message.RawData)))
                return "RawData: buffer expected";
        }
        if (message.IsLoop != null && message.hasOwnProperty("IsLoop")) {
            properties._IsLoop = 1;
            if (typeof message.IsLoop !== "boolean")
                return "IsLoop: boolean expected";
        }
        return null;
    };

    /**
     * Creates a BuffEffectLogicInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BuffEffectLogicInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BuffEffectLogicInfo} BuffEffectLogicInfo
     */
    BuffEffectLogicInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.BuffEffectLogicInfo)
            return object;
        var message = new $root.BuffEffectLogicInfo();
        switch (object.EffectType) {
        default:
            if (typeof object.EffectType === "number") {
                message.EffectType = object.EffectType;
                break;
            }
            break;
        case "PlayEffect":
        case 0:
            message.EffectType = 0;
            break;
        case "Gravity":
        case 1:
            message.EffectType = 1;
            break;
        case "ParabolaEffect":
        case 2:
            message.EffectType = 2;
            break;
        case "Linking":
        case 3:
            message.EffectType = 3;
            break;
        case "ConfusionEffect":
        case 4:
            message.EffectType = 4;
            break;
        case "ZoomScale":
        case 5:
            message.EffectType = 5;
            break;
        case "BuffProfessionEffect":
        case 7:
            message.EffectType = 7;
            break;
        case "TeleportBelt":
        case 8:
            message.EffectType = 8;
            break;
        case "BuffEffectRainbow":
        case 9:
            message.EffectType = 9;
            break;
        case "BuffEffectAttrHUD":
        case 11:
            message.EffectType = 11;
            break;
        case "BuffEffectStop":
        case 12:
            message.EffectType = 12;
            break;
        case "BuffEffectProgress":
        case 13:
            message.EffectType = 13;
            break;
        case "BuffEffectEnergyDisplay":
        case 14:
            message.EffectType = 14;
            break;
        case "BuffEffectStopAll":
        case 15:
            message.EffectType = 15;
            break;
        case "BuffEffectLayerChange":
        case 16:
            message.EffectType = 16;
            break;
        case "Tension":
        case 17:
            message.EffectType = 17;
            break;
        }
        if (object.RawData != null)
            if (typeof object.RawData === "string")
                $util.base64.decode(object.RawData, message.RawData = $util.newBuffer($util.base64.length(object.RawData)), 0);
            else if (object.RawData.length >= 0)
                message.RawData = object.RawData;
        if (object.IsLoop != null)
            message.IsLoop = Boolean(object.IsLoop);
        return message;
    };

    /**
     * Creates a plain object from a BuffEffectLogicInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BuffEffectLogicInfo
     * @static
     * @param {BuffEffectLogicInfo} message BuffEffectLogicInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BuffEffectLogicInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.EffectType != null && message.hasOwnProperty("EffectType")) {
            object.EffectType = options.enums === String ? $root.EBuffEffectLogicPbType[message.EffectType] === undefined ? message.EffectType : $root.EBuffEffectLogicPbType[message.EffectType] : message.EffectType;
            if (options.oneofs)
                object._EffectType = "EffectType";
        }
        if (message.RawData != null && message.hasOwnProperty("RawData")) {
            object.RawData = options.bytes === String ? $util.base64.encode(message.RawData, 0, message.RawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.RawData) : message.RawData;
            if (options.oneofs)
                object._RawData = "RawData";
        }
        if (message.IsLoop != null && message.hasOwnProperty("IsLoop")) {
            object.IsLoop = message.IsLoop;
            if (options.oneofs)
                object._IsLoop = "IsLoop";
        }
        return object;
    };

    /**
     * Converts this BuffEffectLogicInfo to JSON.
     * @function toJSON
     * @memberof BuffEffectLogicInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BuffEffectLogicInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BuffEffectLogicInfo
     * @function getTypeUrl
     * @memberof BuffEffectLogicInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BuffEffectLogicInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BuffEffectLogicInfo";
    };

    return BuffEffectLogicInfo;
})();

/**
 * EBuffEffectLogicPbType enum.
 * @exports EBuffEffectLogicPbType
 * @enum {number}
 * @property {number} PlayEffect=0 PlayEffect value
 * @property {number} Gravity=1 Gravity value
 * @property {number} ParabolaEffect=2 ParabolaEffect value
 * @property {number} Linking=3 Linking value
 * @property {number} ConfusionEffect=4 ConfusionEffect value
 * @property {number} ZoomScale=5 ZoomScale value
 * @property {number} BuffProfessionEffect=7 BuffProfessionEffect value
 * @property {number} TeleportBelt=8 TeleportBelt value
 * @property {number} BuffEffectRainbow=9 BuffEffectRainbow value
 * @property {number} BuffEffectAttrHUD=11 BuffEffectAttrHUD value
 * @property {number} BuffEffectStop=12 BuffEffectStop value
 * @property {number} BuffEffectProgress=13 BuffEffectProgress value
 * @property {number} BuffEffectEnergyDisplay=14 BuffEffectEnergyDisplay value
 * @property {number} BuffEffectStopAll=15 BuffEffectStopAll value
 * @property {number} BuffEffectLayerChange=16 BuffEffectLayerChange value
 * @property {number} Tension=17 Tension value
 */
$root.EBuffEffectLogicPbType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "PlayEffect"] = 0;
    values[valuesById[1] = "Gravity"] = 1;
    values[valuesById[2] = "ParabolaEffect"] = 2;
    values[valuesById[3] = "Linking"] = 3;
    values[valuesById[4] = "ConfusionEffect"] = 4;
    values[valuesById[5] = "ZoomScale"] = 5;
    values[valuesById[7] = "BuffProfessionEffect"] = 7;
    values[valuesById[8] = "TeleportBelt"] = 8;
    values[valuesById[9] = "BuffEffectRainbow"] = 9;
    values[valuesById[11] = "BuffEffectAttrHUD"] = 11;
    values[valuesById[12] = "BuffEffectStop"] = 12;
    values[valuesById[13] = "BuffEffectProgress"] = 13;
    values[valuesById[14] = "BuffEffectEnergyDisplay"] = 14;
    values[valuesById[15] = "BuffEffectStopAll"] = 15;
    values[valuesById[16] = "BuffEffectLayerChange"] = 16;
    values[valuesById[17] = "Tension"] = 17;
    return values;
})();

/**
 * EDamageSource enum.
 * @exports EDamageSource
 * @enum {number}
 * @property {number} EDamageSourceSkill=0 EDamageSourceSkill value
 * @property {number} EDamageSourceBullet=1 EDamageSourceBullet value
 * @property {number} EDamageSourceBuff=2 EDamageSourceBuff value
 * @property {number} EDamageSourceFall=3 EDamageSourceFall value
 * @property {number} EDamageSourceFakeBullet=4 EDamageSourceFakeBullet value
 * @property {number} EDamageSourceOther=100 EDamageSourceOther value
 */
$root.EDamageSource = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EDamageSourceSkill"] = 0;
    values[valuesById[1] = "EDamageSourceBullet"] = 1;
    values[valuesById[2] = "EDamageSourceBuff"] = 2;
    values[valuesById[3] = "EDamageSourceFall"] = 3;
    values[valuesById[4] = "EDamageSourceFakeBullet"] = 4;
    values[valuesById[100] = "EDamageSourceOther"] = 100;
    return values;
})();

/**
 * EDamageProperty enum.
 * @exports EDamageProperty
 * @enum {number}
 * @property {number} General=0 General value
 * @property {number} Fire=1 Fire value
 * @property {number} Water=2 Water value
 * @property {number} Electricity=3 Electricity value
 * @property {number} Wood=4 Wood value
 * @property {number} Wind=5 Wind value
 * @property {number} Rock=6 Rock value
 * @property {number} Light=7 Light value
 * @property {number} Dark=8 Dark value
 * @property {number} Count=9 Count value
 */
$root.EDamageProperty = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "General"] = 0;
    values[valuesById[1] = "Fire"] = 1;
    values[valuesById[2] = "Water"] = 2;
    values[valuesById[3] = "Electricity"] = 3;
    values[valuesById[4] = "Wood"] = 4;
    values[valuesById[5] = "Wind"] = 5;
    values[valuesById[6] = "Rock"] = 6;
    values[valuesById[7] = "Light"] = 7;
    values[valuesById[8] = "Dark"] = 8;
    values[valuesById[9] = "Count"] = 9;
    return values;
})();

/**
 * EDamageMode enum.
 * @exports EDamageMode
 * @enum {number}
 * @property {number} DamageNormal=0 DamageNormal value
 * @property {number} DamagePhysical=1 DamagePhysical value
 * @property {number} DamageMagical=2 DamageMagical value
 */
$root.EDamageMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "DamageNormal"] = 0;
    values[valuesById[1] = "DamagePhysical"] = 1;
    values[valuesById[2] = "DamageMagical"] = 2;
    return values;
})();

$root.ClientHitPartInfo = (function() {

    /**
     * Properties of a ClientHitPartInfo.
     * @exports IClientHitPartInfo
     * @interface IClientHitPartInfo
     * @property {number|null} [PartId] ClientHitPartInfo PartId
     * @property {IVector3|null} [DamagePos] ClientHitPartInfo DamagePos
     * @property {number|Long|null} [DamageVal] ClientHitPartInfo DamageVal
     */

    /**
     * Constructs a new ClientHitPartInfo.
     * @exports ClientHitPartInfo
     * @classdesc Represents a ClientHitPartInfo.
     * @implements IClientHitPartInfo
     * @constructor
     * @param {IClientHitPartInfo=} [properties] Properties to set
     */
    function ClientHitPartInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ClientHitPartInfo PartId.
     * @member {number|null|undefined} PartId
     * @memberof ClientHitPartInfo
     * @instance
     */
    ClientHitPartInfo.prototype.PartId = null;

    /**
     * ClientHitPartInfo DamagePos.
     * @member {IVector3|null|undefined} DamagePos
     * @memberof ClientHitPartInfo
     * @instance
     */
    ClientHitPartInfo.prototype.DamagePos = null;

    /**
     * ClientHitPartInfo DamageVal.
     * @member {number|Long|null|undefined} DamageVal
     * @memberof ClientHitPartInfo
     * @instance
     */
    ClientHitPartInfo.prototype.DamageVal = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * ClientHitPartInfo _PartId.
     * @member {"PartId"|undefined} _PartId
     * @memberof ClientHitPartInfo
     * @instance
     */
    Object.defineProperty(ClientHitPartInfo.prototype, "_PartId", {
        get: $util.oneOfGetter($oneOfFields = ["PartId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * ClientHitPartInfo _DamagePos.
     * @member {"DamagePos"|undefined} _DamagePos
     * @memberof ClientHitPartInfo
     * @instance
     */
    Object.defineProperty(ClientHitPartInfo.prototype, "_DamagePos", {
        get: $util.oneOfGetter($oneOfFields = ["DamagePos"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * ClientHitPartInfo _DamageVal.
     * @member {"DamageVal"|undefined} _DamageVal
     * @memberof ClientHitPartInfo
     * @instance
     */
    Object.defineProperty(ClientHitPartInfo.prototype, "_DamageVal", {
        get: $util.oneOfGetter($oneOfFields = ["DamageVal"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new ClientHitPartInfo instance using the specified properties.
     * @function create
     * @memberof ClientHitPartInfo
     * @static
     * @param {IClientHitPartInfo=} [properties] Properties to set
     * @returns {ClientHitPartInfo} ClientHitPartInfo instance
     */
    ClientHitPartInfo.create = function create(properties) {
        return new ClientHitPartInfo(properties);
    };

    /**
     * Encodes the specified ClientHitPartInfo message. Does not implicitly {@link ClientHitPartInfo.verify|verify} messages.
     * @function encode
     * @memberof ClientHitPartInfo
     * @static
     * @param {IClientHitPartInfo} message ClientHitPartInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ClientHitPartInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.PartId != null && Object.hasOwnProperty.call(message, "PartId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.PartId);
        if (message.DamagePos != null && Object.hasOwnProperty.call(message, "DamagePos"))
            $root.Vector3.encode(message.DamagePos, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.DamageVal != null && Object.hasOwnProperty.call(message, "DamageVal"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.DamageVal);
        return writer;
    };

    /**
     * Encodes the specified ClientHitPartInfo message, length delimited. Does not implicitly {@link ClientHitPartInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ClientHitPartInfo
     * @static
     * @param {IClientHitPartInfo} message ClientHitPartInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ClientHitPartInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ClientHitPartInfo message from the specified reader or buffer.
     * @function decode
     * @memberof ClientHitPartInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ClientHitPartInfo} ClientHitPartInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ClientHitPartInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ClientHitPartInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.PartId = reader.int32();
                    break;
                }
            case 2: {
                    message.DamagePos = $root.Vector3.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.DamageVal = reader.int64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ClientHitPartInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ClientHitPartInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ClientHitPartInfo} ClientHitPartInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ClientHitPartInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ClientHitPartInfo message.
     * @function verify
     * @memberof ClientHitPartInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ClientHitPartInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.PartId != null && message.hasOwnProperty("PartId")) {
            properties._PartId = 1;
            if (!$util.isInteger(message.PartId))
                return "PartId: integer expected";
        }
        if (message.DamagePos != null && message.hasOwnProperty("DamagePos")) {
            properties._DamagePos = 1;
            {
                var error = $root.Vector3.verify(message.DamagePos);
                if (error)
                    return "DamagePos." + error;
            }
        }
        if (message.DamageVal != null && message.hasOwnProperty("DamageVal")) {
            properties._DamageVal = 1;
            if (!$util.isInteger(message.DamageVal) && !(message.DamageVal && $util.isInteger(message.DamageVal.low) && $util.isInteger(message.DamageVal.high)))
                return "DamageVal: integer|Long expected";
        }
        return null;
    };

    /**
     * Creates a ClientHitPartInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ClientHitPartInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ClientHitPartInfo} ClientHitPartInfo
     */
    ClientHitPartInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.ClientHitPartInfo)
            return object;
        var message = new $root.ClientHitPartInfo();
        if (object.PartId != null)
            message.PartId = object.PartId | 0;
        if (object.DamagePos != null) {
            if (typeof object.DamagePos !== "object")
                throw TypeError(".ClientHitPartInfo.DamagePos: object expected");
            message.DamagePos = $root.Vector3.fromObject(object.DamagePos);
        }
        if (object.DamageVal != null)
            if ($util.Long)
                (message.DamageVal = $util.Long.fromValue(object.DamageVal)).unsigned = false;
            else if (typeof object.DamageVal === "string")
                message.DamageVal = parseInt(object.DamageVal, 10);
            else if (typeof object.DamageVal === "number")
                message.DamageVal = object.DamageVal;
            else if (typeof object.DamageVal === "object")
                message.DamageVal = new $util.LongBits(object.DamageVal.low >>> 0, object.DamageVal.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a ClientHitPartInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ClientHitPartInfo
     * @static
     * @param {ClientHitPartInfo} message ClientHitPartInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ClientHitPartInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.PartId != null && message.hasOwnProperty("PartId")) {
            object.PartId = message.PartId;
            if (options.oneofs)
                object._PartId = "PartId";
        }
        if (message.DamagePos != null && message.hasOwnProperty("DamagePos")) {
            object.DamagePos = $root.Vector3.toObject(message.DamagePos, options);
            if (options.oneofs)
                object._DamagePos = "DamagePos";
        }
        if (message.DamageVal != null && message.hasOwnProperty("DamageVal")) {
            if (typeof message.DamageVal === "number")
                object.DamageVal = options.longs === String ? String(message.DamageVal) : message.DamageVal;
            else
                object.DamageVal = options.longs === String ? $util.Long.prototype.toString.call(message.DamageVal) : options.longs === Number ? new $util.LongBits(message.DamageVal.low >>> 0, message.DamageVal.high >>> 0).toNumber() : message.DamageVal;
            if (options.oneofs)
                object._DamageVal = "DamageVal";
        }
        return object;
    };

    /**
     * Converts this ClientHitPartInfo to JSON.
     * @function toJSON
     * @memberof ClientHitPartInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ClientHitPartInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ClientHitPartInfo
     * @function getTypeUrl
     * @memberof ClientHitPartInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ClientHitPartInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ClientHitPartInfo";
    };

    return ClientHitPartInfo;
})();

/**
 * EDamageType enum.
 * @exports EDamageType
 * @enum {number}
 * @property {number} Normal=0 Normal value
 * @property {number} Miss=1 Miss value
 * @property {number} Heal=2 Heal value
 * @property {number} Immune=3 Immune value
 * @property {number} Fall=4 Fall value
 * @property {number} Absorbed=5 Absorbed value
 */
$root.EDamageType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "Normal"] = 0;
    values[valuesById[1] = "Miss"] = 1;
    values[valuesById[2] = "Heal"] = 2;
    values[valuesById[3] = "Immune"] = 3;
    values[valuesById[4] = "Fall"] = 4;
    values[valuesById[5] = "Absorbed"] = 5;
    return values;
})();

$root.SyncDamageInfo = (function() {

    /**
     * Properties of a SyncDamageInfo.
     * @exports ISyncDamageInfo
     * @interface ISyncDamageInfo
     * @property {EDamageSource|null} [DamageSource] SyncDamageInfo DamageSource
     * @property {boolean|null} [IsMiss] SyncDamageInfo IsMiss
     * @property {boolean|null} [IsCrit] SyncDamageInfo IsCrit
     * @property {EDamageType|null} [Type] SyncDamageInfo Type
     * @property {number|null} [TypeFlag] SyncDamageInfo TypeFlag
     * @property {number|Long|null} [Value] SyncDamageInfo Value
     * @property {number|Long|null} [ActualValue] SyncDamageInfo ActualValue
     * @property {number|Long|null} [LuckyValue] SyncDamageInfo LuckyValue
     * @property {number|Long|null} [HpLessenValue] SyncDamageInfo HpLessenValue
     * @property {number|Long|null} [ShieldLessenValue] SyncDamageInfo ShieldLessenValue
     * @property {number|Long|null} [AttackerUuid] SyncDamageInfo AttackerUuid
     * @property {number|null} [OwnerId] SyncDamageInfo OwnerId
     * @property {number|null} [OwnerLevel] SyncDamageInfo OwnerLevel
     * @property {number|null} [OwnerStage] SyncDamageInfo OwnerStage
     * @property {number|null} [HitEventId] SyncDamageInfo HitEventId
     * @property {boolean|null} [IsNormal] SyncDamageInfo IsNormal
     * @property {boolean|null} [IsDead] SyncDamageInfo IsDead
     * @property {EDamageProperty|null} [Property] SyncDamageInfo Property
     * @property {IVector3|null} [DamagePos] SyncDamageInfo DamagePos
     * @property {Array.<IClientHitPartInfo>|null} [PartInfos] SyncDamageInfo PartInfos
     * @property {number|Long|null} [TopSummonerId] SyncDamageInfo TopSummonerId
     * @property {IVector2|null} [DamageWeight] SyncDamageInfo DamageWeight
     * @property {number|null} [PassiveUuid] SyncDamageInfo PassiveUuid
     * @property {boolean|null} [IsRainbow] SyncDamageInfo IsRainbow
     * @property {EDamageMode|null} [DamageMode] SyncDamageInfo DamageMode
     */

    /**
     * Constructs a new SyncDamageInfo.
     * @exports SyncDamageInfo
     * @classdesc Represents a SyncDamageInfo.
     * @implements ISyncDamageInfo
     * @constructor
     * @param {ISyncDamageInfo=} [properties] Properties to set
     */
    function SyncDamageInfo(properties) {
        this.PartInfos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SyncDamageInfo DamageSource.
     * @member {EDamageSource|null|undefined} DamageSource
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.DamageSource = null;

    /**
     * SyncDamageInfo IsMiss.
     * @member {boolean|null|undefined} IsMiss
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.IsMiss = null;

    /**
     * SyncDamageInfo IsCrit.
     * @member {boolean|null|undefined} IsCrit
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.IsCrit = null;

    /**
     * SyncDamageInfo Type.
     * @member {EDamageType|null|undefined} Type
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.Type = null;

    /**
     * SyncDamageInfo TypeFlag.
     * @member {number|null|undefined} TypeFlag
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.TypeFlag = null;

    /**
     * SyncDamageInfo Value.
     * @member {number|Long|null|undefined} Value
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.Value = null;

    /**
     * SyncDamageInfo ActualValue.
     * @member {number|Long|null|undefined} ActualValue
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.ActualValue = null;

    /**
     * SyncDamageInfo LuckyValue.
     * @member {number|Long|null|undefined} LuckyValue
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.LuckyValue = null;

    /**
     * SyncDamageInfo HpLessenValue.
     * @member {number|Long|null|undefined} HpLessenValue
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.HpLessenValue = null;

    /**
     * SyncDamageInfo ShieldLessenValue.
     * @member {number|Long|null|undefined} ShieldLessenValue
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.ShieldLessenValue = null;

    /**
     * SyncDamageInfo AttackerUuid.
     * @member {number|Long|null|undefined} AttackerUuid
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.AttackerUuid = null;

    /**
     * SyncDamageInfo OwnerId.
     * @member {number|null|undefined} OwnerId
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.OwnerId = null;

    /**
     * SyncDamageInfo OwnerLevel.
     * @member {number|null|undefined} OwnerLevel
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.OwnerLevel = null;

    /**
     * SyncDamageInfo OwnerStage.
     * @member {number|null|undefined} OwnerStage
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.OwnerStage = null;

    /**
     * SyncDamageInfo HitEventId.
     * @member {number|null|undefined} HitEventId
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.HitEventId = null;

    /**
     * SyncDamageInfo IsNormal.
     * @member {boolean|null|undefined} IsNormal
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.IsNormal = null;

    /**
     * SyncDamageInfo IsDead.
     * @member {boolean|null|undefined} IsDead
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.IsDead = null;

    /**
     * SyncDamageInfo Property.
     * @member {EDamageProperty|null|undefined} Property
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.Property = null;

    /**
     * SyncDamageInfo DamagePos.
     * @member {IVector3|null|undefined} DamagePos
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.DamagePos = null;

    /**
     * SyncDamageInfo PartInfos.
     * @member {Array.<IClientHitPartInfo>} PartInfos
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.PartInfos = $util.emptyArray;

    /**
     * SyncDamageInfo TopSummonerId.
     * @member {number|Long|null|undefined} TopSummonerId
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.TopSummonerId = null;

    /**
     * SyncDamageInfo DamageWeight.
     * @member {IVector2|null|undefined} DamageWeight
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.DamageWeight = null;

    /**
     * SyncDamageInfo PassiveUuid.
     * @member {number|null|undefined} PassiveUuid
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.PassiveUuid = null;

    /**
     * SyncDamageInfo IsRainbow.
     * @member {boolean|null|undefined} IsRainbow
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.IsRainbow = null;

    /**
     * SyncDamageInfo DamageMode.
     * @member {EDamageMode|null|undefined} DamageMode
     * @memberof SyncDamageInfo
     * @instance
     */
    SyncDamageInfo.prototype.DamageMode = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * SyncDamageInfo _DamageSource.
     * @member {"DamageSource"|undefined} _DamageSource
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_DamageSource", {
        get: $util.oneOfGetter($oneOfFields = ["DamageSource"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _IsMiss.
     * @member {"IsMiss"|undefined} _IsMiss
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_IsMiss", {
        get: $util.oneOfGetter($oneOfFields = ["IsMiss"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _IsCrit.
     * @member {"IsCrit"|undefined} _IsCrit
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_IsCrit", {
        get: $util.oneOfGetter($oneOfFields = ["IsCrit"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _Type.
     * @member {"Type"|undefined} _Type
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_Type", {
        get: $util.oneOfGetter($oneOfFields = ["Type"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _TypeFlag.
     * @member {"TypeFlag"|undefined} _TypeFlag
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_TypeFlag", {
        get: $util.oneOfGetter($oneOfFields = ["TypeFlag"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _Value.
     * @member {"Value"|undefined} _Value
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_Value", {
        get: $util.oneOfGetter($oneOfFields = ["Value"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _ActualValue.
     * @member {"ActualValue"|undefined} _ActualValue
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_ActualValue", {
        get: $util.oneOfGetter($oneOfFields = ["ActualValue"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _LuckyValue.
     * @member {"LuckyValue"|undefined} _LuckyValue
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_LuckyValue", {
        get: $util.oneOfGetter($oneOfFields = ["LuckyValue"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _HpLessenValue.
     * @member {"HpLessenValue"|undefined} _HpLessenValue
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_HpLessenValue", {
        get: $util.oneOfGetter($oneOfFields = ["HpLessenValue"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _ShieldLessenValue.
     * @member {"ShieldLessenValue"|undefined} _ShieldLessenValue
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_ShieldLessenValue", {
        get: $util.oneOfGetter($oneOfFields = ["ShieldLessenValue"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _AttackerUuid.
     * @member {"AttackerUuid"|undefined} _AttackerUuid
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_AttackerUuid", {
        get: $util.oneOfGetter($oneOfFields = ["AttackerUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _OwnerId.
     * @member {"OwnerId"|undefined} _OwnerId
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_OwnerId", {
        get: $util.oneOfGetter($oneOfFields = ["OwnerId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _OwnerLevel.
     * @member {"OwnerLevel"|undefined} _OwnerLevel
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_OwnerLevel", {
        get: $util.oneOfGetter($oneOfFields = ["OwnerLevel"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _OwnerStage.
     * @member {"OwnerStage"|undefined} _OwnerStage
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_OwnerStage", {
        get: $util.oneOfGetter($oneOfFields = ["OwnerStage"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _HitEventId.
     * @member {"HitEventId"|undefined} _HitEventId
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_HitEventId", {
        get: $util.oneOfGetter($oneOfFields = ["HitEventId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _IsNormal.
     * @member {"IsNormal"|undefined} _IsNormal
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_IsNormal", {
        get: $util.oneOfGetter($oneOfFields = ["IsNormal"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _IsDead.
     * @member {"IsDead"|undefined} _IsDead
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_IsDead", {
        get: $util.oneOfGetter($oneOfFields = ["IsDead"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _Property.
     * @member {"Property"|undefined} _Property
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_Property", {
        get: $util.oneOfGetter($oneOfFields = ["Property"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _DamagePos.
     * @member {"DamagePos"|undefined} _DamagePos
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_DamagePos", {
        get: $util.oneOfGetter($oneOfFields = ["DamagePos"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _TopSummonerId.
     * @member {"TopSummonerId"|undefined} _TopSummonerId
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_TopSummonerId", {
        get: $util.oneOfGetter($oneOfFields = ["TopSummonerId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _DamageWeight.
     * @member {"DamageWeight"|undefined} _DamageWeight
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_DamageWeight", {
        get: $util.oneOfGetter($oneOfFields = ["DamageWeight"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _PassiveUuid.
     * @member {"PassiveUuid"|undefined} _PassiveUuid
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_PassiveUuid", {
        get: $util.oneOfGetter($oneOfFields = ["PassiveUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _IsRainbow.
     * @member {"IsRainbow"|undefined} _IsRainbow
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_IsRainbow", {
        get: $util.oneOfGetter($oneOfFields = ["IsRainbow"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SyncDamageInfo _DamageMode.
     * @member {"DamageMode"|undefined} _DamageMode
     * @memberof SyncDamageInfo
     * @instance
     */
    Object.defineProperty(SyncDamageInfo.prototype, "_DamageMode", {
        get: $util.oneOfGetter($oneOfFields = ["DamageMode"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new SyncDamageInfo instance using the specified properties.
     * @function create
     * @memberof SyncDamageInfo
     * @static
     * @param {ISyncDamageInfo=} [properties] Properties to set
     * @returns {SyncDamageInfo} SyncDamageInfo instance
     */
    SyncDamageInfo.create = function create(properties) {
        return new SyncDamageInfo(properties);
    };

    /**
     * Encodes the specified SyncDamageInfo message. Does not implicitly {@link SyncDamageInfo.verify|verify} messages.
     * @function encode
     * @memberof SyncDamageInfo
     * @static
     * @param {ISyncDamageInfo} message SyncDamageInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SyncDamageInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.DamageSource != null && Object.hasOwnProperty.call(message, "DamageSource"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.DamageSource);
        if (message.IsMiss != null && Object.hasOwnProperty.call(message, "IsMiss"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.IsMiss);
        if (message.IsCrit != null && Object.hasOwnProperty.call(message, "IsCrit"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.IsCrit);
        if (message.Type != null && Object.hasOwnProperty.call(message, "Type"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.Type);
        if (message.TypeFlag != null && Object.hasOwnProperty.call(message, "TypeFlag"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.TypeFlag);
        if (message.Value != null && Object.hasOwnProperty.call(message, "Value"))
            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.Value);
        if (message.ActualValue != null && Object.hasOwnProperty.call(message, "ActualValue"))
            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.ActualValue);
        if (message.LuckyValue != null && Object.hasOwnProperty.call(message, "LuckyValue"))
            writer.uint32(/* id 8, wireType 0 =*/64).int64(message.LuckyValue);
        if (message.HpLessenValue != null && Object.hasOwnProperty.call(message, "HpLessenValue"))
            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.HpLessenValue);
        if (message.ShieldLessenValue != null && Object.hasOwnProperty.call(message, "ShieldLessenValue"))
            writer.uint32(/* id 10, wireType 0 =*/80).int64(message.ShieldLessenValue);
        if (message.AttackerUuid != null && Object.hasOwnProperty.call(message, "AttackerUuid"))
            writer.uint32(/* id 11, wireType 0 =*/88).int64(message.AttackerUuid);
        if (message.OwnerId != null && Object.hasOwnProperty.call(message, "OwnerId"))
            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.OwnerId);
        if (message.OwnerLevel != null && Object.hasOwnProperty.call(message, "OwnerLevel"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.OwnerLevel);
        if (message.OwnerStage != null && Object.hasOwnProperty.call(message, "OwnerStage"))
            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.OwnerStage);
        if (message.HitEventId != null && Object.hasOwnProperty.call(message, "HitEventId"))
            writer.uint32(/* id 15, wireType 0 =*/120).int32(message.HitEventId);
        if (message.IsNormal != null && Object.hasOwnProperty.call(message, "IsNormal"))
            writer.uint32(/* id 16, wireType 0 =*/128).bool(message.IsNormal);
        if (message.IsDead != null && Object.hasOwnProperty.call(message, "IsDead"))
            writer.uint32(/* id 17, wireType 0 =*/136).bool(message.IsDead);
        if (message.Property != null && Object.hasOwnProperty.call(message, "Property"))
            writer.uint32(/* id 18, wireType 0 =*/144).int32(message.Property);
        if (message.DamagePos != null && Object.hasOwnProperty.call(message, "DamagePos"))
            $root.Vector3.encode(message.DamagePos, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
        if (message.PartInfos != null && message.PartInfos.length)
            for (var i = 0; i < message.PartInfos.length; ++i)
                $root.ClientHitPartInfo.encode(message.PartInfos[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.TopSummonerId != null && Object.hasOwnProperty.call(message, "TopSummonerId"))
            writer.uint32(/* id 21, wireType 0 =*/168).int64(message.TopSummonerId);
        if (message.DamageWeight != null && Object.hasOwnProperty.call(message, "DamageWeight"))
            $root.Vector2.encode(message.DamageWeight, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
        if (message.PassiveUuid != null && Object.hasOwnProperty.call(message, "PassiveUuid"))
            writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.PassiveUuid);
        if (message.IsRainbow != null && Object.hasOwnProperty.call(message, "IsRainbow"))
            writer.uint32(/* id 24, wireType 0 =*/192).bool(message.IsRainbow);
        if (message.DamageMode != null && Object.hasOwnProperty.call(message, "DamageMode"))
            writer.uint32(/* id 25, wireType 0 =*/200).int32(message.DamageMode);
        return writer;
    };

    /**
     * Encodes the specified SyncDamageInfo message, length delimited. Does not implicitly {@link SyncDamageInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SyncDamageInfo
     * @static
     * @param {ISyncDamageInfo} message SyncDamageInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SyncDamageInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SyncDamageInfo message from the specified reader or buffer.
     * @function decode
     * @memberof SyncDamageInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SyncDamageInfo} SyncDamageInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SyncDamageInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SyncDamageInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.DamageSource = reader.int32();
                    break;
                }
            case 2: {
                    message.IsMiss = reader.bool();
                    break;
                }
            case 3: {
                    message.IsCrit = reader.bool();
                    break;
                }
            case 4: {
                    message.Type = reader.int32();
                    break;
                }
            case 5: {
                    message.TypeFlag = reader.int32();
                    break;
                }
            case 6: {
                    message.Value = reader.int64();
                    break;
                }
            case 7: {
                    message.ActualValue = reader.int64();
                    break;
                }
            case 8: {
                    message.LuckyValue = reader.int64();
                    break;
                }
            case 9: {
                    message.HpLessenValue = reader.int64();
                    break;
                }
            case 10: {
                    message.ShieldLessenValue = reader.int64();
                    break;
                }
            case 11: {
                    message.AttackerUuid = reader.int64();
                    break;
                }
            case 12: {
                    message.OwnerId = reader.int32();
                    break;
                }
            case 13: {
                    message.OwnerLevel = reader.int32();
                    break;
                }
            case 14: {
                    message.OwnerStage = reader.int32();
                    break;
                }
            case 15: {
                    message.HitEventId = reader.int32();
                    break;
                }
            case 16: {
                    message.IsNormal = reader.bool();
                    break;
                }
            case 17: {
                    message.IsDead = reader.bool();
                    break;
                }
            case 18: {
                    message.Property = reader.int32();
                    break;
                }
            case 19: {
                    message.DamagePos = $root.Vector3.decode(reader, reader.uint32());
                    break;
                }
            case 20: {
                    if (!(message.PartInfos && message.PartInfos.length))
                        message.PartInfos = [];
                    message.PartInfos.push($root.ClientHitPartInfo.decode(reader, reader.uint32()));
                    break;
                }
            case 21: {
                    message.TopSummonerId = reader.int64();
                    break;
                }
            case 22: {
                    message.DamageWeight = $root.Vector2.decode(reader, reader.uint32());
                    break;
                }
            case 23: {
                    message.PassiveUuid = reader.uint32();
                    break;
                }
            case 24: {
                    message.IsRainbow = reader.bool();
                    break;
                }
            case 25: {
                    message.DamageMode = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SyncDamageInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SyncDamageInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SyncDamageInfo} SyncDamageInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SyncDamageInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SyncDamageInfo message.
     * @function verify
     * @memberof SyncDamageInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SyncDamageInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.DamageSource != null && message.hasOwnProperty("DamageSource")) {
            properties._DamageSource = 1;
            switch (message.DamageSource) {
            default:
                return "DamageSource: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 100:
                break;
            }
        }
        if (message.IsMiss != null && message.hasOwnProperty("IsMiss")) {
            properties._IsMiss = 1;
            if (typeof message.IsMiss !== "boolean")
                return "IsMiss: boolean expected";
        }
        if (message.IsCrit != null && message.hasOwnProperty("IsCrit")) {
            properties._IsCrit = 1;
            if (typeof message.IsCrit !== "boolean")
                return "IsCrit: boolean expected";
        }
        if (message.Type != null && message.hasOwnProperty("Type")) {
            properties._Type = 1;
            switch (message.Type) {
            default:
                return "Type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        }
        if (message.TypeFlag != null && message.hasOwnProperty("TypeFlag")) {
            properties._TypeFlag = 1;
            if (!$util.isInteger(message.TypeFlag))
                return "TypeFlag: integer expected";
        }
        if (message.Value != null && message.hasOwnProperty("Value")) {
            properties._Value = 1;
            if (!$util.isInteger(message.Value) && !(message.Value && $util.isInteger(message.Value.low) && $util.isInteger(message.Value.high)))
                return "Value: integer|Long expected";
        }
        if (message.ActualValue != null && message.hasOwnProperty("ActualValue")) {
            properties._ActualValue = 1;
            if (!$util.isInteger(message.ActualValue) && !(message.ActualValue && $util.isInteger(message.ActualValue.low) && $util.isInteger(message.ActualValue.high)))
                return "ActualValue: integer|Long expected";
        }
        if (message.LuckyValue != null && message.hasOwnProperty("LuckyValue")) {
            properties._LuckyValue = 1;
            if (!$util.isInteger(message.LuckyValue) && !(message.LuckyValue && $util.isInteger(message.LuckyValue.low) && $util.isInteger(message.LuckyValue.high)))
                return "LuckyValue: integer|Long expected";
        }
        if (message.HpLessenValue != null && message.hasOwnProperty("HpLessenValue")) {
            properties._HpLessenValue = 1;
            if (!$util.isInteger(message.HpLessenValue) && !(message.HpLessenValue && $util.isInteger(message.HpLessenValue.low) && $util.isInteger(message.HpLessenValue.high)))
                return "HpLessenValue: integer|Long expected";
        }
        if (message.ShieldLessenValue != null && message.hasOwnProperty("ShieldLessenValue")) {
            properties._ShieldLessenValue = 1;
            if (!$util.isInteger(message.ShieldLessenValue) && !(message.ShieldLessenValue && $util.isInteger(message.ShieldLessenValue.low) && $util.isInteger(message.ShieldLessenValue.high)))
                return "ShieldLessenValue: integer|Long expected";
        }
        if (message.AttackerUuid != null && message.hasOwnProperty("AttackerUuid")) {
            properties._AttackerUuid = 1;
            if (!$util.isInteger(message.AttackerUuid) && !(message.AttackerUuid && $util.isInteger(message.AttackerUuid.low) && $util.isInteger(message.AttackerUuid.high)))
                return "AttackerUuid: integer|Long expected";
        }
        if (message.OwnerId != null && message.hasOwnProperty("OwnerId")) {
            properties._OwnerId = 1;
            if (!$util.isInteger(message.OwnerId))
                return "OwnerId: integer expected";
        }
        if (message.OwnerLevel != null && message.hasOwnProperty("OwnerLevel")) {
            properties._OwnerLevel = 1;
            if (!$util.isInteger(message.OwnerLevel))
                return "OwnerLevel: integer expected";
        }
        if (message.OwnerStage != null && message.hasOwnProperty("OwnerStage")) {
            properties._OwnerStage = 1;
            if (!$util.isInteger(message.OwnerStage))
                return "OwnerStage: integer expected";
        }
        if (message.HitEventId != null && message.hasOwnProperty("HitEventId")) {
            properties._HitEventId = 1;
            if (!$util.isInteger(message.HitEventId))
                return "HitEventId: integer expected";
        }
        if (message.IsNormal != null && message.hasOwnProperty("IsNormal")) {
            properties._IsNormal = 1;
            if (typeof message.IsNormal !== "boolean")
                return "IsNormal: boolean expected";
        }
        if (message.IsDead != null && message.hasOwnProperty("IsDead")) {
            properties._IsDead = 1;
            if (typeof message.IsDead !== "boolean")
                return "IsDead: boolean expected";
        }
        if (message.Property != null && message.hasOwnProperty("Property")) {
            properties._Property = 1;
            switch (message.Property) {
            default:
                return "Property: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                break;
            }
        }
        if (message.DamagePos != null && message.hasOwnProperty("DamagePos")) {
            properties._DamagePos = 1;
            {
                var error = $root.Vector3.verify(message.DamagePos);
                if (error)
                    return "DamagePos." + error;
            }
        }
        if (message.PartInfos != null && message.hasOwnProperty("PartInfos")) {
            if (!Array.isArray(message.PartInfos))
                return "PartInfos: array expected";
            for (var i = 0; i < message.PartInfos.length; ++i) {
                var error = $root.ClientHitPartInfo.verify(message.PartInfos[i]);
                if (error)
                    return "PartInfos." + error;
            }
        }
        if (message.TopSummonerId != null && message.hasOwnProperty("TopSummonerId")) {
            properties._TopSummonerId = 1;
            if (!$util.isInteger(message.TopSummonerId) && !(message.TopSummonerId && $util.isInteger(message.TopSummonerId.low) && $util.isInteger(message.TopSummonerId.high)))
                return "TopSummonerId: integer|Long expected";
        }
        if (message.DamageWeight != null && message.hasOwnProperty("DamageWeight")) {
            properties._DamageWeight = 1;
            {
                var error = $root.Vector2.verify(message.DamageWeight);
                if (error)
                    return "DamageWeight." + error;
            }
        }
        if (message.PassiveUuid != null && message.hasOwnProperty("PassiveUuid")) {
            properties._PassiveUuid = 1;
            if (!$util.isInteger(message.PassiveUuid))
                return "PassiveUuid: integer expected";
        }
        if (message.IsRainbow != null && message.hasOwnProperty("IsRainbow")) {
            properties._IsRainbow = 1;
            if (typeof message.IsRainbow !== "boolean")
                return "IsRainbow: boolean expected";
        }
        if (message.DamageMode != null && message.hasOwnProperty("DamageMode")) {
            properties._DamageMode = 1;
            switch (message.DamageMode) {
            default:
                return "DamageMode: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        }
        return null;
    };

    /**
     * Creates a SyncDamageInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SyncDamageInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SyncDamageInfo} SyncDamageInfo
     */
    SyncDamageInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.SyncDamageInfo)
            return object;
        var message = new $root.SyncDamageInfo();
        switch (object.DamageSource) {
        default:
            if (typeof object.DamageSource === "number") {
                message.DamageSource = object.DamageSource;
                break;
            }
            break;
        case "EDamageSourceSkill":
        case 0:
            message.DamageSource = 0;
            break;
        case "EDamageSourceBullet":
        case 1:
            message.DamageSource = 1;
            break;
        case "EDamageSourceBuff":
        case 2:
            message.DamageSource = 2;
            break;
        case "EDamageSourceFall":
        case 3:
            message.DamageSource = 3;
            break;
        case "EDamageSourceFakeBullet":
        case 4:
            message.DamageSource = 4;
            break;
        case "EDamageSourceOther":
        case 100:
            message.DamageSource = 100;
            break;
        }
        if (object.IsMiss != null)
            message.IsMiss = Boolean(object.IsMiss);
        if (object.IsCrit != null)
            message.IsCrit = Boolean(object.IsCrit);
        switch (object.Type) {
        default:
            if (typeof object.Type === "number") {
                message.Type = object.Type;
                break;
            }
            break;
        case "Normal":
        case 0:
            message.Type = 0;
            break;
        case "Miss":
        case 1:
            message.Type = 1;
            break;
        case "Heal":
        case 2:
            message.Type = 2;
            break;
        case "Immune":
        case 3:
            message.Type = 3;
            break;
        case "Fall":
        case 4:
            message.Type = 4;
            break;
        case "Absorbed":
        case 5:
            message.Type = 5;
            break;
        }
        if (object.TypeFlag != null)
            message.TypeFlag = object.TypeFlag | 0;
        if (object.Value != null)
            if ($util.Long)
                (message.Value = $util.Long.fromValue(object.Value)).unsigned = false;
            else if (typeof object.Value === "string")
                message.Value = parseInt(object.Value, 10);
            else if (typeof object.Value === "number")
                message.Value = object.Value;
            else if (typeof object.Value === "object")
                message.Value = new $util.LongBits(object.Value.low >>> 0, object.Value.high >>> 0).toNumber();
        if (object.ActualValue != null)
            if ($util.Long)
                (message.ActualValue = $util.Long.fromValue(object.ActualValue)).unsigned = false;
            else if (typeof object.ActualValue === "string")
                message.ActualValue = parseInt(object.ActualValue, 10);
            else if (typeof object.ActualValue === "number")
                message.ActualValue = object.ActualValue;
            else if (typeof object.ActualValue === "object")
                message.ActualValue = new $util.LongBits(object.ActualValue.low >>> 0, object.ActualValue.high >>> 0).toNumber();
        if (object.LuckyValue != null)
            if ($util.Long)
                (message.LuckyValue = $util.Long.fromValue(object.LuckyValue)).unsigned = false;
            else if (typeof object.LuckyValue === "string")
                message.LuckyValue = parseInt(object.LuckyValue, 10);
            else if (typeof object.LuckyValue === "number")
                message.LuckyValue = object.LuckyValue;
            else if (typeof object.LuckyValue === "object")
                message.LuckyValue = new $util.LongBits(object.LuckyValue.low >>> 0, object.LuckyValue.high >>> 0).toNumber();
        if (object.HpLessenValue != null)
            if ($util.Long)
                (message.HpLessenValue = $util.Long.fromValue(object.HpLessenValue)).unsigned = false;
            else if (typeof object.HpLessenValue === "string")
                message.HpLessenValue = parseInt(object.HpLessenValue, 10);
            else if (typeof object.HpLessenValue === "number")
                message.HpLessenValue = object.HpLessenValue;
            else if (typeof object.HpLessenValue === "object")
                message.HpLessenValue = new $util.LongBits(object.HpLessenValue.low >>> 0, object.HpLessenValue.high >>> 0).toNumber();
        if (object.ShieldLessenValue != null)
            if ($util.Long)
                (message.ShieldLessenValue = $util.Long.fromValue(object.ShieldLessenValue)).unsigned = false;
            else if (typeof object.ShieldLessenValue === "string")
                message.ShieldLessenValue = parseInt(object.ShieldLessenValue, 10);
            else if (typeof object.ShieldLessenValue === "number")
                message.ShieldLessenValue = object.ShieldLessenValue;
            else if (typeof object.ShieldLessenValue === "object")
                message.ShieldLessenValue = new $util.LongBits(object.ShieldLessenValue.low >>> 0, object.ShieldLessenValue.high >>> 0).toNumber();
        if (object.AttackerUuid != null)
            if ($util.Long)
                (message.AttackerUuid = $util.Long.fromValue(object.AttackerUuid)).unsigned = false;
            else if (typeof object.AttackerUuid === "string")
                message.AttackerUuid = parseInt(object.AttackerUuid, 10);
            else if (typeof object.AttackerUuid === "number")
                message.AttackerUuid = object.AttackerUuid;
            else if (typeof object.AttackerUuid === "object")
                message.AttackerUuid = new $util.LongBits(object.AttackerUuid.low >>> 0, object.AttackerUuid.high >>> 0).toNumber();
        if (object.OwnerId != null)
            message.OwnerId = object.OwnerId | 0;
        if (object.OwnerLevel != null)
            message.OwnerLevel = object.OwnerLevel | 0;
        if (object.OwnerStage != null)
            message.OwnerStage = object.OwnerStage | 0;
        if (object.HitEventId != null)
            message.HitEventId = object.HitEventId | 0;
        if (object.IsNormal != null)
            message.IsNormal = Boolean(object.IsNormal);
        if (object.IsDead != null)
            message.IsDead = Boolean(object.IsDead);
        switch (object.Property) {
        default:
            if (typeof object.Property === "number") {
                message.Property = object.Property;
                break;
            }
            break;
        case "General":
        case 0:
            message.Property = 0;
            break;
        case "Fire":
        case 1:
            message.Property = 1;
            break;
        case "Water":
        case 2:
            message.Property = 2;
            break;
        case "Electricity":
        case 3:
            message.Property = 3;
            break;
        case "Wood":
        case 4:
            message.Property = 4;
            break;
        case "Wind":
        case 5:
            message.Property = 5;
            break;
        case "Rock":
        case 6:
            message.Property = 6;
            break;
        case "Light":
        case 7:
            message.Property = 7;
            break;
        case "Dark":
        case 8:
            message.Property = 8;
            break;
        case "Count":
        case 9:
            message.Property = 9;
            break;
        }
        if (object.DamagePos != null) {
            if (typeof object.DamagePos !== "object")
                throw TypeError(".SyncDamageInfo.DamagePos: object expected");
            message.DamagePos = $root.Vector3.fromObject(object.DamagePos);
        }
        if (object.PartInfos) {
            if (!Array.isArray(object.PartInfos))
                throw TypeError(".SyncDamageInfo.PartInfos: array expected");
            message.PartInfos = [];
            for (var i = 0; i < object.PartInfos.length; ++i) {
                if (typeof object.PartInfos[i] !== "object")
                    throw TypeError(".SyncDamageInfo.PartInfos: object expected");
                message.PartInfos[i] = $root.ClientHitPartInfo.fromObject(object.PartInfos[i]);
            }
        }
        if (object.TopSummonerId != null)
            if ($util.Long)
                (message.TopSummonerId = $util.Long.fromValue(object.TopSummonerId)).unsigned = false;
            else if (typeof object.TopSummonerId === "string")
                message.TopSummonerId = parseInt(object.TopSummonerId, 10);
            else if (typeof object.TopSummonerId === "number")
                message.TopSummonerId = object.TopSummonerId;
            else if (typeof object.TopSummonerId === "object")
                message.TopSummonerId = new $util.LongBits(object.TopSummonerId.low >>> 0, object.TopSummonerId.high >>> 0).toNumber();
        if (object.DamageWeight != null) {
            if (typeof object.DamageWeight !== "object")
                throw TypeError(".SyncDamageInfo.DamageWeight: object expected");
            message.DamageWeight = $root.Vector2.fromObject(object.DamageWeight);
        }
        if (object.PassiveUuid != null)
            message.PassiveUuid = object.PassiveUuid >>> 0;
        if (object.IsRainbow != null)
            message.IsRainbow = Boolean(object.IsRainbow);
        switch (object.DamageMode) {
        default:
            if (typeof object.DamageMode === "number") {
                message.DamageMode = object.DamageMode;
                break;
            }
            break;
        case "DamageNormal":
        case 0:
            message.DamageMode = 0;
            break;
        case "DamagePhysical":
        case 1:
            message.DamageMode = 1;
            break;
        case "DamageMagical":
        case 2:
            message.DamageMode = 2;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a SyncDamageInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SyncDamageInfo
     * @static
     * @param {SyncDamageInfo} message SyncDamageInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SyncDamageInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.PartInfos = [];
        if (message.DamageSource != null && message.hasOwnProperty("DamageSource")) {
            object.DamageSource = options.enums === String ? $root.EDamageSource[message.DamageSource] === undefined ? message.DamageSource : $root.EDamageSource[message.DamageSource] : message.DamageSource;
            if (options.oneofs)
                object._DamageSource = "DamageSource";
        }
        if (message.IsMiss != null && message.hasOwnProperty("IsMiss")) {
            object.IsMiss = message.IsMiss;
            if (options.oneofs)
                object._IsMiss = "IsMiss";
        }
        if (message.IsCrit != null && message.hasOwnProperty("IsCrit")) {
            object.IsCrit = message.IsCrit;
            if (options.oneofs)
                object._IsCrit = "IsCrit";
        }
        if (message.Type != null && message.hasOwnProperty("Type")) {
            object.Type = options.enums === String ? $root.EDamageType[message.Type] === undefined ? message.Type : $root.EDamageType[message.Type] : message.Type;
            if (options.oneofs)
                object._Type = "Type";
        }
        if (message.TypeFlag != null && message.hasOwnProperty("TypeFlag")) {
            object.TypeFlag = message.TypeFlag;
            if (options.oneofs)
                object._TypeFlag = "TypeFlag";
        }
        if (message.Value != null && message.hasOwnProperty("Value")) {
            if (typeof message.Value === "number")
                object.Value = options.longs === String ? String(message.Value) : message.Value;
            else
                object.Value = options.longs === String ? $util.Long.prototype.toString.call(message.Value) : options.longs === Number ? new $util.LongBits(message.Value.low >>> 0, message.Value.high >>> 0).toNumber() : message.Value;
            if (options.oneofs)
                object._Value = "Value";
        }
        if (message.ActualValue != null && message.hasOwnProperty("ActualValue")) {
            if (typeof message.ActualValue === "number")
                object.ActualValue = options.longs === String ? String(message.ActualValue) : message.ActualValue;
            else
                object.ActualValue = options.longs === String ? $util.Long.prototype.toString.call(message.ActualValue) : options.longs === Number ? new $util.LongBits(message.ActualValue.low >>> 0, message.ActualValue.high >>> 0).toNumber() : message.ActualValue;
            if (options.oneofs)
                object._ActualValue = "ActualValue";
        }
        if (message.LuckyValue != null && message.hasOwnProperty("LuckyValue")) {
            if (typeof message.LuckyValue === "number")
                object.LuckyValue = options.longs === String ? String(message.LuckyValue) : message.LuckyValue;
            else
                object.LuckyValue = options.longs === String ? $util.Long.prototype.toString.call(message.LuckyValue) : options.longs === Number ? new $util.LongBits(message.LuckyValue.low >>> 0, message.LuckyValue.high >>> 0).toNumber() : message.LuckyValue;
            if (options.oneofs)
                object._LuckyValue = "LuckyValue";
        }
        if (message.HpLessenValue != null && message.hasOwnProperty("HpLessenValue")) {
            if (typeof message.HpLessenValue === "number")
                object.HpLessenValue = options.longs === String ? String(message.HpLessenValue) : message.HpLessenValue;
            else
                object.HpLessenValue = options.longs === String ? $util.Long.prototype.toString.call(message.HpLessenValue) : options.longs === Number ? new $util.LongBits(message.HpLessenValue.low >>> 0, message.HpLessenValue.high >>> 0).toNumber() : message.HpLessenValue;
            if (options.oneofs)
                object._HpLessenValue = "HpLessenValue";
        }
        if (message.ShieldLessenValue != null && message.hasOwnProperty("ShieldLessenValue")) {
            if (typeof message.ShieldLessenValue === "number")
                object.ShieldLessenValue = options.longs === String ? String(message.ShieldLessenValue) : message.ShieldLessenValue;
            else
                object.ShieldLessenValue = options.longs === String ? $util.Long.prototype.toString.call(message.ShieldLessenValue) : options.longs === Number ? new $util.LongBits(message.ShieldLessenValue.low >>> 0, message.ShieldLessenValue.high >>> 0).toNumber() : message.ShieldLessenValue;
            if (options.oneofs)
                object._ShieldLessenValue = "ShieldLessenValue";
        }
        if (message.AttackerUuid != null && message.hasOwnProperty("AttackerUuid")) {
            if (typeof message.AttackerUuid === "number")
                object.AttackerUuid = options.longs === String ? String(message.AttackerUuid) : message.AttackerUuid;
            else
                object.AttackerUuid = options.longs === String ? $util.Long.prototype.toString.call(message.AttackerUuid) : options.longs === Number ? new $util.LongBits(message.AttackerUuid.low >>> 0, message.AttackerUuid.high >>> 0).toNumber() : message.AttackerUuid;
            if (options.oneofs)
                object._AttackerUuid = "AttackerUuid";
        }
        if (message.OwnerId != null && message.hasOwnProperty("OwnerId")) {
            object.OwnerId = message.OwnerId;
            if (options.oneofs)
                object._OwnerId = "OwnerId";
        }
        if (message.OwnerLevel != null && message.hasOwnProperty("OwnerLevel")) {
            object.OwnerLevel = message.OwnerLevel;
            if (options.oneofs)
                object._OwnerLevel = "OwnerLevel";
        }
        if (message.OwnerStage != null && message.hasOwnProperty("OwnerStage")) {
            object.OwnerStage = message.OwnerStage;
            if (options.oneofs)
                object._OwnerStage = "OwnerStage";
        }
        if (message.HitEventId != null && message.hasOwnProperty("HitEventId")) {
            object.HitEventId = message.HitEventId;
            if (options.oneofs)
                object._HitEventId = "HitEventId";
        }
        if (message.IsNormal != null && message.hasOwnProperty("IsNormal")) {
            object.IsNormal = message.IsNormal;
            if (options.oneofs)
                object._IsNormal = "IsNormal";
        }
        if (message.IsDead != null && message.hasOwnProperty("IsDead")) {
            object.IsDead = message.IsDead;
            if (options.oneofs)
                object._IsDead = "IsDead";
        }
        if (message.Property != null && message.hasOwnProperty("Property")) {
            object.Property = options.enums === String ? $root.EDamageProperty[message.Property] === undefined ? message.Property : $root.EDamageProperty[message.Property] : message.Property;
            if (options.oneofs)
                object._Property = "Property";
        }
        if (message.DamagePos != null && message.hasOwnProperty("DamagePos")) {
            object.DamagePos = $root.Vector3.toObject(message.DamagePos, options);
            if (options.oneofs)
                object._DamagePos = "DamagePos";
        }
        if (message.PartInfos && message.PartInfos.length) {
            object.PartInfos = [];
            for (var j = 0; j < message.PartInfos.length; ++j)
                object.PartInfos[j] = $root.ClientHitPartInfo.toObject(message.PartInfos[j], options);
        }
        if (message.TopSummonerId != null && message.hasOwnProperty("TopSummonerId")) {
            if (typeof message.TopSummonerId === "number")
                object.TopSummonerId = options.longs === String ? String(message.TopSummonerId) : message.TopSummonerId;
            else
                object.TopSummonerId = options.longs === String ? $util.Long.prototype.toString.call(message.TopSummonerId) : options.longs === Number ? new $util.LongBits(message.TopSummonerId.low >>> 0, message.TopSummonerId.high >>> 0).toNumber() : message.TopSummonerId;
            if (options.oneofs)
                object._TopSummonerId = "TopSummonerId";
        }
        if (message.DamageWeight != null && message.hasOwnProperty("DamageWeight")) {
            object.DamageWeight = $root.Vector2.toObject(message.DamageWeight, options);
            if (options.oneofs)
                object._DamageWeight = "DamageWeight";
        }
        if (message.PassiveUuid != null && message.hasOwnProperty("PassiveUuid")) {
            object.PassiveUuid = message.PassiveUuid;
            if (options.oneofs)
                object._PassiveUuid = "PassiveUuid";
        }
        if (message.IsRainbow != null && message.hasOwnProperty("IsRainbow")) {
            object.IsRainbow = message.IsRainbow;
            if (options.oneofs)
                object._IsRainbow = "IsRainbow";
        }
        if (message.DamageMode != null && message.hasOwnProperty("DamageMode")) {
            object.DamageMode = options.enums === String ? $root.EDamageMode[message.DamageMode] === undefined ? message.DamageMode : $root.EDamageMode[message.DamageMode] : message.DamageMode;
            if (options.oneofs)
                object._DamageMode = "DamageMode";
        }
        return object;
    };

    /**
     * Converts this SyncDamageInfo to JSON.
     * @function toJSON
     * @memberof SyncDamageInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SyncDamageInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SyncDamageInfo
     * @function getTypeUrl
     * @memberof SyncDamageInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SyncDamageInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SyncDamageInfo";
    };

    return SyncDamageInfo;
})();

$root.SkillEffect = (function() {

    /**
     * Properties of a SkillEffect.
     * @exports ISkillEffect
     * @interface ISkillEffect
     * @property {number|Long|null} [Uuid] SkillEffect Uuid
     * @property {Array.<ISyncDamageInfo>|null} [Damages] SkillEffect Damages
     * @property {number|Long|null} [TotalDamage] SkillEffect TotalDamage
     */

    /**
     * Constructs a new SkillEffect.
     * @exports SkillEffect
     * @classdesc Represents a SkillEffect.
     * @implements ISkillEffect
     * @constructor
     * @param {ISkillEffect=} [properties] Properties to set
     */
    function SkillEffect(properties) {
        this.Damages = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SkillEffect Uuid.
     * @member {number|Long|null|undefined} Uuid
     * @memberof SkillEffect
     * @instance
     */
    SkillEffect.prototype.Uuid = null;

    /**
     * SkillEffect Damages.
     * @member {Array.<ISyncDamageInfo>} Damages
     * @memberof SkillEffect
     * @instance
     */
    SkillEffect.prototype.Damages = $util.emptyArray;

    /**
     * SkillEffect TotalDamage.
     * @member {number|Long|null|undefined} TotalDamage
     * @memberof SkillEffect
     * @instance
     */
    SkillEffect.prototype.TotalDamage = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * SkillEffect _Uuid.
     * @member {"Uuid"|undefined} _Uuid
     * @memberof SkillEffect
     * @instance
     */
    Object.defineProperty(SkillEffect.prototype, "_Uuid", {
        get: $util.oneOfGetter($oneOfFields = ["Uuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SkillEffect _TotalDamage.
     * @member {"TotalDamage"|undefined} _TotalDamage
     * @memberof SkillEffect
     * @instance
     */
    Object.defineProperty(SkillEffect.prototype, "_TotalDamage", {
        get: $util.oneOfGetter($oneOfFields = ["TotalDamage"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new SkillEffect instance using the specified properties.
     * @function create
     * @memberof SkillEffect
     * @static
     * @param {ISkillEffect=} [properties] Properties to set
     * @returns {SkillEffect} SkillEffect instance
     */
    SkillEffect.create = function create(properties) {
        return new SkillEffect(properties);
    };

    /**
     * Encodes the specified SkillEffect message. Does not implicitly {@link SkillEffect.verify|verify} messages.
     * @function encode
     * @memberof SkillEffect
     * @static
     * @param {ISkillEffect} message SkillEffect message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SkillEffect.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.Uuid);
        if (message.Damages != null && message.Damages.length)
            for (var i = 0; i < message.Damages.length; ++i)
                $root.SyncDamageInfo.encode(message.Damages[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.TotalDamage != null && Object.hasOwnProperty.call(message, "TotalDamage"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.TotalDamage);
        return writer;
    };

    /**
     * Encodes the specified SkillEffect message, length delimited. Does not implicitly {@link SkillEffect.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SkillEffect
     * @static
     * @param {ISkillEffect} message SkillEffect message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SkillEffect.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SkillEffect message from the specified reader or buffer.
     * @function decode
     * @memberof SkillEffect
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SkillEffect} SkillEffect
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SkillEffect.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SkillEffect();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Uuid = reader.int64();
                    break;
                }
            case 2: {
                    if (!(message.Damages && message.Damages.length))
                        message.Damages = [];
                    message.Damages.push($root.SyncDamageInfo.decode(reader, reader.uint32()));
                    break;
                }
            case 3: {
                    message.TotalDamage = reader.int64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SkillEffect message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SkillEffect
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SkillEffect} SkillEffect
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SkillEffect.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SkillEffect message.
     * @function verify
     * @memberof SkillEffect
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SkillEffect.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            properties._Uuid = 1;
            if (!$util.isInteger(message.Uuid) && !(message.Uuid && $util.isInteger(message.Uuid.low) && $util.isInteger(message.Uuid.high)))
                return "Uuid: integer|Long expected";
        }
        if (message.Damages != null && message.hasOwnProperty("Damages")) {
            if (!Array.isArray(message.Damages))
                return "Damages: array expected";
            for (var i = 0; i < message.Damages.length; ++i) {
                var error = $root.SyncDamageInfo.verify(message.Damages[i]);
                if (error)
                    return "Damages." + error;
            }
        }
        if (message.TotalDamage != null && message.hasOwnProperty("TotalDamage")) {
            properties._TotalDamage = 1;
            if (!$util.isInteger(message.TotalDamage) && !(message.TotalDamage && $util.isInteger(message.TotalDamage.low) && $util.isInteger(message.TotalDamage.high)))
                return "TotalDamage: integer|Long expected";
        }
        return null;
    };

    /**
     * Creates a SkillEffect message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SkillEffect
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SkillEffect} SkillEffect
     */
    SkillEffect.fromObject = function fromObject(object) {
        if (object instanceof $root.SkillEffect)
            return object;
        var message = new $root.SkillEffect();
        if (object.Uuid != null)
            if ($util.Long)
                (message.Uuid = $util.Long.fromValue(object.Uuid)).unsigned = false;
            else if (typeof object.Uuid === "string")
                message.Uuid = parseInt(object.Uuid, 10);
            else if (typeof object.Uuid === "number")
                message.Uuid = object.Uuid;
            else if (typeof object.Uuid === "object")
                message.Uuid = new $util.LongBits(object.Uuid.low >>> 0, object.Uuid.high >>> 0).toNumber();
        if (object.Damages) {
            if (!Array.isArray(object.Damages))
                throw TypeError(".SkillEffect.Damages: array expected");
            message.Damages = [];
            for (var i = 0; i < object.Damages.length; ++i) {
                if (typeof object.Damages[i] !== "object")
                    throw TypeError(".SkillEffect.Damages: object expected");
                message.Damages[i] = $root.SyncDamageInfo.fromObject(object.Damages[i]);
            }
        }
        if (object.TotalDamage != null)
            if ($util.Long)
                (message.TotalDamage = $util.Long.fromValue(object.TotalDamage)).unsigned = false;
            else if (typeof object.TotalDamage === "string")
                message.TotalDamage = parseInt(object.TotalDamage, 10);
            else if (typeof object.TotalDamage === "number")
                message.TotalDamage = object.TotalDamage;
            else if (typeof object.TotalDamage === "object")
                message.TotalDamage = new $util.LongBits(object.TotalDamage.low >>> 0, object.TotalDamage.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a SkillEffect message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SkillEffect
     * @static
     * @param {SkillEffect} message SkillEffect
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SkillEffect.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.Damages = [];
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            if (typeof message.Uuid === "number")
                object.Uuid = options.longs === String ? String(message.Uuid) : message.Uuid;
            else
                object.Uuid = options.longs === String ? $util.Long.prototype.toString.call(message.Uuid) : options.longs === Number ? new $util.LongBits(message.Uuid.low >>> 0, message.Uuid.high >>> 0).toNumber() : message.Uuid;
            if (options.oneofs)
                object._Uuid = "Uuid";
        }
        if (message.Damages && message.Damages.length) {
            object.Damages = [];
            for (var j = 0; j < message.Damages.length; ++j)
                object.Damages[j] = $root.SyncDamageInfo.toObject(message.Damages[j], options);
        }
        if (message.TotalDamage != null && message.hasOwnProperty("TotalDamage")) {
            if (typeof message.TotalDamage === "number")
                object.TotalDamage = options.longs === String ? String(message.TotalDamage) : message.TotalDamage;
            else
                object.TotalDamage = options.longs === String ? $util.Long.prototype.toString.call(message.TotalDamage) : options.longs === Number ? new $util.LongBits(message.TotalDamage.low >>> 0, message.TotalDamage.high >>> 0).toNumber() : message.TotalDamage;
            if (options.oneofs)
                object._TotalDamage = "TotalDamage";
        }
        return object;
    };

    /**
     * Converts this SkillEffect to JSON.
     * @function toJSON
     * @memberof SkillEffect
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SkillEffect.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SkillEffect
     * @function getTypeUrl
     * @memberof SkillEffect
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SkillEffect.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SkillEffect";
    };

    return SkillEffect;
})();

/**
 * EBuffEventType enum.
 * @exports EBuffEventType
 * @enum {number}
 * @property {number} BuffEventUnknown=0 BuffEventUnknown value
 * @property {number} BuffEventAddTo=1 BuffEventAddTo value
 * @property {number} BuffEventRemove=2 BuffEventRemove value
 * @property {number} BuffEventReplace=3 BuffEventReplace value
 * @property {number} BuffEventTimer=4 BuffEventTimer value
 * @property {number} BuffEventStackLayer=5 BuffEventStackLayer value
 * @property {number} BuffEventRemoveLayer=6 BuffEventRemoveLayer value
 * @property {number} BuffEventOnHitTargetBefore=7 BuffEventOnHitTargetBefore value
 * @property {number} BuffEventOnHitTargetAfter=8 BuffEventOnHitTargetAfter value
 * @property {number} BuffEventOnHittedBefore=9 BuffEventOnHittedBefore value
 * @property {number} BuffEventOnHittedAfter=10 BuffEventOnHittedAfter value
 * @property {number} BuffEventOnReachMaxLayer=11 BuffEventOnReachMaxLayer value
 * @property {number} BuffEventHostDeath=12 BuffEventHostDeath value
 * @property {number} BuffEventOnSkillHitAfter=13 BuffEventOnSkillHitAfter value
 * @property {number} BuffEventTrigTimingAura=14 BuffEventTrigTimingAura value
 * @property {number} BuffEventBodyPartDead=15 BuffEventBodyPartDead value
 * @property {number} BuffEventBodyPartHit=16 BuffEventBodyPartHit value
 * @property {number} BuffEventBodyPartStateChange=17 BuffEventBodyPartStateChange value
 * @property {number} BuffEventOnPartHittedBefore=18 BuffEventOnPartHittedBefore value
 * @property {number} BuffEventOnPartHittedAfter=19 BuffEventOnPartHittedAfter value
 * @property {number} BuffEventGravitational=20 BuffEventGravitational value
 * @property {number} BuffEventFightResChange=21 BuffEventFightResChange value
 * @property {number} BuffEventOnKillActor=23 BuffEventOnKillActor value
 * @property {number} BuffEventAttrWatcher=24 BuffEventAttrWatcher value
 * @property {number} BuffEventOnHittedLHBefore=25 BuffEventOnHittedLHBefore value
 * @property {number} BuffEventOnBeHittedLHBefore=26 BuffEventOnBeHittedLHBefore value
 * @property {number} BuffEventAddByTarget=27 BuffEventAddByTarget value
 * @property {number} BuffEventRemoveByTarget=28 BuffEventRemoveByTarget value
 * @property {number} BuffEventInCombatState=29 BuffEventInCombatState value
 * @property {number} BuffEventOutCombatState=30 BuffEventOutCombatState value
 * @property {number} BuffEventSkillBegin=31 BuffEventSkillBegin value
 * @property {number} BuffEventSkillEnd=32 BuffEventSkillEnd value
 * @property {number} BuffEventSingingEnd=34 BuffEventSingingEnd value
 * @property {number} BuffEventSummonBuffAdd=35 BuffEventSummonBuffAdd value
 * @property {number} BuffEventSummonEntity=36 BuffEventSummonEntity value
 * @property {number} BuffEventGuideEnd=37 BuffEventGuideEnd value
 * @property {number} BuffEventOnDelayHit=39 BuffEventOnDelayHit value
 * @property {number} BuffEventTeamBuffAdd=40 BuffEventTeamBuffAdd value
 * @property {number} BuffEventChangeProfession=41 BuffEventChangeProfession value
 * @property {number} BuffEventDodgeSuccess=42 BuffEventDodgeSuccess value
 * @property {number} BuffEventHealBefore=43 BuffEventHealBefore value
 * @property {number} BuffEventHealAfter=44 BuffEventHealAfter value
 * @property {number} BuffEventProduceHealBefore=45 BuffEventProduceHealBefore value
 * @property {number} BuffEventProduceHealAfter=46 BuffEventProduceHealAfter value
 * @property {number} BuffEventShieldBroken=47 BuffEventShieldBroken value
 * @property {number} BuffEventLinkingStart=48 BuffEventLinkingStart value
 * @property {number} BuffEventLinkingEnd=49 BuffEventLinkingEnd value
 * @property {number} BuffEventLinkingWatcher=50 BuffEventLinkingWatcher value
 * @property {number} BuffEventSuperArmorBroken=51 BuffEventSuperArmorBroken value
 * @property {number} BuffEventAddedByTargetTag=52 BuffEventAddedByTargetTag value
 * @property {number} BuffEventAddToTargetTag=53 BuffEventAddToTargetTag value
 * @property {number} BuffEventOnBeHitLessenHp=57 BuffEventOnBeHitLessenHp value
 * @property {number} BuffEventEnterBreaking=58 BuffEventEnterBreaking value
 * @property {number} BuffEventTeleportBelt=59 BuffEventTeleportBelt value
 * @property {number} BuffEventOnBeHitAfterOnly=63 BuffEventOnBeHitAfterOnly value
 * @property {number} BuffEventOnHitAfterOnly=64 BuffEventOnHitAfterOnly value
 * @property {number} BuffEventOnBeHealAfterOnly=65 BuffEventOnBeHealAfterOnly value
 * @property {number} BuffEventOnHealAfterOnly=66 BuffEventOnHealAfterOnly value
 * @property {number} BuffEventHealCalcAttrBefore=67 BuffEventHealCalcAttrBefore value
 * @property {number} BuffEventProduceHealCalcAttrBefore=68 BuffEventProduceHealCalcAttrBefore value
 * @property {number} BuffEventReviveSuccessEnd=69 BuffEventReviveSuccessEnd value
 * @property {number} BuffEventAfterReviveFirstMove=70 BuffEventAfterReviveFirstMove value
 * @property {number} BuffEventMonsterIntoAlert=71 BuffEventMonsterIntoAlert value
 * @property {number} BuffEventMonsterOutAlert=72 BuffEventMonsterOutAlert value
 * @property {number} BuffEventOnAddShieldCalcBefore=73 BuffEventOnAddShieldCalcBefore value
 * @property {number} BuffEventOnAddShieldBefore=74 BuffEventOnAddShieldBefore value
 * @property {number} BuffEventOnAddShieldAfter=75 BuffEventOnAddShieldAfter value
 * @property {number} BuffEventOnBeAddedShieldCalcBefore=76 BuffEventOnBeAddedShieldCalcBefore value
 * @property {number} BuffEventOnBeAddedShieldBefore=77 BuffEventOnBeAddedShieldBefore value
 * @property {number} BuffEventOnBeAddedShieldAfter=78 BuffEventOnBeAddedShieldAfter value
 * @property {number} BuffEventProgressWatcher=79 BuffEventProgressWatcher value
 * @property {number} BuffEventOnLuckyDamage=80 BuffEventOnLuckyDamage value
 * @property {number} BuffEventSkillCDEnd=81 BuffEventSkillCDEnd value
 * @property {number} BuffEventMotionless=82 BuffEventMotionless value
 * @property {number} BuffEventParticipateKill=83 BuffEventParticipateKill value
 * @property {number} BuffEventProfessionBDTypeChange=84 BuffEventProfessionBDTypeChange value
 * @property {number} BuffEventSingingBegin=85 BuffEventSingingBegin value
 * @property {number} BuffEventGuideBegin=86 BuffEventGuideBegin value
 * @property {number} BuffEventRandTimer=87 BuffEventRandTimer value
 * @property {number} BuffEventIntoFractureState=88 BuffEventIntoFractureState value
 * @property {number} BuffEventTakeOnRide=89 BuffEventTakeOnRide value
 * @property {number} BuffEventTakeOffRide=90 BuffEventTakeOffRide value
 * @property {number} BuffEventStartJump=91 BuffEventStartJump value
 * @property {number} BuffEventPlayAction=92 BuffEventPlayAction value
 * @property {number} BuffEventPlayEmote=93 BuffEventPlayEmote value
 * @property {number} BuffEventCheck=1001 BuffEventCheck value
 * @property {number} BuffEventCustomize=1002 BuffEventCustomize value
 * @property {number} BuffEventShapeshiftEndEvent=1003 BuffEventShapeshiftEndEvent value
 * @property {number} BuffEventAttrRefresh=1004 BuffEventAttrRefresh value
 * @property {number} BuffEventMonitorTeamKillActor=1005 BuffEventMonitorTeamKillActor value
 * @property {number} BuffEventSpecialEffects=10001 BuffEventSpecialEffects value
 */
$root.EBuffEventType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "BuffEventUnknown"] = 0;
    values[valuesById[1] = "BuffEventAddTo"] = 1;
    values[valuesById[2] = "BuffEventRemove"] = 2;
    values[valuesById[3] = "BuffEventReplace"] = 3;
    values[valuesById[4] = "BuffEventTimer"] = 4;
    values[valuesById[5] = "BuffEventStackLayer"] = 5;
    values[valuesById[6] = "BuffEventRemoveLayer"] = 6;
    values[valuesById[7] = "BuffEventOnHitTargetBefore"] = 7;
    values[valuesById[8] = "BuffEventOnHitTargetAfter"] = 8;
    values[valuesById[9] = "BuffEventOnHittedBefore"] = 9;
    values[valuesById[10] = "BuffEventOnHittedAfter"] = 10;
    values[valuesById[11] = "BuffEventOnReachMaxLayer"] = 11;
    values[valuesById[12] = "BuffEventHostDeath"] = 12;
    values[valuesById[13] = "BuffEventOnSkillHitAfter"] = 13;
    values[valuesById[14] = "BuffEventTrigTimingAura"] = 14;
    values[valuesById[15] = "BuffEventBodyPartDead"] = 15;
    values[valuesById[16] = "BuffEventBodyPartHit"] = 16;
    values[valuesById[17] = "BuffEventBodyPartStateChange"] = 17;
    values[valuesById[18] = "BuffEventOnPartHittedBefore"] = 18;
    values[valuesById[19] = "BuffEventOnPartHittedAfter"] = 19;
    values[valuesById[20] = "BuffEventGravitational"] = 20;
    values[valuesById[21] = "BuffEventFightResChange"] = 21;
    values[valuesById[23] = "BuffEventOnKillActor"] = 23;
    values[valuesById[24] = "BuffEventAttrWatcher"] = 24;
    values[valuesById[25] = "BuffEventOnHittedLHBefore"] = 25;
    values[valuesById[26] = "BuffEventOnBeHittedLHBefore"] = 26;
    values[valuesById[27] = "BuffEventAddByTarget"] = 27;
    values[valuesById[28] = "BuffEventRemoveByTarget"] = 28;
    values[valuesById[29] = "BuffEventInCombatState"] = 29;
    values[valuesById[30] = "BuffEventOutCombatState"] = 30;
    values[valuesById[31] = "BuffEventSkillBegin"] = 31;
    values[valuesById[32] = "BuffEventSkillEnd"] = 32;
    values[valuesById[34] = "BuffEventSingingEnd"] = 34;
    values[valuesById[35] = "BuffEventSummonBuffAdd"] = 35;
    values[valuesById[36] = "BuffEventSummonEntity"] = 36;
    values[valuesById[37] = "BuffEventGuideEnd"] = 37;
    values[valuesById[39] = "BuffEventOnDelayHit"] = 39;
    values[valuesById[40] = "BuffEventTeamBuffAdd"] = 40;
    values[valuesById[41] = "BuffEventChangeProfession"] = 41;
    values[valuesById[42] = "BuffEventDodgeSuccess"] = 42;
    values[valuesById[43] = "BuffEventHealBefore"] = 43;
    values[valuesById[44] = "BuffEventHealAfter"] = 44;
    values[valuesById[45] = "BuffEventProduceHealBefore"] = 45;
    values[valuesById[46] = "BuffEventProduceHealAfter"] = 46;
    values[valuesById[47] = "BuffEventShieldBroken"] = 47;
    values[valuesById[48] = "BuffEventLinkingStart"] = 48;
    values[valuesById[49] = "BuffEventLinkingEnd"] = 49;
    values[valuesById[50] = "BuffEventLinkingWatcher"] = 50;
    values[valuesById[51] = "BuffEventSuperArmorBroken"] = 51;
    values[valuesById[52] = "BuffEventAddedByTargetTag"] = 52;
    values[valuesById[53] = "BuffEventAddToTargetTag"] = 53;
    values[valuesById[57] = "BuffEventOnBeHitLessenHp"] = 57;
    values[valuesById[58] = "BuffEventEnterBreaking"] = 58;
    values[valuesById[59] = "BuffEventTeleportBelt"] = 59;
    values[valuesById[63] = "BuffEventOnBeHitAfterOnly"] = 63;
    values[valuesById[64] = "BuffEventOnHitAfterOnly"] = 64;
    values[valuesById[65] = "BuffEventOnBeHealAfterOnly"] = 65;
    values[valuesById[66] = "BuffEventOnHealAfterOnly"] = 66;
    values[valuesById[67] = "BuffEventHealCalcAttrBefore"] = 67;
    values[valuesById[68] = "BuffEventProduceHealCalcAttrBefore"] = 68;
    values[valuesById[69] = "BuffEventReviveSuccessEnd"] = 69;
    values[valuesById[70] = "BuffEventAfterReviveFirstMove"] = 70;
    values[valuesById[71] = "BuffEventMonsterIntoAlert"] = 71;
    values[valuesById[72] = "BuffEventMonsterOutAlert"] = 72;
    values[valuesById[73] = "BuffEventOnAddShieldCalcBefore"] = 73;
    values[valuesById[74] = "BuffEventOnAddShieldBefore"] = 74;
    values[valuesById[75] = "BuffEventOnAddShieldAfter"] = 75;
    values[valuesById[76] = "BuffEventOnBeAddedShieldCalcBefore"] = 76;
    values[valuesById[77] = "BuffEventOnBeAddedShieldBefore"] = 77;
    values[valuesById[78] = "BuffEventOnBeAddedShieldAfter"] = 78;
    values[valuesById[79] = "BuffEventProgressWatcher"] = 79;
    values[valuesById[80] = "BuffEventOnLuckyDamage"] = 80;
    values[valuesById[81] = "BuffEventSkillCDEnd"] = 81;
    values[valuesById[82] = "BuffEventMotionless"] = 82;
    values[valuesById[83] = "BuffEventParticipateKill"] = 83;
    values[valuesById[84] = "BuffEventProfessionBDTypeChange"] = 84;
    values[valuesById[85] = "BuffEventSingingBegin"] = 85;
    values[valuesById[86] = "BuffEventGuideBegin"] = 86;
    values[valuesById[87] = "BuffEventRandTimer"] = 87;
    values[valuesById[88] = "BuffEventIntoFractureState"] = 88;
    values[valuesById[89] = "BuffEventTakeOnRide"] = 89;
    values[valuesById[90] = "BuffEventTakeOffRide"] = 90;
    values[valuesById[91] = "BuffEventStartJump"] = 91;
    values[valuesById[92] = "BuffEventPlayAction"] = 92;
    values[valuesById[93] = "BuffEventPlayEmote"] = 93;
    values[valuesById[1001] = "BuffEventCheck"] = 1001;
    values[valuesById[1002] = "BuffEventCustomize"] = 1002;
    values[valuesById[1003] = "BuffEventShapeshiftEndEvent"] = 1003;
    values[valuesById[1004] = "BuffEventAttrRefresh"] = 1004;
    values[valuesById[1005] = "BuffEventMonitorTeamKillActor"] = 1005;
    values[valuesById[10001] = "BuffEventSpecialEffects"] = 10001;
    return values;
})();

$root.BuffEffect = (function() {

    /**
     * Properties of a BuffEffect.
     * @exports IBuffEffect
     * @interface IBuffEffect
     * @property {EBuffEventType|null} [Type] BuffEffect Type
     * @property {number|null} [BuffUuid] BuffEffect BuffUuid
     * @property {number|Long|null} [HostUuid] BuffEffect HostUuid
     * @property {number|Long|null} [TriggerTime] BuffEffect TriggerTime
     * @property {Array.<IBuffEffectLogicInfo>|null} [LogicEffect] BuffEffect LogicEffect
     */

    /**
     * Constructs a new BuffEffect.
     * @exports BuffEffect
     * @classdesc Represents a BuffEffect.
     * @implements IBuffEffect
     * @constructor
     * @param {IBuffEffect=} [properties] Properties to set
     */
    function BuffEffect(properties) {
        this.LogicEffect = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BuffEffect Type.
     * @member {EBuffEventType|null|undefined} Type
     * @memberof BuffEffect
     * @instance
     */
    BuffEffect.prototype.Type = null;

    /**
     * BuffEffect BuffUuid.
     * @member {number|null|undefined} BuffUuid
     * @memberof BuffEffect
     * @instance
     */
    BuffEffect.prototype.BuffUuid = null;

    /**
     * BuffEffect HostUuid.
     * @member {number|Long|null|undefined} HostUuid
     * @memberof BuffEffect
     * @instance
     */
    BuffEffect.prototype.HostUuid = null;

    /**
     * BuffEffect TriggerTime.
     * @member {number|Long|null|undefined} TriggerTime
     * @memberof BuffEffect
     * @instance
     */
    BuffEffect.prototype.TriggerTime = null;

    /**
     * BuffEffect LogicEffect.
     * @member {Array.<IBuffEffectLogicInfo>} LogicEffect
     * @memberof BuffEffect
     * @instance
     */
    BuffEffect.prototype.LogicEffect = $util.emptyArray;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * BuffEffect _Type.
     * @member {"Type"|undefined} _Type
     * @memberof BuffEffect
     * @instance
     */
    Object.defineProperty(BuffEffect.prototype, "_Type", {
        get: $util.oneOfGetter($oneOfFields = ["Type"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffEffect _BuffUuid.
     * @member {"BuffUuid"|undefined} _BuffUuid
     * @memberof BuffEffect
     * @instance
     */
    Object.defineProperty(BuffEffect.prototype, "_BuffUuid", {
        get: $util.oneOfGetter($oneOfFields = ["BuffUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffEffect _HostUuid.
     * @member {"HostUuid"|undefined} _HostUuid
     * @memberof BuffEffect
     * @instance
     */
    Object.defineProperty(BuffEffect.prototype, "_HostUuid", {
        get: $util.oneOfGetter($oneOfFields = ["HostUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * BuffEffect _TriggerTime.
     * @member {"TriggerTime"|undefined} _TriggerTime
     * @memberof BuffEffect
     * @instance
     */
    Object.defineProperty(BuffEffect.prototype, "_TriggerTime", {
        get: $util.oneOfGetter($oneOfFields = ["TriggerTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new BuffEffect instance using the specified properties.
     * @function create
     * @memberof BuffEffect
     * @static
     * @param {IBuffEffect=} [properties] Properties to set
     * @returns {BuffEffect} BuffEffect instance
     */
    BuffEffect.create = function create(properties) {
        return new BuffEffect(properties);
    };

    /**
     * Encodes the specified BuffEffect message. Does not implicitly {@link BuffEffect.verify|verify} messages.
     * @function encode
     * @memberof BuffEffect
     * @static
     * @param {IBuffEffect} message BuffEffect message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BuffEffect.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Type != null && Object.hasOwnProperty.call(message, "Type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Type);
        if (message.BuffUuid != null && Object.hasOwnProperty.call(message, "BuffUuid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.BuffUuid);
        if (message.HostUuid != null && Object.hasOwnProperty.call(message, "HostUuid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.HostUuid);
        if (message.TriggerTime != null && Object.hasOwnProperty.call(message, "TriggerTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.TriggerTime);
        if (message.LogicEffect != null && message.LogicEffect.length)
            for (var i = 0; i < message.LogicEffect.length; ++i)
                $root.BuffEffectLogicInfo.encode(message.LogicEffect[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified BuffEffect message, length delimited. Does not implicitly {@link BuffEffect.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BuffEffect
     * @static
     * @param {IBuffEffect} message BuffEffect message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BuffEffect.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BuffEffect message from the specified reader or buffer.
     * @function decode
     * @memberof BuffEffect
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BuffEffect} BuffEffect
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BuffEffect.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuffEffect();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Type = reader.int32();
                    break;
                }
            case 2: {
                    message.BuffUuid = reader.int32();
                    break;
                }
            case 3: {
                    message.HostUuid = reader.int64();
                    break;
                }
            case 4: {
                    message.TriggerTime = reader.int64();
                    break;
                }
            case 5: {
                    if (!(message.LogicEffect && message.LogicEffect.length))
                        message.LogicEffect = [];
                    message.LogicEffect.push($root.BuffEffectLogicInfo.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BuffEffect message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BuffEffect
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BuffEffect} BuffEffect
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BuffEffect.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BuffEffect message.
     * @function verify
     * @memberof BuffEffect
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BuffEffect.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Type != null && message.hasOwnProperty("Type")) {
            properties._Type = 1;
            switch (message.Type) {
            default:
                return "Type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 34:
            case 35:
            case 36:
            case 37:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 57:
            case 58:
            case 59:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 1001:
            case 1002:
            case 1003:
            case 1004:
            case 1005:
            case 10001:
                break;
            }
        }
        if (message.BuffUuid != null && message.hasOwnProperty("BuffUuid")) {
            properties._BuffUuid = 1;
            if (!$util.isInteger(message.BuffUuid))
                return "BuffUuid: integer expected";
        }
        if (message.HostUuid != null && message.hasOwnProperty("HostUuid")) {
            properties._HostUuid = 1;
            if (!$util.isInteger(message.HostUuid) && !(message.HostUuid && $util.isInteger(message.HostUuid.low) && $util.isInteger(message.HostUuid.high)))
                return "HostUuid: integer|Long expected";
        }
        if (message.TriggerTime != null && message.hasOwnProperty("TriggerTime")) {
            properties._TriggerTime = 1;
            if (!$util.isInteger(message.TriggerTime) && !(message.TriggerTime && $util.isInteger(message.TriggerTime.low) && $util.isInteger(message.TriggerTime.high)))
                return "TriggerTime: integer|Long expected";
        }
        if (message.LogicEffect != null && message.hasOwnProperty("LogicEffect")) {
            if (!Array.isArray(message.LogicEffect))
                return "LogicEffect: array expected";
            for (var i = 0; i < message.LogicEffect.length; ++i) {
                var error = $root.BuffEffectLogicInfo.verify(message.LogicEffect[i]);
                if (error)
                    return "LogicEffect." + error;
            }
        }
        return null;
    };

    /**
     * Creates a BuffEffect message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BuffEffect
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BuffEffect} BuffEffect
     */
    BuffEffect.fromObject = function fromObject(object) {
        if (object instanceof $root.BuffEffect)
            return object;
        var message = new $root.BuffEffect();
        switch (object.Type) {
        default:
            if (typeof object.Type === "number") {
                message.Type = object.Type;
                break;
            }
            break;
        case "BuffEventUnknown":
        case 0:
            message.Type = 0;
            break;
        case "BuffEventAddTo":
        case 1:
            message.Type = 1;
            break;
        case "BuffEventRemove":
        case 2:
            message.Type = 2;
            break;
        case "BuffEventReplace":
        case 3:
            message.Type = 3;
            break;
        case "BuffEventTimer":
        case 4:
            message.Type = 4;
            break;
        case "BuffEventStackLayer":
        case 5:
            message.Type = 5;
            break;
        case "BuffEventRemoveLayer":
        case 6:
            message.Type = 6;
            break;
        case "BuffEventOnHitTargetBefore":
        case 7:
            message.Type = 7;
            break;
        case "BuffEventOnHitTargetAfter":
        case 8:
            message.Type = 8;
            break;
        case "BuffEventOnHittedBefore":
        case 9:
            message.Type = 9;
            break;
        case "BuffEventOnHittedAfter":
        case 10:
            message.Type = 10;
            break;
        case "BuffEventOnReachMaxLayer":
        case 11:
            message.Type = 11;
            break;
        case "BuffEventHostDeath":
        case 12:
            message.Type = 12;
            break;
        case "BuffEventOnSkillHitAfter":
        case 13:
            message.Type = 13;
            break;
        case "BuffEventTrigTimingAura":
        case 14:
            message.Type = 14;
            break;
        case "BuffEventBodyPartDead":
        case 15:
            message.Type = 15;
            break;
        case "BuffEventBodyPartHit":
        case 16:
            message.Type = 16;
            break;
        case "BuffEventBodyPartStateChange":
        case 17:
            message.Type = 17;
            break;
        case "BuffEventOnPartHittedBefore":
        case 18:
            message.Type = 18;
            break;
        case "BuffEventOnPartHittedAfter":
        case 19:
            message.Type = 19;
            break;
        case "BuffEventGravitational":
        case 20:
            message.Type = 20;
            break;
        case "BuffEventFightResChange":
        case 21:
            message.Type = 21;
            break;
        case "BuffEventOnKillActor":
        case 23:
            message.Type = 23;
            break;
        case "BuffEventAttrWatcher":
        case 24:
            message.Type = 24;
            break;
        case "BuffEventOnHittedLHBefore":
        case 25:
            message.Type = 25;
            break;
        case "BuffEventOnBeHittedLHBefore":
        case 26:
            message.Type = 26;
            break;
        case "BuffEventAddByTarget":
        case 27:
            message.Type = 27;
            break;
        case "BuffEventRemoveByTarget":
        case 28:
            message.Type = 28;
            break;
        case "BuffEventInCombatState":
        case 29:
            message.Type = 29;
            break;
        case "BuffEventOutCombatState":
        case 30:
            message.Type = 30;
            break;
        case "BuffEventSkillBegin":
        case 31:
            message.Type = 31;
            break;
        case "BuffEventSkillEnd":
        case 32:
            message.Type = 32;
            break;
        case "BuffEventSingingEnd":
        case 34:
            message.Type = 34;
            break;
        case "BuffEventSummonBuffAdd":
        case 35:
            message.Type = 35;
            break;
        case "BuffEventSummonEntity":
        case 36:
            message.Type = 36;
            break;
        case "BuffEventGuideEnd":
        case 37:
            message.Type = 37;
            break;
        case "BuffEventOnDelayHit":
        case 39:
            message.Type = 39;
            break;
        case "BuffEventTeamBuffAdd":
        case 40:
            message.Type = 40;
            break;
        case "BuffEventChangeProfession":
        case 41:
            message.Type = 41;
            break;
        case "BuffEventDodgeSuccess":
        case 42:
            message.Type = 42;
            break;
        case "BuffEventHealBefore":
        case 43:
            message.Type = 43;
            break;
        case "BuffEventHealAfter":
        case 44:
            message.Type = 44;
            break;
        case "BuffEventProduceHealBefore":
        case 45:
            message.Type = 45;
            break;
        case "BuffEventProduceHealAfter":
        case 46:
            message.Type = 46;
            break;
        case "BuffEventShieldBroken":
        case 47:
            message.Type = 47;
            break;
        case "BuffEventLinkingStart":
        case 48:
            message.Type = 48;
            break;
        case "BuffEventLinkingEnd":
        case 49:
            message.Type = 49;
            break;
        case "BuffEventLinkingWatcher":
        case 50:
            message.Type = 50;
            break;
        case "BuffEventSuperArmorBroken":
        case 51:
            message.Type = 51;
            break;
        case "BuffEventAddedByTargetTag":
        case 52:
            message.Type = 52;
            break;
        case "BuffEventAddToTargetTag":
        case 53:
            message.Type = 53;
            break;
        case "BuffEventOnBeHitLessenHp":
        case 57:
            message.Type = 57;
            break;
        case "BuffEventEnterBreaking":
        case 58:
            message.Type = 58;
            break;
        case "BuffEventTeleportBelt":
        case 59:
            message.Type = 59;
            break;
        case "BuffEventOnBeHitAfterOnly":
        case 63:
            message.Type = 63;
            break;
        case "BuffEventOnHitAfterOnly":
        case 64:
            message.Type = 64;
            break;
        case "BuffEventOnBeHealAfterOnly":
        case 65:
            message.Type = 65;
            break;
        case "BuffEventOnHealAfterOnly":
        case 66:
            message.Type = 66;
            break;
        case "BuffEventHealCalcAttrBefore":
        case 67:
            message.Type = 67;
            break;
        case "BuffEventProduceHealCalcAttrBefore":
        case 68:
            message.Type = 68;
            break;
        case "BuffEventReviveSuccessEnd":
        case 69:
            message.Type = 69;
            break;
        case "BuffEventAfterReviveFirstMove":
        case 70:
            message.Type = 70;
            break;
        case "BuffEventMonsterIntoAlert":
        case 71:
            message.Type = 71;
            break;
        case "BuffEventMonsterOutAlert":
        case 72:
            message.Type = 72;
            break;
        case "BuffEventOnAddShieldCalcBefore":
        case 73:
            message.Type = 73;
            break;
        case "BuffEventOnAddShieldBefore":
        case 74:
            message.Type = 74;
            break;
        case "BuffEventOnAddShieldAfter":
        case 75:
            message.Type = 75;
            break;
        case "BuffEventOnBeAddedShieldCalcBefore":
        case 76:
            message.Type = 76;
            break;
        case "BuffEventOnBeAddedShieldBefore":
        case 77:
            message.Type = 77;
            break;
        case "BuffEventOnBeAddedShieldAfter":
        case 78:
            message.Type = 78;
            break;
        case "BuffEventProgressWatcher":
        case 79:
            message.Type = 79;
            break;
        case "BuffEventOnLuckyDamage":
        case 80:
            message.Type = 80;
            break;
        case "BuffEventSkillCDEnd":
        case 81:
            message.Type = 81;
            break;
        case "BuffEventMotionless":
        case 82:
            message.Type = 82;
            break;
        case "BuffEventParticipateKill":
        case 83:
            message.Type = 83;
            break;
        case "BuffEventProfessionBDTypeChange":
        case 84:
            message.Type = 84;
            break;
        case "BuffEventSingingBegin":
        case 85:
            message.Type = 85;
            break;
        case "BuffEventGuideBegin":
        case 86:
            message.Type = 86;
            break;
        case "BuffEventRandTimer":
        case 87:
            message.Type = 87;
            break;
        case "BuffEventIntoFractureState":
        case 88:
            message.Type = 88;
            break;
        case "BuffEventTakeOnRide":
        case 89:
            message.Type = 89;
            break;
        case "BuffEventTakeOffRide":
        case 90:
            message.Type = 90;
            break;
        case "BuffEventStartJump":
        case 91:
            message.Type = 91;
            break;
        case "BuffEventPlayAction":
        case 92:
            message.Type = 92;
            break;
        case "BuffEventPlayEmote":
        case 93:
            message.Type = 93;
            break;
        case "BuffEventCheck":
        case 1001:
            message.Type = 1001;
            break;
        case "BuffEventCustomize":
        case 1002:
            message.Type = 1002;
            break;
        case "BuffEventShapeshiftEndEvent":
        case 1003:
            message.Type = 1003;
            break;
        case "BuffEventAttrRefresh":
        case 1004:
            message.Type = 1004;
            break;
        case "BuffEventMonitorTeamKillActor":
        case 1005:
            message.Type = 1005;
            break;
        case "BuffEventSpecialEffects":
        case 10001:
            message.Type = 10001;
            break;
        }
        if (object.BuffUuid != null)
            message.BuffUuid = object.BuffUuid | 0;
        if (object.HostUuid != null)
            if ($util.Long)
                (message.HostUuid = $util.Long.fromValue(object.HostUuid)).unsigned = false;
            else if (typeof object.HostUuid === "string")
                message.HostUuid = parseInt(object.HostUuid, 10);
            else if (typeof object.HostUuid === "number")
                message.HostUuid = object.HostUuid;
            else if (typeof object.HostUuid === "object")
                message.HostUuid = new $util.LongBits(object.HostUuid.low >>> 0, object.HostUuid.high >>> 0).toNumber();
        if (object.TriggerTime != null)
            if ($util.Long)
                (message.TriggerTime = $util.Long.fromValue(object.TriggerTime)).unsigned = false;
            else if (typeof object.TriggerTime === "string")
                message.TriggerTime = parseInt(object.TriggerTime, 10);
            else if (typeof object.TriggerTime === "number")
                message.TriggerTime = object.TriggerTime;
            else if (typeof object.TriggerTime === "object")
                message.TriggerTime = new $util.LongBits(object.TriggerTime.low >>> 0, object.TriggerTime.high >>> 0).toNumber();
        if (object.LogicEffect) {
            if (!Array.isArray(object.LogicEffect))
                throw TypeError(".BuffEffect.LogicEffect: array expected");
            message.LogicEffect = [];
            for (var i = 0; i < object.LogicEffect.length; ++i) {
                if (typeof object.LogicEffect[i] !== "object")
                    throw TypeError(".BuffEffect.LogicEffect: object expected");
                message.LogicEffect[i] = $root.BuffEffectLogicInfo.fromObject(object.LogicEffect[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a BuffEffect message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BuffEffect
     * @static
     * @param {BuffEffect} message BuffEffect
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BuffEffect.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.LogicEffect = [];
        if (message.Type != null && message.hasOwnProperty("Type")) {
            object.Type = options.enums === String ? $root.EBuffEventType[message.Type] === undefined ? message.Type : $root.EBuffEventType[message.Type] : message.Type;
            if (options.oneofs)
                object._Type = "Type";
        }
        if (message.BuffUuid != null && message.hasOwnProperty("BuffUuid")) {
            object.BuffUuid = message.BuffUuid;
            if (options.oneofs)
                object._BuffUuid = "BuffUuid";
        }
        if (message.HostUuid != null && message.hasOwnProperty("HostUuid")) {
            if (typeof message.HostUuid === "number")
                object.HostUuid = options.longs === String ? String(message.HostUuid) : message.HostUuid;
            else
                object.HostUuid = options.longs === String ? $util.Long.prototype.toString.call(message.HostUuid) : options.longs === Number ? new $util.LongBits(message.HostUuid.low >>> 0, message.HostUuid.high >>> 0).toNumber() : message.HostUuid;
            if (options.oneofs)
                object._HostUuid = "HostUuid";
        }
        if (message.TriggerTime != null && message.hasOwnProperty("TriggerTime")) {
            if (typeof message.TriggerTime === "number")
                object.TriggerTime = options.longs === String ? String(message.TriggerTime) : message.TriggerTime;
            else
                object.TriggerTime = options.longs === String ? $util.Long.prototype.toString.call(message.TriggerTime) : options.longs === Number ? new $util.LongBits(message.TriggerTime.low >>> 0, message.TriggerTime.high >>> 0).toNumber() : message.TriggerTime;
            if (options.oneofs)
                object._TriggerTime = "TriggerTime";
        }
        if (message.LogicEffect && message.LogicEffect.length) {
            object.LogicEffect = [];
            for (var j = 0; j < message.LogicEffect.length; ++j)
                object.LogicEffect[j] = $root.BuffEffectLogicInfo.toObject(message.LogicEffect[j], options);
        }
        return object;
    };

    /**
     * Converts this BuffEffect to JSON.
     * @function toJSON
     * @memberof BuffEffect
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BuffEffect.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BuffEffect
     * @function getTypeUrl
     * @memberof BuffEffect
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BuffEffect.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BuffEffect";
    };

    return BuffEffect;
})();

$root.BuffEffectSync = (function() {

    /**
     * Properties of a BuffEffectSync.
     * @exports IBuffEffectSync
     * @interface IBuffEffectSync
     * @property {number|Long|null} [Uuid] BuffEffectSync Uuid
     * @property {Array.<IBuffEffect>|null} [BuffEffects] BuffEffectSync BuffEffects
     */

    /**
     * Constructs a new BuffEffectSync.
     * @exports BuffEffectSync
     * @classdesc Represents a BuffEffectSync.
     * @implements IBuffEffectSync
     * @constructor
     * @param {IBuffEffectSync=} [properties] Properties to set
     */
    function BuffEffectSync(properties) {
        this.BuffEffects = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BuffEffectSync Uuid.
     * @member {number|Long|null|undefined} Uuid
     * @memberof BuffEffectSync
     * @instance
     */
    BuffEffectSync.prototype.Uuid = null;

    /**
     * BuffEffectSync BuffEffects.
     * @member {Array.<IBuffEffect>} BuffEffects
     * @memberof BuffEffectSync
     * @instance
     */
    BuffEffectSync.prototype.BuffEffects = $util.emptyArray;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * BuffEffectSync _Uuid.
     * @member {"Uuid"|undefined} _Uuid
     * @memberof BuffEffectSync
     * @instance
     */
    Object.defineProperty(BuffEffectSync.prototype, "_Uuid", {
        get: $util.oneOfGetter($oneOfFields = ["Uuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new BuffEffectSync instance using the specified properties.
     * @function create
     * @memberof BuffEffectSync
     * @static
     * @param {IBuffEffectSync=} [properties] Properties to set
     * @returns {BuffEffectSync} BuffEffectSync instance
     */
    BuffEffectSync.create = function create(properties) {
        return new BuffEffectSync(properties);
    };

    /**
     * Encodes the specified BuffEffectSync message. Does not implicitly {@link BuffEffectSync.verify|verify} messages.
     * @function encode
     * @memberof BuffEffectSync
     * @static
     * @param {IBuffEffectSync} message BuffEffectSync message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BuffEffectSync.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.Uuid);
        if (message.BuffEffects != null && message.BuffEffects.length)
            for (var i = 0; i < message.BuffEffects.length; ++i)
                $root.BuffEffect.encode(message.BuffEffects[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified BuffEffectSync message, length delimited. Does not implicitly {@link BuffEffectSync.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BuffEffectSync
     * @static
     * @param {IBuffEffectSync} message BuffEffectSync message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BuffEffectSync.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BuffEffectSync message from the specified reader or buffer.
     * @function decode
     * @memberof BuffEffectSync
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BuffEffectSync} BuffEffectSync
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BuffEffectSync.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuffEffectSync();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Uuid = reader.int64();
                    break;
                }
            case 2: {
                    if (!(message.BuffEffects && message.BuffEffects.length))
                        message.BuffEffects = [];
                    message.BuffEffects.push($root.BuffEffect.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BuffEffectSync message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BuffEffectSync
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BuffEffectSync} BuffEffectSync
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BuffEffectSync.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BuffEffectSync message.
     * @function verify
     * @memberof BuffEffectSync
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BuffEffectSync.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            properties._Uuid = 1;
            if (!$util.isInteger(message.Uuid) && !(message.Uuid && $util.isInteger(message.Uuid.low) && $util.isInteger(message.Uuid.high)))
                return "Uuid: integer|Long expected";
        }
        if (message.BuffEffects != null && message.hasOwnProperty("BuffEffects")) {
            if (!Array.isArray(message.BuffEffects))
                return "BuffEffects: array expected";
            for (var i = 0; i < message.BuffEffects.length; ++i) {
                var error = $root.BuffEffect.verify(message.BuffEffects[i]);
                if (error)
                    return "BuffEffects." + error;
            }
        }
        return null;
    };

    /**
     * Creates a BuffEffectSync message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BuffEffectSync
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BuffEffectSync} BuffEffectSync
     */
    BuffEffectSync.fromObject = function fromObject(object) {
        if (object instanceof $root.BuffEffectSync)
            return object;
        var message = new $root.BuffEffectSync();
        if (object.Uuid != null)
            if ($util.Long)
                (message.Uuid = $util.Long.fromValue(object.Uuid)).unsigned = false;
            else if (typeof object.Uuid === "string")
                message.Uuid = parseInt(object.Uuid, 10);
            else if (typeof object.Uuid === "number")
                message.Uuid = object.Uuid;
            else if (typeof object.Uuid === "object")
                message.Uuid = new $util.LongBits(object.Uuid.low >>> 0, object.Uuid.high >>> 0).toNumber();
        if (object.BuffEffects) {
            if (!Array.isArray(object.BuffEffects))
                throw TypeError(".BuffEffectSync.BuffEffects: array expected");
            message.BuffEffects = [];
            for (var i = 0; i < object.BuffEffects.length; ++i) {
                if (typeof object.BuffEffects[i] !== "object")
                    throw TypeError(".BuffEffectSync.BuffEffects: object expected");
                message.BuffEffects[i] = $root.BuffEffect.fromObject(object.BuffEffects[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a BuffEffectSync message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BuffEffectSync
     * @static
     * @param {BuffEffectSync} message BuffEffectSync
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BuffEffectSync.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.BuffEffects = [];
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            if (typeof message.Uuid === "number")
                object.Uuid = options.longs === String ? String(message.Uuid) : message.Uuid;
            else
                object.Uuid = options.longs === String ? $util.Long.prototype.toString.call(message.Uuid) : options.longs === Number ? new $util.LongBits(message.Uuid.low >>> 0, message.Uuid.high >>> 0).toNumber() : message.Uuid;
            if (options.oneofs)
                object._Uuid = "Uuid";
        }
        if (message.BuffEffects && message.BuffEffects.length) {
            object.BuffEffects = [];
            for (var j = 0; j < message.BuffEffects.length; ++j)
                object.BuffEffects[j] = $root.BuffEffect.toObject(message.BuffEffects[j], options);
        }
        return object;
    };

    /**
     * Converts this BuffEffectSync to JSON.
     * @function toJSON
     * @memberof BuffEffectSync
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BuffEffectSync.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BuffEffectSync
     * @function getTypeUrl
     * @memberof BuffEffectSync
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BuffEffectSync.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BuffEffectSync";
    };

    return BuffEffectSync;
})();

$root.FakeBulletInfo = (function() {

    /**
     * Properties of a FakeBulletInfo.
     * @exports IFakeBulletInfo
     * @interface IFakeBulletInfo
     * @property {number|null} [Uuid] FakeBulletInfo Uuid
     * @property {number|null} [BulletId] FakeBulletInfo BulletId
     * @property {number|Long|null} [TargetId] FakeBulletInfo TargetId
     * @property {number|null} [PartId] FakeBulletInfo PartId
     * @property {IVector3|null} [Offset] FakeBulletInfo Offset
     * @property {IVector3|null} [Rotate] FakeBulletInfo Rotate
     * @property {number|null} [SkinId] FakeBulletInfo SkinId
     */

    /**
     * Constructs a new FakeBulletInfo.
     * @exports FakeBulletInfo
     * @classdesc Represents a FakeBulletInfo.
     * @implements IFakeBulletInfo
     * @constructor
     * @param {IFakeBulletInfo=} [properties] Properties to set
     */
    function FakeBulletInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FakeBulletInfo Uuid.
     * @member {number|null|undefined} Uuid
     * @memberof FakeBulletInfo
     * @instance
     */
    FakeBulletInfo.prototype.Uuid = null;

    /**
     * FakeBulletInfo BulletId.
     * @member {number|null|undefined} BulletId
     * @memberof FakeBulletInfo
     * @instance
     */
    FakeBulletInfo.prototype.BulletId = null;

    /**
     * FakeBulletInfo TargetId.
     * @member {number|Long|null|undefined} TargetId
     * @memberof FakeBulletInfo
     * @instance
     */
    FakeBulletInfo.prototype.TargetId = null;

    /**
     * FakeBulletInfo PartId.
     * @member {number|null|undefined} PartId
     * @memberof FakeBulletInfo
     * @instance
     */
    FakeBulletInfo.prototype.PartId = null;

    /**
     * FakeBulletInfo Offset.
     * @member {IVector3|null|undefined} Offset
     * @memberof FakeBulletInfo
     * @instance
     */
    FakeBulletInfo.prototype.Offset = null;

    /**
     * FakeBulletInfo Rotate.
     * @member {IVector3|null|undefined} Rotate
     * @memberof FakeBulletInfo
     * @instance
     */
    FakeBulletInfo.prototype.Rotate = null;

    /**
     * FakeBulletInfo SkinId.
     * @member {number|null|undefined} SkinId
     * @memberof FakeBulletInfo
     * @instance
     */
    FakeBulletInfo.prototype.SkinId = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * FakeBulletInfo _Uuid.
     * @member {"Uuid"|undefined} _Uuid
     * @memberof FakeBulletInfo
     * @instance
     */
    Object.defineProperty(FakeBulletInfo.prototype, "_Uuid", {
        get: $util.oneOfGetter($oneOfFields = ["Uuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FakeBulletInfo _BulletId.
     * @member {"BulletId"|undefined} _BulletId
     * @memberof FakeBulletInfo
     * @instance
     */
    Object.defineProperty(FakeBulletInfo.prototype, "_BulletId", {
        get: $util.oneOfGetter($oneOfFields = ["BulletId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FakeBulletInfo _TargetId.
     * @member {"TargetId"|undefined} _TargetId
     * @memberof FakeBulletInfo
     * @instance
     */
    Object.defineProperty(FakeBulletInfo.prototype, "_TargetId", {
        get: $util.oneOfGetter($oneOfFields = ["TargetId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FakeBulletInfo _PartId.
     * @member {"PartId"|undefined} _PartId
     * @memberof FakeBulletInfo
     * @instance
     */
    Object.defineProperty(FakeBulletInfo.prototype, "_PartId", {
        get: $util.oneOfGetter($oneOfFields = ["PartId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FakeBulletInfo _Offset.
     * @member {"Offset"|undefined} _Offset
     * @memberof FakeBulletInfo
     * @instance
     */
    Object.defineProperty(FakeBulletInfo.prototype, "_Offset", {
        get: $util.oneOfGetter($oneOfFields = ["Offset"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FakeBulletInfo _Rotate.
     * @member {"Rotate"|undefined} _Rotate
     * @memberof FakeBulletInfo
     * @instance
     */
    Object.defineProperty(FakeBulletInfo.prototype, "_Rotate", {
        get: $util.oneOfGetter($oneOfFields = ["Rotate"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FakeBulletInfo _SkinId.
     * @member {"SkinId"|undefined} _SkinId
     * @memberof FakeBulletInfo
     * @instance
     */
    Object.defineProperty(FakeBulletInfo.prototype, "_SkinId", {
        get: $util.oneOfGetter($oneOfFields = ["SkinId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new FakeBulletInfo instance using the specified properties.
     * @function create
     * @memberof FakeBulletInfo
     * @static
     * @param {IFakeBulletInfo=} [properties] Properties to set
     * @returns {FakeBulletInfo} FakeBulletInfo instance
     */
    FakeBulletInfo.create = function create(properties) {
        return new FakeBulletInfo(properties);
    };

    /**
     * Encodes the specified FakeBulletInfo message. Does not implicitly {@link FakeBulletInfo.verify|verify} messages.
     * @function encode
     * @memberof FakeBulletInfo
     * @static
     * @param {IFakeBulletInfo} message FakeBulletInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FakeBulletInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Uuid);
        if (message.BulletId != null && Object.hasOwnProperty.call(message, "BulletId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.BulletId);
        if (message.TargetId != null && Object.hasOwnProperty.call(message, "TargetId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.TargetId);
        if (message.PartId != null && Object.hasOwnProperty.call(message, "PartId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.PartId);
        if (message.Offset != null && Object.hasOwnProperty.call(message, "Offset"))
            $root.Vector3.encode(message.Offset, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.Rotate != null && Object.hasOwnProperty.call(message, "Rotate"))
            $root.Vector3.encode(message.Rotate, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.SkinId != null && Object.hasOwnProperty.call(message, "SkinId"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.SkinId);
        return writer;
    };

    /**
     * Encodes the specified FakeBulletInfo message, length delimited. Does not implicitly {@link FakeBulletInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FakeBulletInfo
     * @static
     * @param {IFakeBulletInfo} message FakeBulletInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FakeBulletInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FakeBulletInfo message from the specified reader or buffer.
     * @function decode
     * @memberof FakeBulletInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FakeBulletInfo} FakeBulletInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FakeBulletInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FakeBulletInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Uuid = reader.int32();
                    break;
                }
            case 2: {
                    message.BulletId = reader.int32();
                    break;
                }
            case 3: {
                    message.TargetId = reader.int64();
                    break;
                }
            case 4: {
                    message.PartId = reader.int32();
                    break;
                }
            case 5: {
                    message.Offset = $root.Vector3.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.Rotate = $root.Vector3.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.SkinId = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FakeBulletInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FakeBulletInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FakeBulletInfo} FakeBulletInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FakeBulletInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FakeBulletInfo message.
     * @function verify
     * @memberof FakeBulletInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FakeBulletInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            properties._Uuid = 1;
            if (!$util.isInteger(message.Uuid))
                return "Uuid: integer expected";
        }
        if (message.BulletId != null && message.hasOwnProperty("BulletId")) {
            properties._BulletId = 1;
            if (!$util.isInteger(message.BulletId))
                return "BulletId: integer expected";
        }
        if (message.TargetId != null && message.hasOwnProperty("TargetId")) {
            properties._TargetId = 1;
            if (!$util.isInteger(message.TargetId) && !(message.TargetId && $util.isInteger(message.TargetId.low) && $util.isInteger(message.TargetId.high)))
                return "TargetId: integer|Long expected";
        }
        if (message.PartId != null && message.hasOwnProperty("PartId")) {
            properties._PartId = 1;
            if (!$util.isInteger(message.PartId))
                return "PartId: integer expected";
        }
        if (message.Offset != null && message.hasOwnProperty("Offset")) {
            properties._Offset = 1;
            {
                var error = $root.Vector3.verify(message.Offset);
                if (error)
                    return "Offset." + error;
            }
        }
        if (message.Rotate != null && message.hasOwnProperty("Rotate")) {
            properties._Rotate = 1;
            {
                var error = $root.Vector3.verify(message.Rotate);
                if (error)
                    return "Rotate." + error;
            }
        }
        if (message.SkinId != null && message.hasOwnProperty("SkinId")) {
            properties._SkinId = 1;
            if (!$util.isInteger(message.SkinId))
                return "SkinId: integer expected";
        }
        return null;
    };

    /**
     * Creates a FakeBulletInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FakeBulletInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FakeBulletInfo} FakeBulletInfo
     */
    FakeBulletInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.FakeBulletInfo)
            return object;
        var message = new $root.FakeBulletInfo();
        if (object.Uuid != null)
            message.Uuid = object.Uuid | 0;
        if (object.BulletId != null)
            message.BulletId = object.BulletId | 0;
        if (object.TargetId != null)
            if ($util.Long)
                (message.TargetId = $util.Long.fromValue(object.TargetId)).unsigned = false;
            else if (typeof object.TargetId === "string")
                message.TargetId = parseInt(object.TargetId, 10);
            else if (typeof object.TargetId === "number")
                message.TargetId = object.TargetId;
            else if (typeof object.TargetId === "object")
                message.TargetId = new $util.LongBits(object.TargetId.low >>> 0, object.TargetId.high >>> 0).toNumber();
        if (object.PartId != null)
            message.PartId = object.PartId | 0;
        if (object.Offset != null) {
            if (typeof object.Offset !== "object")
                throw TypeError(".FakeBulletInfo.Offset: object expected");
            message.Offset = $root.Vector3.fromObject(object.Offset);
        }
        if (object.Rotate != null) {
            if (typeof object.Rotate !== "object")
                throw TypeError(".FakeBulletInfo.Rotate: object expected");
            message.Rotate = $root.Vector3.fromObject(object.Rotate);
        }
        if (object.SkinId != null)
            message.SkinId = object.SkinId | 0;
        return message;
    };

    /**
     * Creates a plain object from a FakeBulletInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FakeBulletInfo
     * @static
     * @param {FakeBulletInfo} message FakeBulletInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FakeBulletInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            object.Uuid = message.Uuid;
            if (options.oneofs)
                object._Uuid = "Uuid";
        }
        if (message.BulletId != null && message.hasOwnProperty("BulletId")) {
            object.BulletId = message.BulletId;
            if (options.oneofs)
                object._BulletId = "BulletId";
        }
        if (message.TargetId != null && message.hasOwnProperty("TargetId")) {
            if (typeof message.TargetId === "number")
                object.TargetId = options.longs === String ? String(message.TargetId) : message.TargetId;
            else
                object.TargetId = options.longs === String ? $util.Long.prototype.toString.call(message.TargetId) : options.longs === Number ? new $util.LongBits(message.TargetId.low >>> 0, message.TargetId.high >>> 0).toNumber() : message.TargetId;
            if (options.oneofs)
                object._TargetId = "TargetId";
        }
        if (message.PartId != null && message.hasOwnProperty("PartId")) {
            object.PartId = message.PartId;
            if (options.oneofs)
                object._PartId = "PartId";
        }
        if (message.Offset != null && message.hasOwnProperty("Offset")) {
            object.Offset = $root.Vector3.toObject(message.Offset, options);
            if (options.oneofs)
                object._Offset = "Offset";
        }
        if (message.Rotate != null && message.hasOwnProperty("Rotate")) {
            object.Rotate = $root.Vector3.toObject(message.Rotate, options);
            if (options.oneofs)
                object._Rotate = "Rotate";
        }
        if (message.SkinId != null && message.hasOwnProperty("SkinId")) {
            object.SkinId = message.SkinId;
            if (options.oneofs)
                object._SkinId = "SkinId";
        }
        return object;
    };

    /**
     * Converts this FakeBulletInfo to JSON.
     * @function toJSON
     * @memberof FakeBulletInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FakeBulletInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FakeBulletInfo
     * @function getTypeUrl
     * @memberof FakeBulletInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FakeBulletInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FakeBulletInfo";
    };

    return FakeBulletInfo;
})();

$root.PassengerChangeParam = (function() {

    /**
     * Properties of a PassengerChangeParam.
     * @exports IPassengerChangeParam
     * @interface IPassengerChangeParam
     * @property {boolean|null} [IsAddPassenger] PassengerChangeParam IsAddPassenger
     * @property {number|Long|null} [AddOrRemoveUuid] PassengerChangeParam AddOrRemoveUuid
     */

    /**
     * Constructs a new PassengerChangeParam.
     * @exports PassengerChangeParam
     * @classdesc Represents a PassengerChangeParam.
     * @implements IPassengerChangeParam
     * @constructor
     * @param {IPassengerChangeParam=} [properties] Properties to set
     */
    function PassengerChangeParam(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PassengerChangeParam IsAddPassenger.
     * @member {boolean|null|undefined} IsAddPassenger
     * @memberof PassengerChangeParam
     * @instance
     */
    PassengerChangeParam.prototype.IsAddPassenger = null;

    /**
     * PassengerChangeParam AddOrRemoveUuid.
     * @member {number|Long|null|undefined} AddOrRemoveUuid
     * @memberof PassengerChangeParam
     * @instance
     */
    PassengerChangeParam.prototype.AddOrRemoveUuid = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * PassengerChangeParam _IsAddPassenger.
     * @member {"IsAddPassenger"|undefined} _IsAddPassenger
     * @memberof PassengerChangeParam
     * @instance
     */
    Object.defineProperty(PassengerChangeParam.prototype, "_IsAddPassenger", {
        get: $util.oneOfGetter($oneOfFields = ["IsAddPassenger"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PassengerChangeParam _AddOrRemoveUuid.
     * @member {"AddOrRemoveUuid"|undefined} _AddOrRemoveUuid
     * @memberof PassengerChangeParam
     * @instance
     */
    Object.defineProperty(PassengerChangeParam.prototype, "_AddOrRemoveUuid", {
        get: $util.oneOfGetter($oneOfFields = ["AddOrRemoveUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new PassengerChangeParam instance using the specified properties.
     * @function create
     * @memberof PassengerChangeParam
     * @static
     * @param {IPassengerChangeParam=} [properties] Properties to set
     * @returns {PassengerChangeParam} PassengerChangeParam instance
     */
    PassengerChangeParam.create = function create(properties) {
        return new PassengerChangeParam(properties);
    };

    /**
     * Encodes the specified PassengerChangeParam message. Does not implicitly {@link PassengerChangeParam.verify|verify} messages.
     * @function encode
     * @memberof PassengerChangeParam
     * @static
     * @param {IPassengerChangeParam} message PassengerChangeParam message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PassengerChangeParam.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.IsAddPassenger != null && Object.hasOwnProperty.call(message, "IsAddPassenger"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.IsAddPassenger);
        if (message.AddOrRemoveUuid != null && Object.hasOwnProperty.call(message, "AddOrRemoveUuid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.AddOrRemoveUuid);
        return writer;
    };

    /**
     * Encodes the specified PassengerChangeParam message, length delimited. Does not implicitly {@link PassengerChangeParam.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PassengerChangeParam
     * @static
     * @param {IPassengerChangeParam} message PassengerChangeParam message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PassengerChangeParam.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PassengerChangeParam message from the specified reader or buffer.
     * @function decode
     * @memberof PassengerChangeParam
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PassengerChangeParam} PassengerChangeParam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PassengerChangeParam.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PassengerChangeParam();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.IsAddPassenger = reader.bool();
                    break;
                }
            case 2: {
                    message.AddOrRemoveUuid = reader.int64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PassengerChangeParam message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PassengerChangeParam
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PassengerChangeParam} PassengerChangeParam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PassengerChangeParam.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PassengerChangeParam message.
     * @function verify
     * @memberof PassengerChangeParam
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PassengerChangeParam.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.IsAddPassenger != null && message.hasOwnProperty("IsAddPassenger")) {
            properties._IsAddPassenger = 1;
            if (typeof message.IsAddPassenger !== "boolean")
                return "IsAddPassenger: boolean expected";
        }
        if (message.AddOrRemoveUuid != null && message.hasOwnProperty("AddOrRemoveUuid")) {
            properties._AddOrRemoveUuid = 1;
            if (!$util.isInteger(message.AddOrRemoveUuid) && !(message.AddOrRemoveUuid && $util.isInteger(message.AddOrRemoveUuid.low) && $util.isInteger(message.AddOrRemoveUuid.high)))
                return "AddOrRemoveUuid: integer|Long expected";
        }
        return null;
    };

    /**
     * Creates a PassengerChangeParam message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PassengerChangeParam
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PassengerChangeParam} PassengerChangeParam
     */
    PassengerChangeParam.fromObject = function fromObject(object) {
        if (object instanceof $root.PassengerChangeParam)
            return object;
        var message = new $root.PassengerChangeParam();
        if (object.IsAddPassenger != null)
            message.IsAddPassenger = Boolean(object.IsAddPassenger);
        if (object.AddOrRemoveUuid != null)
            if ($util.Long)
                (message.AddOrRemoveUuid = $util.Long.fromValue(object.AddOrRemoveUuid)).unsigned = false;
            else if (typeof object.AddOrRemoveUuid === "string")
                message.AddOrRemoveUuid = parseInt(object.AddOrRemoveUuid, 10);
            else if (typeof object.AddOrRemoveUuid === "number")
                message.AddOrRemoveUuid = object.AddOrRemoveUuid;
            else if (typeof object.AddOrRemoveUuid === "object")
                message.AddOrRemoveUuid = new $util.LongBits(object.AddOrRemoveUuid.low >>> 0, object.AddOrRemoveUuid.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a PassengerChangeParam message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PassengerChangeParam
     * @static
     * @param {PassengerChangeParam} message PassengerChangeParam
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PassengerChangeParam.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.IsAddPassenger != null && message.hasOwnProperty("IsAddPassenger")) {
            object.IsAddPassenger = message.IsAddPassenger;
            if (options.oneofs)
                object._IsAddPassenger = "IsAddPassenger";
        }
        if (message.AddOrRemoveUuid != null && message.hasOwnProperty("AddOrRemoveUuid")) {
            if (typeof message.AddOrRemoveUuid === "number")
                object.AddOrRemoveUuid = options.longs === String ? String(message.AddOrRemoveUuid) : message.AddOrRemoveUuid;
            else
                object.AddOrRemoveUuid = options.longs === String ? $util.Long.prototype.toString.call(message.AddOrRemoveUuid) : options.longs === Number ? new $util.LongBits(message.AddOrRemoveUuid.low >>> 0, message.AddOrRemoveUuid.high >>> 0).toNumber() : message.AddOrRemoveUuid;
            if (options.oneofs)
                object._AddOrRemoveUuid = "AddOrRemoveUuid";
        }
        return object;
    };

    /**
     * Converts this PassengerChangeParam to JSON.
     * @function toJSON
     * @memberof PassengerChangeParam
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PassengerChangeParam.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PassengerChangeParam
     * @function getTypeUrl
     * @memberof PassengerChangeParam
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PassengerChangeParam.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PassengerChangeParam";
    };

    return PassengerChangeParam;
})();

$root.MagneticRidePassengerChangeInfo = (function() {

    /**
     * Properties of a MagneticRidePassengerChangeInfo.
     * @exports IMagneticRidePassengerChangeInfo
     * @interface IMagneticRidePassengerChangeInfo
     * @property {Array.<IPassengerChangeParam>|null} [PassengerChangeList] MagneticRidePassengerChangeInfo PassengerChangeList
     */

    /**
     * Constructs a new MagneticRidePassengerChangeInfo.
     * @exports MagneticRidePassengerChangeInfo
     * @classdesc Represents a MagneticRidePassengerChangeInfo.
     * @implements IMagneticRidePassengerChangeInfo
     * @constructor
     * @param {IMagneticRidePassengerChangeInfo=} [properties] Properties to set
     */
    function MagneticRidePassengerChangeInfo(properties) {
        this.PassengerChangeList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * MagneticRidePassengerChangeInfo PassengerChangeList.
     * @member {Array.<IPassengerChangeParam>} PassengerChangeList
     * @memberof MagneticRidePassengerChangeInfo
     * @instance
     */
    MagneticRidePassengerChangeInfo.prototype.PassengerChangeList = $util.emptyArray;

    /**
     * Creates a new MagneticRidePassengerChangeInfo instance using the specified properties.
     * @function create
     * @memberof MagneticRidePassengerChangeInfo
     * @static
     * @param {IMagneticRidePassengerChangeInfo=} [properties] Properties to set
     * @returns {MagneticRidePassengerChangeInfo} MagneticRidePassengerChangeInfo instance
     */
    MagneticRidePassengerChangeInfo.create = function create(properties) {
        return new MagneticRidePassengerChangeInfo(properties);
    };

    /**
     * Encodes the specified MagneticRidePassengerChangeInfo message. Does not implicitly {@link MagneticRidePassengerChangeInfo.verify|verify} messages.
     * @function encode
     * @memberof MagneticRidePassengerChangeInfo
     * @static
     * @param {IMagneticRidePassengerChangeInfo} message MagneticRidePassengerChangeInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MagneticRidePassengerChangeInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.PassengerChangeList != null && message.PassengerChangeList.length)
            for (var i = 0; i < message.PassengerChangeList.length; ++i)
                $root.PassengerChangeParam.encode(message.PassengerChangeList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified MagneticRidePassengerChangeInfo message, length delimited. Does not implicitly {@link MagneticRidePassengerChangeInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MagneticRidePassengerChangeInfo
     * @static
     * @param {IMagneticRidePassengerChangeInfo} message MagneticRidePassengerChangeInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MagneticRidePassengerChangeInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a MagneticRidePassengerChangeInfo message from the specified reader or buffer.
     * @function decode
     * @memberof MagneticRidePassengerChangeInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MagneticRidePassengerChangeInfo} MagneticRidePassengerChangeInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MagneticRidePassengerChangeInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MagneticRidePassengerChangeInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.PassengerChangeList && message.PassengerChangeList.length))
                        message.PassengerChangeList = [];
                    message.PassengerChangeList.push($root.PassengerChangeParam.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a MagneticRidePassengerChangeInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MagneticRidePassengerChangeInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MagneticRidePassengerChangeInfo} MagneticRidePassengerChangeInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MagneticRidePassengerChangeInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a MagneticRidePassengerChangeInfo message.
     * @function verify
     * @memberof MagneticRidePassengerChangeInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    MagneticRidePassengerChangeInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.PassengerChangeList != null && message.hasOwnProperty("PassengerChangeList")) {
            if (!Array.isArray(message.PassengerChangeList))
                return "PassengerChangeList: array expected";
            for (var i = 0; i < message.PassengerChangeList.length; ++i) {
                var error = $root.PassengerChangeParam.verify(message.PassengerChangeList[i]);
                if (error)
                    return "PassengerChangeList." + error;
            }
        }
        return null;
    };

    /**
     * Creates a MagneticRidePassengerChangeInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MagneticRidePassengerChangeInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MagneticRidePassengerChangeInfo} MagneticRidePassengerChangeInfo
     */
    MagneticRidePassengerChangeInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.MagneticRidePassengerChangeInfo)
            return object;
        var message = new $root.MagneticRidePassengerChangeInfo();
        if (object.PassengerChangeList) {
            if (!Array.isArray(object.PassengerChangeList))
                throw TypeError(".MagneticRidePassengerChangeInfo.PassengerChangeList: array expected");
            message.PassengerChangeList = [];
            for (var i = 0; i < object.PassengerChangeList.length; ++i) {
                if (typeof object.PassengerChangeList[i] !== "object")
                    throw TypeError(".MagneticRidePassengerChangeInfo.PassengerChangeList: object expected");
                message.PassengerChangeList[i] = $root.PassengerChangeParam.fromObject(object.PassengerChangeList[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a MagneticRidePassengerChangeInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MagneticRidePassengerChangeInfo
     * @static
     * @param {MagneticRidePassengerChangeInfo} message MagneticRidePassengerChangeInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    MagneticRidePassengerChangeInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.PassengerChangeList = [];
        if (message.PassengerChangeList && message.PassengerChangeList.length) {
            object.PassengerChangeList = [];
            for (var j = 0; j < message.PassengerChangeList.length; ++j)
                object.PassengerChangeList[j] = $root.PassengerChangeParam.toObject(message.PassengerChangeList[j], options);
        }
        return object;
    };

    /**
     * Converts this MagneticRidePassengerChangeInfo to JSON.
     * @function toJSON
     * @memberof MagneticRidePassengerChangeInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    MagneticRidePassengerChangeInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for MagneticRidePassengerChangeInfo
     * @function getTypeUrl
     * @memberof MagneticRidePassengerChangeInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    MagneticRidePassengerChangeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/MagneticRidePassengerChangeInfo";
    };

    return MagneticRidePassengerChangeInfo;
})();

$root.PathPointChangeParam = (function() {

    /**
     * Properties of a PathPointChangeParam.
     * @exports IPathPointChangeParam
     * @interface IPathPointChangeParam
     * @property {number|null} [Operation] PathPointChangeParam Operation
     * @property {IPosition|null} [AddPoint] PathPointChangeParam AddPoint
     * @property {number|null} [RemovePointCount] PathPointChangeParam RemovePointCount
     */

    /**
     * Constructs a new PathPointChangeParam.
     * @exports PathPointChangeParam
     * @classdesc Represents a PathPointChangeParam.
     * @implements IPathPointChangeParam
     * @constructor
     * @param {IPathPointChangeParam=} [properties] Properties to set
     */
    function PathPointChangeParam(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PathPointChangeParam Operation.
     * @member {number|null|undefined} Operation
     * @memberof PathPointChangeParam
     * @instance
     */
    PathPointChangeParam.prototype.Operation = null;

    /**
     * PathPointChangeParam AddPoint.
     * @member {IPosition|null|undefined} AddPoint
     * @memberof PathPointChangeParam
     * @instance
     */
    PathPointChangeParam.prototype.AddPoint = null;

    /**
     * PathPointChangeParam RemovePointCount.
     * @member {number|null|undefined} RemovePointCount
     * @memberof PathPointChangeParam
     * @instance
     */
    PathPointChangeParam.prototype.RemovePointCount = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * PathPointChangeParam _Operation.
     * @member {"Operation"|undefined} _Operation
     * @memberof PathPointChangeParam
     * @instance
     */
    Object.defineProperty(PathPointChangeParam.prototype, "_Operation", {
        get: $util.oneOfGetter($oneOfFields = ["Operation"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PathPointChangeParam _AddPoint.
     * @member {"AddPoint"|undefined} _AddPoint
     * @memberof PathPointChangeParam
     * @instance
     */
    Object.defineProperty(PathPointChangeParam.prototype, "_AddPoint", {
        get: $util.oneOfGetter($oneOfFields = ["AddPoint"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * PathPointChangeParam _RemovePointCount.
     * @member {"RemovePointCount"|undefined} _RemovePointCount
     * @memberof PathPointChangeParam
     * @instance
     */
    Object.defineProperty(PathPointChangeParam.prototype, "_RemovePointCount", {
        get: $util.oneOfGetter($oneOfFields = ["RemovePointCount"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new PathPointChangeParam instance using the specified properties.
     * @function create
     * @memberof PathPointChangeParam
     * @static
     * @param {IPathPointChangeParam=} [properties] Properties to set
     * @returns {PathPointChangeParam} PathPointChangeParam instance
     */
    PathPointChangeParam.create = function create(properties) {
        return new PathPointChangeParam(properties);
    };

    /**
     * Encodes the specified PathPointChangeParam message. Does not implicitly {@link PathPointChangeParam.verify|verify} messages.
     * @function encode
     * @memberof PathPointChangeParam
     * @static
     * @param {IPathPointChangeParam} message PathPointChangeParam message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PathPointChangeParam.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Operation != null && Object.hasOwnProperty.call(message, "Operation"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Operation);
        if (message.AddPoint != null && Object.hasOwnProperty.call(message, "AddPoint"))
            $root.Position.encode(message.AddPoint, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.RemovePointCount != null && Object.hasOwnProperty.call(message, "RemovePointCount"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.RemovePointCount);
        return writer;
    };

    /**
     * Encodes the specified PathPointChangeParam message, length delimited. Does not implicitly {@link PathPointChangeParam.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PathPointChangeParam
     * @static
     * @param {IPathPointChangeParam} message PathPointChangeParam message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PathPointChangeParam.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PathPointChangeParam message from the specified reader or buffer.
     * @function decode
     * @memberof PathPointChangeParam
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PathPointChangeParam} PathPointChangeParam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PathPointChangeParam.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PathPointChangeParam();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Operation = reader.int32();
                    break;
                }
            case 2: {
                    message.AddPoint = $root.Position.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.RemovePointCount = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PathPointChangeParam message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PathPointChangeParam
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PathPointChangeParam} PathPointChangeParam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PathPointChangeParam.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PathPointChangeParam message.
     * @function verify
     * @memberof PathPointChangeParam
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PathPointChangeParam.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Operation != null && message.hasOwnProperty("Operation")) {
            properties._Operation = 1;
            if (!$util.isInteger(message.Operation))
                return "Operation: integer expected";
        }
        if (message.AddPoint != null && message.hasOwnProperty("AddPoint")) {
            properties._AddPoint = 1;
            {
                var error = $root.Position.verify(message.AddPoint);
                if (error)
                    return "AddPoint." + error;
            }
        }
        if (message.RemovePointCount != null && message.hasOwnProperty("RemovePointCount")) {
            properties._RemovePointCount = 1;
            if (!$util.isInteger(message.RemovePointCount))
                return "RemovePointCount: integer expected";
        }
        return null;
    };

    /**
     * Creates a PathPointChangeParam message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PathPointChangeParam
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PathPointChangeParam} PathPointChangeParam
     */
    PathPointChangeParam.fromObject = function fromObject(object) {
        if (object instanceof $root.PathPointChangeParam)
            return object;
        var message = new $root.PathPointChangeParam();
        if (object.Operation != null)
            message.Operation = object.Operation | 0;
        if (object.AddPoint != null) {
            if (typeof object.AddPoint !== "object")
                throw TypeError(".PathPointChangeParam.AddPoint: object expected");
            message.AddPoint = $root.Position.fromObject(object.AddPoint);
        }
        if (object.RemovePointCount != null)
            message.RemovePointCount = object.RemovePointCount | 0;
        return message;
    };

    /**
     * Creates a plain object from a PathPointChangeParam message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PathPointChangeParam
     * @static
     * @param {PathPointChangeParam} message PathPointChangeParam
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PathPointChangeParam.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.Operation != null && message.hasOwnProperty("Operation")) {
            object.Operation = message.Operation;
            if (options.oneofs)
                object._Operation = "Operation";
        }
        if (message.AddPoint != null && message.hasOwnProperty("AddPoint")) {
            object.AddPoint = $root.Position.toObject(message.AddPoint, options);
            if (options.oneofs)
                object._AddPoint = "AddPoint";
        }
        if (message.RemovePointCount != null && message.hasOwnProperty("RemovePointCount")) {
            object.RemovePointCount = message.RemovePointCount;
            if (options.oneofs)
                object._RemovePointCount = "RemovePointCount";
        }
        return object;
    };

    /**
     * Converts this PathPointChangeParam to JSON.
     * @function toJSON
     * @memberof PathPointChangeParam
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PathPointChangeParam.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PathPointChangeParam
     * @function getTypeUrl
     * @memberof PathPointChangeParam
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PathPointChangeParam.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PathPointChangeParam";
    };

    return PathPointChangeParam;
})();

$root.MagneticRidePathPointChangeInfo = (function() {

    /**
     * Properties of a MagneticRidePathPointChangeInfo.
     * @exports IMagneticRidePathPointChangeInfo
     * @interface IMagneticRidePathPointChangeInfo
     * @property {Array.<IPathPointChangeParam>|null} [PathPointChangeList] MagneticRidePathPointChangeInfo PathPointChangeList
     */

    /**
     * Constructs a new MagneticRidePathPointChangeInfo.
     * @exports MagneticRidePathPointChangeInfo
     * @classdesc Represents a MagneticRidePathPointChangeInfo.
     * @implements IMagneticRidePathPointChangeInfo
     * @constructor
     * @param {IMagneticRidePathPointChangeInfo=} [properties] Properties to set
     */
    function MagneticRidePathPointChangeInfo(properties) {
        this.PathPointChangeList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * MagneticRidePathPointChangeInfo PathPointChangeList.
     * @member {Array.<IPathPointChangeParam>} PathPointChangeList
     * @memberof MagneticRidePathPointChangeInfo
     * @instance
     */
    MagneticRidePathPointChangeInfo.prototype.PathPointChangeList = $util.emptyArray;

    /**
     * Creates a new MagneticRidePathPointChangeInfo instance using the specified properties.
     * @function create
     * @memberof MagneticRidePathPointChangeInfo
     * @static
     * @param {IMagneticRidePathPointChangeInfo=} [properties] Properties to set
     * @returns {MagneticRidePathPointChangeInfo} MagneticRidePathPointChangeInfo instance
     */
    MagneticRidePathPointChangeInfo.create = function create(properties) {
        return new MagneticRidePathPointChangeInfo(properties);
    };

    /**
     * Encodes the specified MagneticRidePathPointChangeInfo message. Does not implicitly {@link MagneticRidePathPointChangeInfo.verify|verify} messages.
     * @function encode
     * @memberof MagneticRidePathPointChangeInfo
     * @static
     * @param {IMagneticRidePathPointChangeInfo} message MagneticRidePathPointChangeInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MagneticRidePathPointChangeInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.PathPointChangeList != null && message.PathPointChangeList.length)
            for (var i = 0; i < message.PathPointChangeList.length; ++i)
                $root.PathPointChangeParam.encode(message.PathPointChangeList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified MagneticRidePathPointChangeInfo message, length delimited. Does not implicitly {@link MagneticRidePathPointChangeInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MagneticRidePathPointChangeInfo
     * @static
     * @param {IMagneticRidePathPointChangeInfo} message MagneticRidePathPointChangeInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MagneticRidePathPointChangeInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a MagneticRidePathPointChangeInfo message from the specified reader or buffer.
     * @function decode
     * @memberof MagneticRidePathPointChangeInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MagneticRidePathPointChangeInfo} MagneticRidePathPointChangeInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MagneticRidePathPointChangeInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MagneticRidePathPointChangeInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.PathPointChangeList && message.PathPointChangeList.length))
                        message.PathPointChangeList = [];
                    message.PathPointChangeList.push($root.PathPointChangeParam.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a MagneticRidePathPointChangeInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MagneticRidePathPointChangeInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MagneticRidePathPointChangeInfo} MagneticRidePathPointChangeInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MagneticRidePathPointChangeInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a MagneticRidePathPointChangeInfo message.
     * @function verify
     * @memberof MagneticRidePathPointChangeInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    MagneticRidePathPointChangeInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.PathPointChangeList != null && message.hasOwnProperty("PathPointChangeList")) {
            if (!Array.isArray(message.PathPointChangeList))
                return "PathPointChangeList: array expected";
            for (var i = 0; i < message.PathPointChangeList.length; ++i) {
                var error = $root.PathPointChangeParam.verify(message.PathPointChangeList[i]);
                if (error)
                    return "PathPointChangeList." + error;
            }
        }
        return null;
    };

    /**
     * Creates a MagneticRidePathPointChangeInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MagneticRidePathPointChangeInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MagneticRidePathPointChangeInfo} MagneticRidePathPointChangeInfo
     */
    MagneticRidePathPointChangeInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.MagneticRidePathPointChangeInfo)
            return object;
        var message = new $root.MagneticRidePathPointChangeInfo();
        if (object.PathPointChangeList) {
            if (!Array.isArray(object.PathPointChangeList))
                throw TypeError(".MagneticRidePathPointChangeInfo.PathPointChangeList: array expected");
            message.PathPointChangeList = [];
            for (var i = 0; i < object.PathPointChangeList.length; ++i) {
                if (typeof object.PathPointChangeList[i] !== "object")
                    throw TypeError(".MagneticRidePathPointChangeInfo.PathPointChangeList: object expected");
                message.PathPointChangeList[i] = $root.PathPointChangeParam.fromObject(object.PathPointChangeList[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a MagneticRidePathPointChangeInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MagneticRidePathPointChangeInfo
     * @static
     * @param {MagneticRidePathPointChangeInfo} message MagneticRidePathPointChangeInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    MagneticRidePathPointChangeInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.PathPointChangeList = [];
        if (message.PathPointChangeList && message.PathPointChangeList.length) {
            object.PathPointChangeList = [];
            for (var j = 0; j < message.PathPointChangeList.length; ++j)
                object.PathPointChangeList[j] = $root.PathPointChangeParam.toObject(message.PathPointChangeList[j], options);
        }
        return object;
    };

    /**
     * Converts this MagneticRidePathPointChangeInfo to JSON.
     * @function toJSON
     * @memberof MagneticRidePathPointChangeInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    MagneticRidePathPointChangeInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for MagneticRidePathPointChangeInfo
     * @function getTypeUrl
     * @memberof MagneticRidePathPointChangeInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    MagneticRidePathPointChangeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/MagneticRidePathPointChangeInfo";
    };

    return MagneticRidePathPointChangeInfo;
})();

$root.MagneticRideQueueChangeInfo = (function() {

    /**
     * Properties of a MagneticRideQueueChangeInfo.
     * @exports IMagneticRideQueueChangeInfo
     * @interface IMagneticRideQueueChangeInfo
     * @property {number|Long|null} [QueueUuid] MagneticRideQueueChangeInfo QueueUuid
     * @property {IMagneticRidePassengerChangeInfo|null} [PassengerChangeInfo] MagneticRideQueueChangeInfo PassengerChangeInfo
     * @property {IMagneticRidePathPointChangeInfo|null} [PathPointChangeInfo] MagneticRideQueueChangeInfo PathPointChangeInfo
     * @property {boolean|null} [IsCircle] MagneticRideQueueChangeInfo IsCircle
     * @property {boolean|null} [IsRemove] MagneticRideQueueChangeInfo IsRemove
     * @property {number|null} [PathLength] MagneticRideQueueChangeInfo PathLength
     */

    /**
     * Constructs a new MagneticRideQueueChangeInfo.
     * @exports MagneticRideQueueChangeInfo
     * @classdesc Represents a MagneticRideQueueChangeInfo.
     * @implements IMagneticRideQueueChangeInfo
     * @constructor
     * @param {IMagneticRideQueueChangeInfo=} [properties] Properties to set
     */
    function MagneticRideQueueChangeInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * MagneticRideQueueChangeInfo QueueUuid.
     * @member {number|Long|null|undefined} QueueUuid
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    MagneticRideQueueChangeInfo.prototype.QueueUuid = null;

    /**
     * MagneticRideQueueChangeInfo PassengerChangeInfo.
     * @member {IMagneticRidePassengerChangeInfo|null|undefined} PassengerChangeInfo
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    MagneticRideQueueChangeInfo.prototype.PassengerChangeInfo = null;

    /**
     * MagneticRideQueueChangeInfo PathPointChangeInfo.
     * @member {IMagneticRidePathPointChangeInfo|null|undefined} PathPointChangeInfo
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    MagneticRideQueueChangeInfo.prototype.PathPointChangeInfo = null;

    /**
     * MagneticRideQueueChangeInfo IsCircle.
     * @member {boolean|null|undefined} IsCircle
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    MagneticRideQueueChangeInfo.prototype.IsCircle = null;

    /**
     * MagneticRideQueueChangeInfo IsRemove.
     * @member {boolean|null|undefined} IsRemove
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    MagneticRideQueueChangeInfo.prototype.IsRemove = null;

    /**
     * MagneticRideQueueChangeInfo PathLength.
     * @member {number|null|undefined} PathLength
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    MagneticRideQueueChangeInfo.prototype.PathLength = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * MagneticRideQueueChangeInfo _QueueUuid.
     * @member {"QueueUuid"|undefined} _QueueUuid
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    Object.defineProperty(MagneticRideQueueChangeInfo.prototype, "_QueueUuid", {
        get: $util.oneOfGetter($oneOfFields = ["QueueUuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * MagneticRideQueueChangeInfo _PassengerChangeInfo.
     * @member {"PassengerChangeInfo"|undefined} _PassengerChangeInfo
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    Object.defineProperty(MagneticRideQueueChangeInfo.prototype, "_PassengerChangeInfo", {
        get: $util.oneOfGetter($oneOfFields = ["PassengerChangeInfo"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * MagneticRideQueueChangeInfo _PathPointChangeInfo.
     * @member {"PathPointChangeInfo"|undefined} _PathPointChangeInfo
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    Object.defineProperty(MagneticRideQueueChangeInfo.prototype, "_PathPointChangeInfo", {
        get: $util.oneOfGetter($oneOfFields = ["PathPointChangeInfo"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * MagneticRideQueueChangeInfo _IsCircle.
     * @member {"IsCircle"|undefined} _IsCircle
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    Object.defineProperty(MagneticRideQueueChangeInfo.prototype, "_IsCircle", {
        get: $util.oneOfGetter($oneOfFields = ["IsCircle"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * MagneticRideQueueChangeInfo _IsRemove.
     * @member {"IsRemove"|undefined} _IsRemove
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    Object.defineProperty(MagneticRideQueueChangeInfo.prototype, "_IsRemove", {
        get: $util.oneOfGetter($oneOfFields = ["IsRemove"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * MagneticRideQueueChangeInfo _PathLength.
     * @member {"PathLength"|undefined} _PathLength
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     */
    Object.defineProperty(MagneticRideQueueChangeInfo.prototype, "_PathLength", {
        get: $util.oneOfGetter($oneOfFields = ["PathLength"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new MagneticRideQueueChangeInfo instance using the specified properties.
     * @function create
     * @memberof MagneticRideQueueChangeInfo
     * @static
     * @param {IMagneticRideQueueChangeInfo=} [properties] Properties to set
     * @returns {MagneticRideQueueChangeInfo} MagneticRideQueueChangeInfo instance
     */
    MagneticRideQueueChangeInfo.create = function create(properties) {
        return new MagneticRideQueueChangeInfo(properties);
    };

    /**
     * Encodes the specified MagneticRideQueueChangeInfo message. Does not implicitly {@link MagneticRideQueueChangeInfo.verify|verify} messages.
     * @function encode
     * @memberof MagneticRideQueueChangeInfo
     * @static
     * @param {IMagneticRideQueueChangeInfo} message MagneticRideQueueChangeInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MagneticRideQueueChangeInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.QueueUuid != null && Object.hasOwnProperty.call(message, "QueueUuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.QueueUuid);
        if (message.PassengerChangeInfo != null && Object.hasOwnProperty.call(message, "PassengerChangeInfo"))
            $root.MagneticRidePassengerChangeInfo.encode(message.PassengerChangeInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.PathPointChangeInfo != null && Object.hasOwnProperty.call(message, "PathPointChangeInfo"))
            $root.MagneticRidePathPointChangeInfo.encode(message.PathPointChangeInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.IsCircle != null && Object.hasOwnProperty.call(message, "IsCircle"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.IsCircle);
        if (message.IsRemove != null && Object.hasOwnProperty.call(message, "IsRemove"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.IsRemove);
        if (message.PathLength != null && Object.hasOwnProperty.call(message, "PathLength"))
            writer.uint32(/* id 6, wireType 5 =*/53).float(message.PathLength);
        return writer;
    };

    /**
     * Encodes the specified MagneticRideQueueChangeInfo message, length delimited. Does not implicitly {@link MagneticRideQueueChangeInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MagneticRideQueueChangeInfo
     * @static
     * @param {IMagneticRideQueueChangeInfo} message MagneticRideQueueChangeInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MagneticRideQueueChangeInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a MagneticRideQueueChangeInfo message from the specified reader or buffer.
     * @function decode
     * @memberof MagneticRideQueueChangeInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MagneticRideQueueChangeInfo} MagneticRideQueueChangeInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MagneticRideQueueChangeInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MagneticRideQueueChangeInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.QueueUuid = reader.int64();
                    break;
                }
            case 2: {
                    message.PassengerChangeInfo = $root.MagneticRidePassengerChangeInfo.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.PathPointChangeInfo = $root.MagneticRidePathPointChangeInfo.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.IsCircle = reader.bool();
                    break;
                }
            case 5: {
                    message.IsRemove = reader.bool();
                    break;
                }
            case 6: {
                    message.PathLength = reader.float();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a MagneticRideQueueChangeInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MagneticRideQueueChangeInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MagneticRideQueueChangeInfo} MagneticRideQueueChangeInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MagneticRideQueueChangeInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a MagneticRideQueueChangeInfo message.
     * @function verify
     * @memberof MagneticRideQueueChangeInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    MagneticRideQueueChangeInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.QueueUuid != null && message.hasOwnProperty("QueueUuid")) {
            properties._QueueUuid = 1;
            if (!$util.isInteger(message.QueueUuid) && !(message.QueueUuid && $util.isInteger(message.QueueUuid.low) && $util.isInteger(message.QueueUuid.high)))
                return "QueueUuid: integer|Long expected";
        }
        if (message.PassengerChangeInfo != null && message.hasOwnProperty("PassengerChangeInfo")) {
            properties._PassengerChangeInfo = 1;
            {
                var error = $root.MagneticRidePassengerChangeInfo.verify(message.PassengerChangeInfo);
                if (error)
                    return "PassengerChangeInfo." + error;
            }
        }
        if (message.PathPointChangeInfo != null && message.hasOwnProperty("PathPointChangeInfo")) {
            properties._PathPointChangeInfo = 1;
            {
                var error = $root.MagneticRidePathPointChangeInfo.verify(message.PathPointChangeInfo);
                if (error)
                    return "PathPointChangeInfo." + error;
            }
        }
        if (message.IsCircle != null && message.hasOwnProperty("IsCircle")) {
            properties._IsCircle = 1;
            if (typeof message.IsCircle !== "boolean")
                return "IsCircle: boolean expected";
        }
        if (message.IsRemove != null && message.hasOwnProperty("IsRemove")) {
            properties._IsRemove = 1;
            if (typeof message.IsRemove !== "boolean")
                return "IsRemove: boolean expected";
        }
        if (message.PathLength != null && message.hasOwnProperty("PathLength")) {
            properties._PathLength = 1;
            if (typeof message.PathLength !== "number")
                return "PathLength: number expected";
        }
        return null;
    };

    /**
     * Creates a MagneticRideQueueChangeInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MagneticRideQueueChangeInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MagneticRideQueueChangeInfo} MagneticRideQueueChangeInfo
     */
    MagneticRideQueueChangeInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.MagneticRideQueueChangeInfo)
            return object;
        var message = new $root.MagneticRideQueueChangeInfo();
        if (object.QueueUuid != null)
            if ($util.Long)
                (message.QueueUuid = $util.Long.fromValue(object.QueueUuid)).unsigned = false;
            else if (typeof object.QueueUuid === "string")
                message.QueueUuid = parseInt(object.QueueUuid, 10);
            else if (typeof object.QueueUuid === "number")
                message.QueueUuid = object.QueueUuid;
            else if (typeof object.QueueUuid === "object")
                message.QueueUuid = new $util.LongBits(object.QueueUuid.low >>> 0, object.QueueUuid.high >>> 0).toNumber();
        if (object.PassengerChangeInfo != null) {
            if (typeof object.PassengerChangeInfo !== "object")
                throw TypeError(".MagneticRideQueueChangeInfo.PassengerChangeInfo: object expected");
            message.PassengerChangeInfo = $root.MagneticRidePassengerChangeInfo.fromObject(object.PassengerChangeInfo);
        }
        if (object.PathPointChangeInfo != null) {
            if (typeof object.PathPointChangeInfo !== "object")
                throw TypeError(".MagneticRideQueueChangeInfo.PathPointChangeInfo: object expected");
            message.PathPointChangeInfo = $root.MagneticRidePathPointChangeInfo.fromObject(object.PathPointChangeInfo);
        }
        if (object.IsCircle != null)
            message.IsCircle = Boolean(object.IsCircle);
        if (object.IsRemove != null)
            message.IsRemove = Boolean(object.IsRemove);
        if (object.PathLength != null)
            message.PathLength = Number(object.PathLength);
        return message;
    };

    /**
     * Creates a plain object from a MagneticRideQueueChangeInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MagneticRideQueueChangeInfo
     * @static
     * @param {MagneticRideQueueChangeInfo} message MagneticRideQueueChangeInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    MagneticRideQueueChangeInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.QueueUuid != null && message.hasOwnProperty("QueueUuid")) {
            if (typeof message.QueueUuid === "number")
                object.QueueUuid = options.longs === String ? String(message.QueueUuid) : message.QueueUuid;
            else
                object.QueueUuid = options.longs === String ? $util.Long.prototype.toString.call(message.QueueUuid) : options.longs === Number ? new $util.LongBits(message.QueueUuid.low >>> 0, message.QueueUuid.high >>> 0).toNumber() : message.QueueUuid;
            if (options.oneofs)
                object._QueueUuid = "QueueUuid";
        }
        if (message.PassengerChangeInfo != null && message.hasOwnProperty("PassengerChangeInfo")) {
            object.PassengerChangeInfo = $root.MagneticRidePassengerChangeInfo.toObject(message.PassengerChangeInfo, options);
            if (options.oneofs)
                object._PassengerChangeInfo = "PassengerChangeInfo";
        }
        if (message.PathPointChangeInfo != null && message.hasOwnProperty("PathPointChangeInfo")) {
            object.PathPointChangeInfo = $root.MagneticRidePathPointChangeInfo.toObject(message.PathPointChangeInfo, options);
            if (options.oneofs)
                object._PathPointChangeInfo = "PathPointChangeInfo";
        }
        if (message.IsCircle != null && message.hasOwnProperty("IsCircle")) {
            object.IsCircle = message.IsCircle;
            if (options.oneofs)
                object._IsCircle = "IsCircle";
        }
        if (message.IsRemove != null && message.hasOwnProperty("IsRemove")) {
            object.IsRemove = message.IsRemove;
            if (options.oneofs)
                object._IsRemove = "IsRemove";
        }
        if (message.PathLength != null && message.hasOwnProperty("PathLength")) {
            object.PathLength = options.json && !isFinite(message.PathLength) ? String(message.PathLength) : message.PathLength;
            if (options.oneofs)
                object._PathLength = "PathLength";
        }
        return object;
    };

    /**
     * Converts this MagneticRideQueueChangeInfo to JSON.
     * @function toJSON
     * @memberof MagneticRideQueueChangeInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    MagneticRideQueueChangeInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for MagneticRideQueueChangeInfo
     * @function getTypeUrl
     * @memberof MagneticRideQueueChangeInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    MagneticRideQueueChangeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/MagneticRideQueueChangeInfo";
    };

    return MagneticRideQueueChangeInfo;
})();

$root.AoiSyncDelta = (function() {

    /**
     * Properties of an AoiSyncDelta.
     * @exports IAoiSyncDelta
     * @interface IAoiSyncDelta
     * @property {number|Long|null} [Uuid] AoiSyncDelta Uuid
     * @property {IAttrCollection|null} [Attrs] AoiSyncDelta Attrs
     * @property {ITempAttrCollection|null} [TempAttrs] AoiSyncDelta TempAttrs
     * @property {IEventDataList|null} [EventDataList] AoiSyncDelta EventDataList
     * @property {IBulletEvent|null} [BulletEvent] AoiSyncDelta BulletEvent
     * @property {IActorBodyPartInfos|null} [BodyPartInfos] AoiSyncDelta BodyPartInfos
     * @property {ISkillEffect|null} [SkillEffects] AoiSyncDelta SkillEffects
     * @property {ISeqPassiveSkillInfo|null} [PassiveSkillInfos] AoiSyncDelta PassiveSkillInfos
     * @property {ISeqPassiveSkillEndInfo|null} [PassiveSkillEndInfos] AoiSyncDelta PassiveSkillEndInfos
     * @property {IBuffInfoSync|null} [BuffInfos] AoiSyncDelta BuffInfos
     * @property {IBuffEffectSync|null} [BuffEffect] AoiSyncDelta BuffEffect
     * @property {Array.<IFakeBulletInfo>|null} [FakeBullets] AoiSyncDelta FakeBullets
     * @property {Array.<IMagneticRideQueueChangeInfo>|null} [MagneticRideQueueChangeInfoList] AoiSyncDelta MagneticRideQueueChangeInfoList
     */

    /**
     * Constructs a new AoiSyncDelta.
     * @exports AoiSyncDelta
     * @classdesc Represents an AoiSyncDelta.
     * @implements IAoiSyncDelta
     * @constructor
     * @param {IAoiSyncDelta=} [properties] Properties to set
     */
    function AoiSyncDelta(properties) {
        this.FakeBullets = [];
        this.MagneticRideQueueChangeInfoList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * AoiSyncDelta Uuid.
     * @member {number|Long|null|undefined} Uuid
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.Uuid = null;

    /**
     * AoiSyncDelta Attrs.
     * @member {IAttrCollection|null|undefined} Attrs
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.Attrs = null;

    /**
     * AoiSyncDelta TempAttrs.
     * @member {ITempAttrCollection|null|undefined} TempAttrs
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.TempAttrs = null;

    /**
     * AoiSyncDelta EventDataList.
     * @member {IEventDataList|null|undefined} EventDataList
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.EventDataList = null;

    /**
     * AoiSyncDelta BulletEvent.
     * @member {IBulletEvent|null|undefined} BulletEvent
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.BulletEvent = null;

    /**
     * AoiSyncDelta BodyPartInfos.
     * @member {IActorBodyPartInfos|null|undefined} BodyPartInfos
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.BodyPartInfos = null;

    /**
     * AoiSyncDelta SkillEffects.
     * @member {ISkillEffect|null|undefined} SkillEffects
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.SkillEffects = null;

    /**
     * AoiSyncDelta PassiveSkillInfos.
     * @member {ISeqPassiveSkillInfo|null|undefined} PassiveSkillInfos
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.PassiveSkillInfos = null;

    /**
     * AoiSyncDelta PassiveSkillEndInfos.
     * @member {ISeqPassiveSkillEndInfo|null|undefined} PassiveSkillEndInfos
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.PassiveSkillEndInfos = null;

    /**
     * AoiSyncDelta BuffInfos.
     * @member {IBuffInfoSync|null|undefined} BuffInfos
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.BuffInfos = null;

    /**
     * AoiSyncDelta BuffEffect.
     * @member {IBuffEffectSync|null|undefined} BuffEffect
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.BuffEffect = null;

    /**
     * AoiSyncDelta FakeBullets.
     * @member {Array.<IFakeBulletInfo>} FakeBullets
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.FakeBullets = $util.emptyArray;

    /**
     * AoiSyncDelta MagneticRideQueueChangeInfoList.
     * @member {Array.<IMagneticRideQueueChangeInfo>} MagneticRideQueueChangeInfoList
     * @memberof AoiSyncDelta
     * @instance
     */
    AoiSyncDelta.prototype.MagneticRideQueueChangeInfoList = $util.emptyArray;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * AoiSyncDelta _Uuid.
     * @member {"Uuid"|undefined} _Uuid
     * @memberof AoiSyncDelta
     * @instance
     */
    Object.defineProperty(AoiSyncDelta.prototype, "_Uuid", {
        get: $util.oneOfGetter($oneOfFields = ["Uuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AoiSyncDelta _Attrs.
     * @member {"Attrs"|undefined} _Attrs
     * @memberof AoiSyncDelta
     * @instance
     */
    Object.defineProperty(AoiSyncDelta.prototype, "_Attrs", {
        get: $util.oneOfGetter($oneOfFields = ["Attrs"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AoiSyncDelta _TempAttrs.
     * @member {"TempAttrs"|undefined} _TempAttrs
     * @memberof AoiSyncDelta
     * @instance
     */
    Object.defineProperty(AoiSyncDelta.prototype, "_TempAttrs", {
        get: $util.oneOfGetter($oneOfFields = ["TempAttrs"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AoiSyncDelta _EventDataList.
     * @member {"EventDataList"|undefined} _EventDataList
     * @memberof AoiSyncDelta
     * @instance
     */
    Object.defineProperty(AoiSyncDelta.prototype, "_EventDataList", {
        get: $util.oneOfGetter($oneOfFields = ["EventDataList"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AoiSyncDelta _BulletEvent.
     * @member {"BulletEvent"|undefined} _BulletEvent
     * @memberof AoiSyncDelta
     * @instance
     */
    Object.defineProperty(AoiSyncDelta.prototype, "_BulletEvent", {
        get: $util.oneOfGetter($oneOfFields = ["BulletEvent"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AoiSyncDelta _BodyPartInfos.
     * @member {"BodyPartInfos"|undefined} _BodyPartInfos
     * @memberof AoiSyncDelta
     * @instance
     */
    Object.defineProperty(AoiSyncDelta.prototype, "_BodyPartInfos", {
        get: $util.oneOfGetter($oneOfFields = ["BodyPartInfos"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AoiSyncDelta _SkillEffects.
     * @member {"SkillEffects"|undefined} _SkillEffects
     * @memberof AoiSyncDelta
     * @instance
     */
    Object.defineProperty(AoiSyncDelta.prototype, "_SkillEffects", {
        get: $util.oneOfGetter($oneOfFields = ["SkillEffects"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AoiSyncDelta _PassiveSkillInfos.
     * @member {"PassiveSkillInfos"|undefined} _PassiveSkillInfos
     * @memberof AoiSyncDelta
     * @instance
     */
    Object.defineProperty(AoiSyncDelta.prototype, "_PassiveSkillInfos", {
        get: $util.oneOfGetter($oneOfFields = ["PassiveSkillInfos"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AoiSyncDelta _PassiveSkillEndInfos.
     * @member {"PassiveSkillEndInfos"|undefined} _PassiveSkillEndInfos
     * @memberof AoiSyncDelta
     * @instance
     */
    Object.defineProperty(AoiSyncDelta.prototype, "_PassiveSkillEndInfos", {
        get: $util.oneOfGetter($oneOfFields = ["PassiveSkillEndInfos"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AoiSyncDelta _BuffInfos.
     * @member {"BuffInfos"|undefined} _BuffInfos
     * @memberof AoiSyncDelta
     * @instance
     */
    Object.defineProperty(AoiSyncDelta.prototype, "_BuffInfos", {
        get: $util.oneOfGetter($oneOfFields = ["BuffInfos"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AoiSyncDelta _BuffEffect.
     * @member {"BuffEffect"|undefined} _BuffEffect
     * @memberof AoiSyncDelta
     * @instance
     */
    Object.defineProperty(AoiSyncDelta.prototype, "_BuffEffect", {
        get: $util.oneOfGetter($oneOfFields = ["BuffEffect"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new AoiSyncDelta instance using the specified properties.
     * @function create
     * @memberof AoiSyncDelta
     * @static
     * @param {IAoiSyncDelta=} [properties] Properties to set
     * @returns {AoiSyncDelta} AoiSyncDelta instance
     */
    AoiSyncDelta.create = function create(properties) {
        return new AoiSyncDelta(properties);
    };

    /**
     * Encodes the specified AoiSyncDelta message. Does not implicitly {@link AoiSyncDelta.verify|verify} messages.
     * @function encode
     * @memberof AoiSyncDelta
     * @static
     * @param {IAoiSyncDelta} message AoiSyncDelta message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AoiSyncDelta.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.Uuid);
        if (message.Attrs != null && Object.hasOwnProperty.call(message, "Attrs"))
            $root.AttrCollection.encode(message.Attrs, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.TempAttrs != null && Object.hasOwnProperty.call(message, "TempAttrs"))
            $root.TempAttrCollection.encode(message.TempAttrs, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.EventDataList != null && Object.hasOwnProperty.call(message, "EventDataList"))
            $root.EventDataList.encode(message.EventDataList, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.BulletEvent != null && Object.hasOwnProperty.call(message, "BulletEvent"))
            $root.BulletEvent.encode(message.BulletEvent, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.BodyPartInfos != null && Object.hasOwnProperty.call(message, "BodyPartInfos"))
            $root.ActorBodyPartInfos.encode(message.BodyPartInfos, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.SkillEffects != null && Object.hasOwnProperty.call(message, "SkillEffects"))
            $root.SkillEffect.encode(message.SkillEffects, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.PassiveSkillInfos != null && Object.hasOwnProperty.call(message, "PassiveSkillInfos"))
            $root.SeqPassiveSkillInfo.encode(message.PassiveSkillInfos, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.PassiveSkillEndInfos != null && Object.hasOwnProperty.call(message, "PassiveSkillEndInfos"))
            $root.SeqPassiveSkillEndInfo.encode(message.PassiveSkillEndInfos, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.BuffInfos != null && Object.hasOwnProperty.call(message, "BuffInfos"))
            $root.BuffInfoSync.encode(message.BuffInfos, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.BuffEffect != null && Object.hasOwnProperty.call(message, "BuffEffect"))
            $root.BuffEffectSync.encode(message.BuffEffect, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.FakeBullets != null && message.FakeBullets.length)
            for (var i = 0; i < message.FakeBullets.length; ++i)
                $root.FakeBulletInfo.encode(message.FakeBullets[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.MagneticRideQueueChangeInfoList != null && message.MagneticRideQueueChangeInfoList.length)
            for (var i = 0; i < message.MagneticRideQueueChangeInfoList.length; ++i)
                $root.MagneticRideQueueChangeInfo.encode(message.MagneticRideQueueChangeInfoList[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified AoiSyncDelta message, length delimited. Does not implicitly {@link AoiSyncDelta.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AoiSyncDelta
     * @static
     * @param {IAoiSyncDelta} message AoiSyncDelta message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AoiSyncDelta.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AoiSyncDelta message from the specified reader or buffer.
     * @function decode
     * @memberof AoiSyncDelta
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AoiSyncDelta} AoiSyncDelta
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AoiSyncDelta.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AoiSyncDelta();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.Uuid = reader.int64();
                    break;
                }
            case 2: {
                    message.Attrs = $root.AttrCollection.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.TempAttrs = $root.TempAttrCollection.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.EventDataList = $root.EventDataList.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.BulletEvent = $root.BulletEvent.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.BodyPartInfos = $root.ActorBodyPartInfos.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.SkillEffects = $root.SkillEffect.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.PassiveSkillInfos = $root.SeqPassiveSkillInfo.decode(reader, reader.uint32());
                    break;
                }
            case 9: {
                    message.PassiveSkillEndInfos = $root.SeqPassiveSkillEndInfo.decode(reader, reader.uint32());
                    break;
                }
            case 10: {
                    message.BuffInfos = $root.BuffInfoSync.decode(reader, reader.uint32());
                    break;
                }
            case 11: {
                    message.BuffEffect = $root.BuffEffectSync.decode(reader, reader.uint32());
                    break;
                }
            case 12: {
                    if (!(message.FakeBullets && message.FakeBullets.length))
                        message.FakeBullets = [];
                    message.FakeBullets.push($root.FakeBulletInfo.decode(reader, reader.uint32()));
                    break;
                }
            case 13: {
                    if (!(message.MagneticRideQueueChangeInfoList && message.MagneticRideQueueChangeInfoList.length))
                        message.MagneticRideQueueChangeInfoList = [];
                    message.MagneticRideQueueChangeInfoList.push($root.MagneticRideQueueChangeInfo.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an AoiSyncDelta message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AoiSyncDelta
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AoiSyncDelta} AoiSyncDelta
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AoiSyncDelta.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AoiSyncDelta message.
     * @function verify
     * @memberof AoiSyncDelta
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AoiSyncDelta.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            properties._Uuid = 1;
            if (!$util.isInteger(message.Uuid) && !(message.Uuid && $util.isInteger(message.Uuid.low) && $util.isInteger(message.Uuid.high)))
                return "Uuid: integer|Long expected";
        }
        if (message.Attrs != null && message.hasOwnProperty("Attrs")) {
            properties._Attrs = 1;
            {
                var error = $root.AttrCollection.verify(message.Attrs);
                if (error)
                    return "Attrs." + error;
            }
        }
        if (message.TempAttrs != null && message.hasOwnProperty("TempAttrs")) {
            properties._TempAttrs = 1;
            {
                var error = $root.TempAttrCollection.verify(message.TempAttrs);
                if (error)
                    return "TempAttrs." + error;
            }
        }
        if (message.EventDataList != null && message.hasOwnProperty("EventDataList")) {
            properties._EventDataList = 1;
            {
                var error = $root.EventDataList.verify(message.EventDataList);
                if (error)
                    return "EventDataList." + error;
            }
        }
        if (message.BulletEvent != null && message.hasOwnProperty("BulletEvent")) {
            properties._BulletEvent = 1;
            {
                var error = $root.BulletEvent.verify(message.BulletEvent);
                if (error)
                    return "BulletEvent." + error;
            }
        }
        if (message.BodyPartInfos != null && message.hasOwnProperty("BodyPartInfos")) {
            properties._BodyPartInfos = 1;
            {
                var error = $root.ActorBodyPartInfos.verify(message.BodyPartInfos);
                if (error)
                    return "BodyPartInfos." + error;
            }
        }
        if (message.SkillEffects != null && message.hasOwnProperty("SkillEffects")) {
            properties._SkillEffects = 1;
            {
                var error = $root.SkillEffect.verify(message.SkillEffects);
                if (error)
                    return "SkillEffects." + error;
            }
        }
        if (message.PassiveSkillInfos != null && message.hasOwnProperty("PassiveSkillInfos")) {
            properties._PassiveSkillInfos = 1;
            {
                var error = $root.SeqPassiveSkillInfo.verify(message.PassiveSkillInfos);
                if (error)
                    return "PassiveSkillInfos." + error;
            }
        }
        if (message.PassiveSkillEndInfos != null && message.hasOwnProperty("PassiveSkillEndInfos")) {
            properties._PassiveSkillEndInfos = 1;
            {
                var error = $root.SeqPassiveSkillEndInfo.verify(message.PassiveSkillEndInfos);
                if (error)
                    return "PassiveSkillEndInfos." + error;
            }
        }
        if (message.BuffInfos != null && message.hasOwnProperty("BuffInfos")) {
            properties._BuffInfos = 1;
            {
                var error = $root.BuffInfoSync.verify(message.BuffInfos);
                if (error)
                    return "BuffInfos." + error;
            }
        }
        if (message.BuffEffect != null && message.hasOwnProperty("BuffEffect")) {
            properties._BuffEffect = 1;
            {
                var error = $root.BuffEffectSync.verify(message.BuffEffect);
                if (error)
                    return "BuffEffect." + error;
            }
        }
        if (message.FakeBullets != null && message.hasOwnProperty("FakeBullets")) {
            if (!Array.isArray(message.FakeBullets))
                return "FakeBullets: array expected";
            for (var i = 0; i < message.FakeBullets.length; ++i) {
                var error = $root.FakeBulletInfo.verify(message.FakeBullets[i]);
                if (error)
                    return "FakeBullets." + error;
            }
        }
        if (message.MagneticRideQueueChangeInfoList != null && message.hasOwnProperty("MagneticRideQueueChangeInfoList")) {
            if (!Array.isArray(message.MagneticRideQueueChangeInfoList))
                return "MagneticRideQueueChangeInfoList: array expected";
            for (var i = 0; i < message.MagneticRideQueueChangeInfoList.length; ++i) {
                var error = $root.MagneticRideQueueChangeInfo.verify(message.MagneticRideQueueChangeInfoList[i]);
                if (error)
                    return "MagneticRideQueueChangeInfoList." + error;
            }
        }
        return null;
    };

    /**
     * Creates an AoiSyncDelta message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AoiSyncDelta
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AoiSyncDelta} AoiSyncDelta
     */
    AoiSyncDelta.fromObject = function fromObject(object) {
        if (object instanceof $root.AoiSyncDelta)
            return object;
        var message = new $root.AoiSyncDelta();
        if (object.Uuid != null)
            if ($util.Long)
                (message.Uuid = $util.Long.fromValue(object.Uuid)).unsigned = false;
            else if (typeof object.Uuid === "string")
                message.Uuid = parseInt(object.Uuid, 10);
            else if (typeof object.Uuid === "number")
                message.Uuid = object.Uuid;
            else if (typeof object.Uuid === "object")
                message.Uuid = new $util.LongBits(object.Uuid.low >>> 0, object.Uuid.high >>> 0).toNumber();
        if (object.Attrs != null) {
            if (typeof object.Attrs !== "object")
                throw TypeError(".AoiSyncDelta.Attrs: object expected");
            message.Attrs = $root.AttrCollection.fromObject(object.Attrs);
        }
        if (object.TempAttrs != null) {
            if (typeof object.TempAttrs !== "object")
                throw TypeError(".AoiSyncDelta.TempAttrs: object expected");
            message.TempAttrs = $root.TempAttrCollection.fromObject(object.TempAttrs);
        }
        if (object.EventDataList != null) {
            if (typeof object.EventDataList !== "object")
                throw TypeError(".AoiSyncDelta.EventDataList: object expected");
            message.EventDataList = $root.EventDataList.fromObject(object.EventDataList);
        }
        if (object.BulletEvent != null) {
            if (typeof object.BulletEvent !== "object")
                throw TypeError(".AoiSyncDelta.BulletEvent: object expected");
            message.BulletEvent = $root.BulletEvent.fromObject(object.BulletEvent);
        }
        if (object.BodyPartInfos != null) {
            if (typeof object.BodyPartInfos !== "object")
                throw TypeError(".AoiSyncDelta.BodyPartInfos: object expected");
            message.BodyPartInfos = $root.ActorBodyPartInfos.fromObject(object.BodyPartInfos);
        }
        if (object.SkillEffects != null) {
            if (typeof object.SkillEffects !== "object")
                throw TypeError(".AoiSyncDelta.SkillEffects: object expected");
            message.SkillEffects = $root.SkillEffect.fromObject(object.SkillEffects);
        }
        if (object.PassiveSkillInfos != null) {
            if (typeof object.PassiveSkillInfos !== "object")
                throw TypeError(".AoiSyncDelta.PassiveSkillInfos: object expected");
            message.PassiveSkillInfos = $root.SeqPassiveSkillInfo.fromObject(object.PassiveSkillInfos);
        }
        if (object.PassiveSkillEndInfos != null) {
            if (typeof object.PassiveSkillEndInfos !== "object")
                throw TypeError(".AoiSyncDelta.PassiveSkillEndInfos: object expected");
            message.PassiveSkillEndInfos = $root.SeqPassiveSkillEndInfo.fromObject(object.PassiveSkillEndInfos);
        }
        if (object.BuffInfos != null) {
            if (typeof object.BuffInfos !== "object")
                throw TypeError(".AoiSyncDelta.BuffInfos: object expected");
            message.BuffInfos = $root.BuffInfoSync.fromObject(object.BuffInfos);
        }
        if (object.BuffEffect != null) {
            if (typeof object.BuffEffect !== "object")
                throw TypeError(".AoiSyncDelta.BuffEffect: object expected");
            message.BuffEffect = $root.BuffEffectSync.fromObject(object.BuffEffect);
        }
        if (object.FakeBullets) {
            if (!Array.isArray(object.FakeBullets))
                throw TypeError(".AoiSyncDelta.FakeBullets: array expected");
            message.FakeBullets = [];
            for (var i = 0; i < object.FakeBullets.length; ++i) {
                if (typeof object.FakeBullets[i] !== "object")
                    throw TypeError(".AoiSyncDelta.FakeBullets: object expected");
                message.FakeBullets[i] = $root.FakeBulletInfo.fromObject(object.FakeBullets[i]);
            }
        }
        if (object.MagneticRideQueueChangeInfoList) {
            if (!Array.isArray(object.MagneticRideQueueChangeInfoList))
                throw TypeError(".AoiSyncDelta.MagneticRideQueueChangeInfoList: array expected");
            message.MagneticRideQueueChangeInfoList = [];
            for (var i = 0; i < object.MagneticRideQueueChangeInfoList.length; ++i) {
                if (typeof object.MagneticRideQueueChangeInfoList[i] !== "object")
                    throw TypeError(".AoiSyncDelta.MagneticRideQueueChangeInfoList: object expected");
                message.MagneticRideQueueChangeInfoList[i] = $root.MagneticRideQueueChangeInfo.fromObject(object.MagneticRideQueueChangeInfoList[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from an AoiSyncDelta message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AoiSyncDelta
     * @static
     * @param {AoiSyncDelta} message AoiSyncDelta
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AoiSyncDelta.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.FakeBullets = [];
            object.MagneticRideQueueChangeInfoList = [];
        }
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            if (typeof message.Uuid === "number")
                object.Uuid = options.longs === String ? String(message.Uuid) : message.Uuid;
            else
                object.Uuid = options.longs === String ? $util.Long.prototype.toString.call(message.Uuid) : options.longs === Number ? new $util.LongBits(message.Uuid.low >>> 0, message.Uuid.high >>> 0).toNumber() : message.Uuid;
            if (options.oneofs)
                object._Uuid = "Uuid";
        }
        if (message.Attrs != null && message.hasOwnProperty("Attrs")) {
            object.Attrs = $root.AttrCollection.toObject(message.Attrs, options);
            if (options.oneofs)
                object._Attrs = "Attrs";
        }
        if (message.TempAttrs != null && message.hasOwnProperty("TempAttrs")) {
            object.TempAttrs = $root.TempAttrCollection.toObject(message.TempAttrs, options);
            if (options.oneofs)
                object._TempAttrs = "TempAttrs";
        }
        if (message.EventDataList != null && message.hasOwnProperty("EventDataList")) {
            object.EventDataList = $root.EventDataList.toObject(message.EventDataList, options);
            if (options.oneofs)
                object._EventDataList = "EventDataList";
        }
        if (message.BulletEvent != null && message.hasOwnProperty("BulletEvent")) {
            object.BulletEvent = $root.BulletEvent.toObject(message.BulletEvent, options);
            if (options.oneofs)
                object._BulletEvent = "BulletEvent";
        }
        if (message.BodyPartInfos != null && message.hasOwnProperty("BodyPartInfos")) {
            object.BodyPartInfos = $root.ActorBodyPartInfos.toObject(message.BodyPartInfos, options);
            if (options.oneofs)
                object._BodyPartInfos = "BodyPartInfos";
        }
        if (message.SkillEffects != null && message.hasOwnProperty("SkillEffects")) {
            object.SkillEffects = $root.SkillEffect.toObject(message.SkillEffects, options);
            if (options.oneofs)
                object._SkillEffects = "SkillEffects";
        }
        if (message.PassiveSkillInfos != null && message.hasOwnProperty("PassiveSkillInfos")) {
            object.PassiveSkillInfos = $root.SeqPassiveSkillInfo.toObject(message.PassiveSkillInfos, options);
            if (options.oneofs)
                object._PassiveSkillInfos = "PassiveSkillInfos";
        }
        if (message.PassiveSkillEndInfos != null && message.hasOwnProperty("PassiveSkillEndInfos")) {
            object.PassiveSkillEndInfos = $root.SeqPassiveSkillEndInfo.toObject(message.PassiveSkillEndInfos, options);
            if (options.oneofs)
                object._PassiveSkillEndInfos = "PassiveSkillEndInfos";
        }
        if (message.BuffInfos != null && message.hasOwnProperty("BuffInfos")) {
            object.BuffInfos = $root.BuffInfoSync.toObject(message.BuffInfos, options);
            if (options.oneofs)
                object._BuffInfos = "BuffInfos";
        }
        if (message.BuffEffect != null && message.hasOwnProperty("BuffEffect")) {
            object.BuffEffect = $root.BuffEffectSync.toObject(message.BuffEffect, options);
            if (options.oneofs)
                object._BuffEffect = "BuffEffect";
        }
        if (message.FakeBullets && message.FakeBullets.length) {
            object.FakeBullets = [];
            for (var j = 0; j < message.FakeBullets.length; ++j)
                object.FakeBullets[j] = $root.FakeBulletInfo.toObject(message.FakeBullets[j], options);
        }
        if (message.MagneticRideQueueChangeInfoList && message.MagneticRideQueueChangeInfoList.length) {
            object.MagneticRideQueueChangeInfoList = [];
            for (var j = 0; j < message.MagneticRideQueueChangeInfoList.length; ++j)
                object.MagneticRideQueueChangeInfoList[j] = $root.MagneticRideQueueChangeInfo.toObject(message.MagneticRideQueueChangeInfoList[j], options);
        }
        return object;
    };

    /**
     * Converts this AoiSyncDelta to JSON.
     * @function toJSON
     * @memberof AoiSyncDelta
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AoiSyncDelta.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for AoiSyncDelta
     * @function getTypeUrl
     * @memberof AoiSyncDelta
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    AoiSyncDelta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/AoiSyncDelta";
    };

    return AoiSyncDelta;
})();

/**
 * ESkillCDType enum.
 * @exports ESkillCDType
 * @enum {number}
 * @property {number} ESkillCDNormal=0 ESkillCDNormal value
 * @property {number} ESkillCDCharge=1 ESkillCDCharge value
 */
$root.ESkillCDType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ESkillCDNormal"] = 0;
    values[valuesById[1] = "ESkillCDCharge"] = 1;
    return values;
})();

$root.SkillCD = (function() {

    /**
     * Properties of a SkillCD.
     * @exports ISkillCD
     * @interface ISkillCD
     * @property {number|null} [SkillLevelId] SkillCD SkillLevelId
     * @property {number|Long|null} [BeginTime] SkillCD BeginTime
     * @property {number|null} [Duration] SkillCD Duration
     * @property {ESkillCDType|null} [SkillCDType] SkillCD SkillCDType
     * @property {number|null} [ValidCDTime] SkillCD ValidCDTime
     */

    /**
     * Constructs a new SkillCD.
     * @exports SkillCD
     * @classdesc Represents a SkillCD.
     * @implements ISkillCD
     * @constructor
     * @param {ISkillCD=} [properties] Properties to set
     */
    function SkillCD(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SkillCD SkillLevelId.
     * @member {number|null|undefined} SkillLevelId
     * @memberof SkillCD
     * @instance
     */
    SkillCD.prototype.SkillLevelId = null;

    /**
     * SkillCD BeginTime.
     * @member {number|Long|null|undefined} BeginTime
     * @memberof SkillCD
     * @instance
     */
    SkillCD.prototype.BeginTime = null;

    /**
     * SkillCD Duration.
     * @member {number|null|undefined} Duration
     * @memberof SkillCD
     * @instance
     */
    SkillCD.prototype.Duration = null;

    /**
     * SkillCD SkillCDType.
     * @member {ESkillCDType|null|undefined} SkillCDType
     * @memberof SkillCD
     * @instance
     */
    SkillCD.prototype.SkillCDType = null;

    /**
     * SkillCD ValidCDTime.
     * @member {number|null|undefined} ValidCDTime
     * @memberof SkillCD
     * @instance
     */
    SkillCD.prototype.ValidCDTime = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * SkillCD _SkillLevelId.
     * @member {"SkillLevelId"|undefined} _SkillLevelId
     * @memberof SkillCD
     * @instance
     */
    Object.defineProperty(SkillCD.prototype, "_SkillLevelId", {
        get: $util.oneOfGetter($oneOfFields = ["SkillLevelId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SkillCD _BeginTime.
     * @member {"BeginTime"|undefined} _BeginTime
     * @memberof SkillCD
     * @instance
     */
    Object.defineProperty(SkillCD.prototype, "_BeginTime", {
        get: $util.oneOfGetter($oneOfFields = ["BeginTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SkillCD _Duration.
     * @member {"Duration"|undefined} _Duration
     * @memberof SkillCD
     * @instance
     */
    Object.defineProperty(SkillCD.prototype, "_Duration", {
        get: $util.oneOfGetter($oneOfFields = ["Duration"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SkillCD _SkillCDType.
     * @member {"SkillCDType"|undefined} _SkillCDType
     * @memberof SkillCD
     * @instance
     */
    Object.defineProperty(SkillCD.prototype, "_SkillCDType", {
        get: $util.oneOfGetter($oneOfFields = ["SkillCDType"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * SkillCD _ValidCDTime.
     * @member {"ValidCDTime"|undefined} _ValidCDTime
     * @memberof SkillCD
     * @instance
     */
    Object.defineProperty(SkillCD.prototype, "_ValidCDTime", {
        get: $util.oneOfGetter($oneOfFields = ["ValidCDTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new SkillCD instance using the specified properties.
     * @function create
     * @memberof SkillCD
     * @static
     * @param {ISkillCD=} [properties] Properties to set
     * @returns {SkillCD} SkillCD instance
     */
    SkillCD.create = function create(properties) {
        return new SkillCD(properties);
    };

    /**
     * Encodes the specified SkillCD message. Does not implicitly {@link SkillCD.verify|verify} messages.
     * @function encode
     * @memberof SkillCD
     * @static
     * @param {ISkillCD} message SkillCD message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SkillCD.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.SkillLevelId != null && Object.hasOwnProperty.call(message, "SkillLevelId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.SkillLevelId);
        if (message.BeginTime != null && Object.hasOwnProperty.call(message, "BeginTime"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.BeginTime);
        if (message.Duration != null && Object.hasOwnProperty.call(message, "Duration"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Duration);
        if (message.SkillCDType != null && Object.hasOwnProperty.call(message, "SkillCDType"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.SkillCDType);
        if (message.ValidCDTime != null && Object.hasOwnProperty.call(message, "ValidCDTime"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.ValidCDTime);
        return writer;
    };

    /**
     * Encodes the specified SkillCD message, length delimited. Does not implicitly {@link SkillCD.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SkillCD
     * @static
     * @param {ISkillCD} message SkillCD message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SkillCD.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SkillCD message from the specified reader or buffer.
     * @function decode
     * @memberof SkillCD
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SkillCD} SkillCD
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SkillCD.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SkillCD();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.SkillLevelId = reader.int32();
                    break;
                }
            case 2: {
                    message.BeginTime = reader.int64();
                    break;
                }
            case 3: {
                    message.Duration = reader.int32();
                    break;
                }
            case 4: {
                    message.SkillCDType = reader.int32();
                    break;
                }
            case 5: {
                    message.ValidCDTime = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SkillCD message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SkillCD
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SkillCD} SkillCD
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SkillCD.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SkillCD message.
     * @function verify
     * @memberof SkillCD
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SkillCD.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.SkillLevelId != null && message.hasOwnProperty("SkillLevelId")) {
            properties._SkillLevelId = 1;
            if (!$util.isInteger(message.SkillLevelId))
                return "SkillLevelId: integer expected";
        }
        if (message.BeginTime != null && message.hasOwnProperty("BeginTime")) {
            properties._BeginTime = 1;
            if (!$util.isInteger(message.BeginTime) && !(message.BeginTime && $util.isInteger(message.BeginTime.low) && $util.isInteger(message.BeginTime.high)))
                return "BeginTime: integer|Long expected";
        }
        if (message.Duration != null && message.hasOwnProperty("Duration")) {
            properties._Duration = 1;
            if (!$util.isInteger(message.Duration))
                return "Duration: integer expected";
        }
        if (message.SkillCDType != null && message.hasOwnProperty("SkillCDType")) {
            properties._SkillCDType = 1;
            switch (message.SkillCDType) {
            default:
                return "SkillCDType: enum value expected";
            case 0:
            case 1:
                break;
            }
        }
        if (message.ValidCDTime != null && message.hasOwnProperty("ValidCDTime")) {
            properties._ValidCDTime = 1;
            if (!$util.isInteger(message.ValidCDTime))
                return "ValidCDTime: integer expected";
        }
        return null;
    };

    /**
     * Creates a SkillCD message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SkillCD
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SkillCD} SkillCD
     */
    SkillCD.fromObject = function fromObject(object) {
        if (object instanceof $root.SkillCD)
            return object;
        var message = new $root.SkillCD();
        if (object.SkillLevelId != null)
            message.SkillLevelId = object.SkillLevelId | 0;
        if (object.BeginTime != null)
            if ($util.Long)
                (message.BeginTime = $util.Long.fromValue(object.BeginTime)).unsigned = false;
            else if (typeof object.BeginTime === "string")
                message.BeginTime = parseInt(object.BeginTime, 10);
            else if (typeof object.BeginTime === "number")
                message.BeginTime = object.BeginTime;
            else if (typeof object.BeginTime === "object")
                message.BeginTime = new $util.LongBits(object.BeginTime.low >>> 0, object.BeginTime.high >>> 0).toNumber();
        if (object.Duration != null)
            message.Duration = object.Duration | 0;
        switch (object.SkillCDType) {
        default:
            if (typeof object.SkillCDType === "number") {
                message.SkillCDType = object.SkillCDType;
                break;
            }
            break;
        case "ESkillCDNormal":
        case 0:
            message.SkillCDType = 0;
            break;
        case "ESkillCDCharge":
        case 1:
            message.SkillCDType = 1;
            break;
        }
        if (object.ValidCDTime != null)
            message.ValidCDTime = object.ValidCDTime | 0;
        return message;
    };

    /**
     * Creates a plain object from a SkillCD message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SkillCD
     * @static
     * @param {SkillCD} message SkillCD
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SkillCD.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.SkillLevelId != null && message.hasOwnProperty("SkillLevelId")) {
            object.SkillLevelId = message.SkillLevelId;
            if (options.oneofs)
                object._SkillLevelId = "SkillLevelId";
        }
        if (message.BeginTime != null && message.hasOwnProperty("BeginTime")) {
            if (typeof message.BeginTime === "number")
                object.BeginTime = options.longs === String ? String(message.BeginTime) : message.BeginTime;
            else
                object.BeginTime = options.longs === String ? $util.Long.prototype.toString.call(message.BeginTime) : options.longs === Number ? new $util.LongBits(message.BeginTime.low >>> 0, message.BeginTime.high >>> 0).toNumber() : message.BeginTime;
            if (options.oneofs)
                object._BeginTime = "BeginTime";
        }
        if (message.Duration != null && message.hasOwnProperty("Duration")) {
            object.Duration = message.Duration;
            if (options.oneofs)
                object._Duration = "Duration";
        }
        if (message.SkillCDType != null && message.hasOwnProperty("SkillCDType")) {
            object.SkillCDType = options.enums === String ? $root.ESkillCDType[message.SkillCDType] === undefined ? message.SkillCDType : $root.ESkillCDType[message.SkillCDType] : message.SkillCDType;
            if (options.oneofs)
                object._SkillCDType = "SkillCDType";
        }
        if (message.ValidCDTime != null && message.hasOwnProperty("ValidCDTime")) {
            object.ValidCDTime = message.ValidCDTime;
            if (options.oneofs)
                object._ValidCDTime = "ValidCDTime";
        }
        return object;
    };

    /**
     * Converts this SkillCD to JSON.
     * @function toJSON
     * @memberof SkillCD
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SkillCD.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SkillCD
     * @function getTypeUrl
     * @memberof SkillCD
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SkillCD.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SkillCD";
    };

    return SkillCD;
})();

$root.FightResCD = (function() {

    /**
     * Properties of a FightResCD.
     * @exports IFightResCD
     * @interface IFightResCD
     * @property {number|null} [ResId] FightResCD ResId
     * @property {number|Long|null} [BeginTime] FightResCD BeginTime
     * @property {number|null} [Duration] FightResCD Duration
     * @property {number|null} [ValidCDTime] FightResCD ValidCDTime
     */

    /**
     * Constructs a new FightResCD.
     * @exports FightResCD
     * @classdesc Represents a FightResCD.
     * @implements IFightResCD
     * @constructor
     * @param {IFightResCD=} [properties] Properties to set
     */
    function FightResCD(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FightResCD ResId.
     * @member {number|null|undefined} ResId
     * @memberof FightResCD
     * @instance
     */
    FightResCD.prototype.ResId = null;

    /**
     * FightResCD BeginTime.
     * @member {number|Long|null|undefined} BeginTime
     * @memberof FightResCD
     * @instance
     */
    FightResCD.prototype.BeginTime = null;

    /**
     * FightResCD Duration.
     * @member {number|null|undefined} Duration
     * @memberof FightResCD
     * @instance
     */
    FightResCD.prototype.Duration = null;

    /**
     * FightResCD ValidCDTime.
     * @member {number|null|undefined} ValidCDTime
     * @memberof FightResCD
     * @instance
     */
    FightResCD.prototype.ValidCDTime = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * FightResCD _ResId.
     * @member {"ResId"|undefined} _ResId
     * @memberof FightResCD
     * @instance
     */
    Object.defineProperty(FightResCD.prototype, "_ResId", {
        get: $util.oneOfGetter($oneOfFields = ["ResId"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FightResCD _BeginTime.
     * @member {"BeginTime"|undefined} _BeginTime
     * @memberof FightResCD
     * @instance
     */
    Object.defineProperty(FightResCD.prototype, "_BeginTime", {
        get: $util.oneOfGetter($oneOfFields = ["BeginTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FightResCD _Duration.
     * @member {"Duration"|undefined} _Duration
     * @memberof FightResCD
     * @instance
     */
    Object.defineProperty(FightResCD.prototype, "_Duration", {
        get: $util.oneOfGetter($oneOfFields = ["Duration"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * FightResCD _ValidCDTime.
     * @member {"ValidCDTime"|undefined} _ValidCDTime
     * @memberof FightResCD
     * @instance
     */
    Object.defineProperty(FightResCD.prototype, "_ValidCDTime", {
        get: $util.oneOfGetter($oneOfFields = ["ValidCDTime"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new FightResCD instance using the specified properties.
     * @function create
     * @memberof FightResCD
     * @static
     * @param {IFightResCD=} [properties] Properties to set
     * @returns {FightResCD} FightResCD instance
     */
    FightResCD.create = function create(properties) {
        return new FightResCD(properties);
    };

    /**
     * Encodes the specified FightResCD message. Does not implicitly {@link FightResCD.verify|verify} messages.
     * @function encode
     * @memberof FightResCD
     * @static
     * @param {IFightResCD} message FightResCD message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FightResCD.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ResId != null && Object.hasOwnProperty.call(message, "ResId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ResId);
        if (message.BeginTime != null && Object.hasOwnProperty.call(message, "BeginTime"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.BeginTime);
        if (message.Duration != null && Object.hasOwnProperty.call(message, "Duration"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Duration);
        if (message.ValidCDTime != null && Object.hasOwnProperty.call(message, "ValidCDTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.ValidCDTime);
        return writer;
    };

    /**
     * Encodes the specified FightResCD message, length delimited. Does not implicitly {@link FightResCD.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FightResCD
     * @static
     * @param {IFightResCD} message FightResCD message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FightResCD.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FightResCD message from the specified reader or buffer.
     * @function decode
     * @memberof FightResCD
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FightResCD} FightResCD
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FightResCD.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FightResCD();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.ResId = reader.int32();
                    break;
                }
            case 2: {
                    message.BeginTime = reader.int64();
                    break;
                }
            case 3: {
                    message.Duration = reader.int32();
                    break;
                }
            case 4: {
                    message.ValidCDTime = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FightResCD message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FightResCD
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FightResCD} FightResCD
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FightResCD.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FightResCD message.
     * @function verify
     * @memberof FightResCD
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FightResCD.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.ResId != null && message.hasOwnProperty("ResId")) {
            properties._ResId = 1;
            if (!$util.isInteger(message.ResId))
                return "ResId: integer expected";
        }
        if (message.BeginTime != null && message.hasOwnProperty("BeginTime")) {
            properties._BeginTime = 1;
            if (!$util.isInteger(message.BeginTime) && !(message.BeginTime && $util.isInteger(message.BeginTime.low) && $util.isInteger(message.BeginTime.high)))
                return "BeginTime: integer|Long expected";
        }
        if (message.Duration != null && message.hasOwnProperty("Duration")) {
            properties._Duration = 1;
            if (!$util.isInteger(message.Duration))
                return "Duration: integer expected";
        }
        if (message.ValidCDTime != null && message.hasOwnProperty("ValidCDTime")) {
            properties._ValidCDTime = 1;
            if (!$util.isInteger(message.ValidCDTime))
                return "ValidCDTime: integer expected";
        }
        return null;
    };

    /**
     * Creates a FightResCD message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FightResCD
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FightResCD} FightResCD
     */
    FightResCD.fromObject = function fromObject(object) {
        if (object instanceof $root.FightResCD)
            return object;
        var message = new $root.FightResCD();
        if (object.ResId != null)
            message.ResId = object.ResId | 0;
        if (object.BeginTime != null)
            if ($util.Long)
                (message.BeginTime = $util.Long.fromValue(object.BeginTime)).unsigned = false;
            else if (typeof object.BeginTime === "string")
                message.BeginTime = parseInt(object.BeginTime, 10);
            else if (typeof object.BeginTime === "number")
                message.BeginTime = object.BeginTime;
            else if (typeof object.BeginTime === "object")
                message.BeginTime = new $util.LongBits(object.BeginTime.low >>> 0, object.BeginTime.high >>> 0).toNumber();
        if (object.Duration != null)
            message.Duration = object.Duration | 0;
        if (object.ValidCDTime != null)
            message.ValidCDTime = object.ValidCDTime | 0;
        return message;
    };

    /**
     * Creates a plain object from a FightResCD message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FightResCD
     * @static
     * @param {FightResCD} message FightResCD
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FightResCD.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.ResId != null && message.hasOwnProperty("ResId")) {
            object.ResId = message.ResId;
            if (options.oneofs)
                object._ResId = "ResId";
        }
        if (message.BeginTime != null && message.hasOwnProperty("BeginTime")) {
            if (typeof message.BeginTime === "number")
                object.BeginTime = options.longs === String ? String(message.BeginTime) : message.BeginTime;
            else
                object.BeginTime = options.longs === String ? $util.Long.prototype.toString.call(message.BeginTime) : options.longs === Number ? new $util.LongBits(message.BeginTime.low >>> 0, message.BeginTime.high >>> 0).toNumber() : message.BeginTime;
            if (options.oneofs)
                object._BeginTime = "BeginTime";
        }
        if (message.Duration != null && message.hasOwnProperty("Duration")) {
            object.Duration = message.Duration;
            if (options.oneofs)
                object._Duration = "Duration";
        }
        if (message.ValidCDTime != null && message.hasOwnProperty("ValidCDTime")) {
            object.ValidCDTime = message.ValidCDTime;
            if (options.oneofs)
                object._ValidCDTime = "ValidCDTime";
        }
        return object;
    };

    /**
     * Converts this FightResCD to JSON.
     * @function toJSON
     * @memberof FightResCD
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FightResCD.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FightResCD
     * @function getTypeUrl
     * @memberof FightResCD
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FightResCD.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FightResCD";
    };

    return FightResCD;
})();

$root.AoiSyncToMeDelta = (function() {

    /**
     * Properties of an AoiSyncToMeDelta.
     * @exports IAoiSyncToMeDelta
     * @interface IAoiSyncToMeDelta
     * @property {IAoiSyncDelta|null} [BaseDelta] AoiSyncToMeDelta BaseDelta
     * @property {Array.<number|Long>|null} [SyncHateIds] AoiSyncToMeDelta SyncHateIds
     * @property {Array.<ISkillCD>|null} [SyncSkillCDs] AoiSyncToMeDelta SyncSkillCDs
     * @property {Array.<IFightResCD>|null} [FightResCDs] AoiSyncToMeDelta FightResCDs
     * @property {number|Long|null} [Uuid] AoiSyncToMeDelta Uuid
     */

    /**
     * Constructs a new AoiSyncToMeDelta.
     * @exports AoiSyncToMeDelta
     * @classdesc Represents an AoiSyncToMeDelta.
     * @implements IAoiSyncToMeDelta
     * @constructor
     * @param {IAoiSyncToMeDelta=} [properties] Properties to set
     */
    function AoiSyncToMeDelta(properties) {
        this.SyncHateIds = [];
        this.SyncSkillCDs = [];
        this.FightResCDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * AoiSyncToMeDelta BaseDelta.
     * @member {IAoiSyncDelta|null|undefined} BaseDelta
     * @memberof AoiSyncToMeDelta
     * @instance
     */
    AoiSyncToMeDelta.prototype.BaseDelta = null;

    /**
     * AoiSyncToMeDelta SyncHateIds.
     * @member {Array.<number|Long>} SyncHateIds
     * @memberof AoiSyncToMeDelta
     * @instance
     */
    AoiSyncToMeDelta.prototype.SyncHateIds = $util.emptyArray;

    /**
     * AoiSyncToMeDelta SyncSkillCDs.
     * @member {Array.<ISkillCD>} SyncSkillCDs
     * @memberof AoiSyncToMeDelta
     * @instance
     */
    AoiSyncToMeDelta.prototype.SyncSkillCDs = $util.emptyArray;

    /**
     * AoiSyncToMeDelta FightResCDs.
     * @member {Array.<IFightResCD>} FightResCDs
     * @memberof AoiSyncToMeDelta
     * @instance
     */
    AoiSyncToMeDelta.prototype.FightResCDs = $util.emptyArray;

    /**
     * AoiSyncToMeDelta Uuid.
     * @member {number|Long|null|undefined} Uuid
     * @memberof AoiSyncToMeDelta
     * @instance
     */
    AoiSyncToMeDelta.prototype.Uuid = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * AoiSyncToMeDelta _BaseDelta.
     * @member {"BaseDelta"|undefined} _BaseDelta
     * @memberof AoiSyncToMeDelta
     * @instance
     */
    Object.defineProperty(AoiSyncToMeDelta.prototype, "_BaseDelta", {
        get: $util.oneOfGetter($oneOfFields = ["BaseDelta"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * AoiSyncToMeDelta _Uuid.
     * @member {"Uuid"|undefined} _Uuid
     * @memberof AoiSyncToMeDelta
     * @instance
     */
    Object.defineProperty(AoiSyncToMeDelta.prototype, "_Uuid", {
        get: $util.oneOfGetter($oneOfFields = ["Uuid"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new AoiSyncToMeDelta instance using the specified properties.
     * @function create
     * @memberof AoiSyncToMeDelta
     * @static
     * @param {IAoiSyncToMeDelta=} [properties] Properties to set
     * @returns {AoiSyncToMeDelta} AoiSyncToMeDelta instance
     */
    AoiSyncToMeDelta.create = function create(properties) {
        return new AoiSyncToMeDelta(properties);
    };

    /**
     * Encodes the specified AoiSyncToMeDelta message. Does not implicitly {@link AoiSyncToMeDelta.verify|verify} messages.
     * @function encode
     * @memberof AoiSyncToMeDelta
     * @static
     * @param {IAoiSyncToMeDelta} message AoiSyncToMeDelta message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AoiSyncToMeDelta.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.BaseDelta != null && Object.hasOwnProperty.call(message, "BaseDelta"))
            $root.AoiSyncDelta.encode(message.BaseDelta, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.SyncHateIds != null && message.SyncHateIds.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.SyncHateIds.length; ++i)
                writer.int64(message.SyncHateIds[i]);
            writer.ldelim();
        }
        if (message.SyncSkillCDs != null && message.SyncSkillCDs.length)
            for (var i = 0; i < message.SyncSkillCDs.length; ++i)
                $root.SkillCD.encode(message.SyncSkillCDs[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.FightResCDs != null && message.FightResCDs.length)
            for (var i = 0; i < message.FightResCDs.length; ++i)
                $root.FightResCD.encode(message.FightResCDs[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.Uuid);
        return writer;
    };

    /**
     * Encodes the specified AoiSyncToMeDelta message, length delimited. Does not implicitly {@link AoiSyncToMeDelta.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AoiSyncToMeDelta
     * @static
     * @param {IAoiSyncToMeDelta} message AoiSyncToMeDelta message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AoiSyncToMeDelta.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AoiSyncToMeDelta message from the specified reader or buffer.
     * @function decode
     * @memberof AoiSyncToMeDelta
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AoiSyncToMeDelta} AoiSyncToMeDelta
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AoiSyncToMeDelta.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AoiSyncToMeDelta();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.BaseDelta = $root.AoiSyncDelta.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    if (!(message.SyncHateIds && message.SyncHateIds.length))
                        message.SyncHateIds = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.SyncHateIds.push(reader.int64());
                    } else
                        message.SyncHateIds.push(reader.int64());
                    break;
                }
            case 3: {
                    if (!(message.SyncSkillCDs && message.SyncSkillCDs.length))
                        message.SyncSkillCDs = [];
                    message.SyncSkillCDs.push($root.SkillCD.decode(reader, reader.uint32()));
                    break;
                }
            case 4: {
                    if (!(message.FightResCDs && message.FightResCDs.length))
                        message.FightResCDs = [];
                    message.FightResCDs.push($root.FightResCD.decode(reader, reader.uint32()));
                    break;
                }
            case 5: {
                    message.Uuid = reader.int64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an AoiSyncToMeDelta message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AoiSyncToMeDelta
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AoiSyncToMeDelta} AoiSyncToMeDelta
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AoiSyncToMeDelta.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AoiSyncToMeDelta message.
     * @function verify
     * @memberof AoiSyncToMeDelta
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AoiSyncToMeDelta.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.BaseDelta != null && message.hasOwnProperty("BaseDelta")) {
            properties._BaseDelta = 1;
            {
                var error = $root.AoiSyncDelta.verify(message.BaseDelta);
                if (error)
                    return "BaseDelta." + error;
            }
        }
        if (message.SyncHateIds != null && message.hasOwnProperty("SyncHateIds")) {
            if (!Array.isArray(message.SyncHateIds))
                return "SyncHateIds: array expected";
            for (var i = 0; i < message.SyncHateIds.length; ++i)
                if (!$util.isInteger(message.SyncHateIds[i]) && !(message.SyncHateIds[i] && $util.isInteger(message.SyncHateIds[i].low) && $util.isInteger(message.SyncHateIds[i].high)))
                    return "SyncHateIds: integer|Long[] expected";
        }
        if (message.SyncSkillCDs != null && message.hasOwnProperty("SyncSkillCDs")) {
            if (!Array.isArray(message.SyncSkillCDs))
                return "SyncSkillCDs: array expected";
            for (var i = 0; i < message.SyncSkillCDs.length; ++i) {
                var error = $root.SkillCD.verify(message.SyncSkillCDs[i]);
                if (error)
                    return "SyncSkillCDs." + error;
            }
        }
        if (message.FightResCDs != null && message.hasOwnProperty("FightResCDs")) {
            if (!Array.isArray(message.FightResCDs))
                return "FightResCDs: array expected";
            for (var i = 0; i < message.FightResCDs.length; ++i) {
                var error = $root.FightResCD.verify(message.FightResCDs[i]);
                if (error)
                    return "FightResCDs." + error;
            }
        }
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            properties._Uuid = 1;
            if (!$util.isInteger(message.Uuid) && !(message.Uuid && $util.isInteger(message.Uuid.low) && $util.isInteger(message.Uuid.high)))
                return "Uuid: integer|Long expected";
        }
        return null;
    };

    /**
     * Creates an AoiSyncToMeDelta message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AoiSyncToMeDelta
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AoiSyncToMeDelta} AoiSyncToMeDelta
     */
    AoiSyncToMeDelta.fromObject = function fromObject(object) {
        if (object instanceof $root.AoiSyncToMeDelta)
            return object;
        var message = new $root.AoiSyncToMeDelta();
        if (object.BaseDelta != null) {
            if (typeof object.BaseDelta !== "object")
                throw TypeError(".AoiSyncToMeDelta.BaseDelta: object expected");
            message.BaseDelta = $root.AoiSyncDelta.fromObject(object.BaseDelta);
        }
        if (object.SyncHateIds) {
            if (!Array.isArray(object.SyncHateIds))
                throw TypeError(".AoiSyncToMeDelta.SyncHateIds: array expected");
            message.SyncHateIds = [];
            for (var i = 0; i < object.SyncHateIds.length; ++i)
                if ($util.Long)
                    (message.SyncHateIds[i] = $util.Long.fromValue(object.SyncHateIds[i])).unsigned = false;
                else if (typeof object.SyncHateIds[i] === "string")
                    message.SyncHateIds[i] = parseInt(object.SyncHateIds[i], 10);
                else if (typeof object.SyncHateIds[i] === "number")
                    message.SyncHateIds[i] = object.SyncHateIds[i];
                else if (typeof object.SyncHateIds[i] === "object")
                    message.SyncHateIds[i] = new $util.LongBits(object.SyncHateIds[i].low >>> 0, object.SyncHateIds[i].high >>> 0).toNumber();
        }
        if (object.SyncSkillCDs) {
            if (!Array.isArray(object.SyncSkillCDs))
                throw TypeError(".AoiSyncToMeDelta.SyncSkillCDs: array expected");
            message.SyncSkillCDs = [];
            for (var i = 0; i < object.SyncSkillCDs.length; ++i) {
                if (typeof object.SyncSkillCDs[i] !== "object")
                    throw TypeError(".AoiSyncToMeDelta.SyncSkillCDs: object expected");
                message.SyncSkillCDs[i] = $root.SkillCD.fromObject(object.SyncSkillCDs[i]);
            }
        }
        if (object.FightResCDs) {
            if (!Array.isArray(object.FightResCDs))
                throw TypeError(".AoiSyncToMeDelta.FightResCDs: array expected");
            message.FightResCDs = [];
            for (var i = 0; i < object.FightResCDs.length; ++i) {
                if (typeof object.FightResCDs[i] !== "object")
                    throw TypeError(".AoiSyncToMeDelta.FightResCDs: object expected");
                message.FightResCDs[i] = $root.FightResCD.fromObject(object.FightResCDs[i]);
            }
        }
        if (object.Uuid != null)
            if ($util.Long)
                (message.Uuid = $util.Long.fromValue(object.Uuid)).unsigned = false;
            else if (typeof object.Uuid === "string")
                message.Uuid = parseInt(object.Uuid, 10);
            else if (typeof object.Uuid === "number")
                message.Uuid = object.Uuid;
            else if (typeof object.Uuid === "object")
                message.Uuid = new $util.LongBits(object.Uuid.low >>> 0, object.Uuid.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from an AoiSyncToMeDelta message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AoiSyncToMeDelta
     * @static
     * @param {AoiSyncToMeDelta} message AoiSyncToMeDelta
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AoiSyncToMeDelta.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.SyncHateIds = [];
            object.SyncSkillCDs = [];
            object.FightResCDs = [];
        }
        if (message.BaseDelta != null && message.hasOwnProperty("BaseDelta")) {
            object.BaseDelta = $root.AoiSyncDelta.toObject(message.BaseDelta, options);
            if (options.oneofs)
                object._BaseDelta = "BaseDelta";
        }
        if (message.SyncHateIds && message.SyncHateIds.length) {
            object.SyncHateIds = [];
            for (var j = 0; j < message.SyncHateIds.length; ++j)
                if (typeof message.SyncHateIds[j] === "number")
                    object.SyncHateIds[j] = options.longs === String ? String(message.SyncHateIds[j]) : message.SyncHateIds[j];
                else
                    object.SyncHateIds[j] = options.longs === String ? $util.Long.prototype.toString.call(message.SyncHateIds[j]) : options.longs === Number ? new $util.LongBits(message.SyncHateIds[j].low >>> 0, message.SyncHateIds[j].high >>> 0).toNumber() : message.SyncHateIds[j];
        }
        if (message.SyncSkillCDs && message.SyncSkillCDs.length) {
            object.SyncSkillCDs = [];
            for (var j = 0; j < message.SyncSkillCDs.length; ++j)
                object.SyncSkillCDs[j] = $root.SkillCD.toObject(message.SyncSkillCDs[j], options);
        }
        if (message.FightResCDs && message.FightResCDs.length) {
            object.FightResCDs = [];
            for (var j = 0; j < message.FightResCDs.length; ++j)
                object.FightResCDs[j] = $root.FightResCD.toObject(message.FightResCDs[j], options);
        }
        if (message.Uuid != null && message.hasOwnProperty("Uuid")) {
            if (typeof message.Uuid === "number")
                object.Uuid = options.longs === String ? String(message.Uuid) : message.Uuid;
            else
                object.Uuid = options.longs === String ? $util.Long.prototype.toString.call(message.Uuid) : options.longs === Number ? new $util.LongBits(message.Uuid.low >>> 0, message.Uuid.high >>> 0).toNumber() : message.Uuid;
            if (options.oneofs)
                object._Uuid = "Uuid";
        }
        return object;
    };

    /**
     * Converts this AoiSyncToMeDelta to JSON.
     * @function toJSON
     * @memberof AoiSyncToMeDelta
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AoiSyncToMeDelta.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for AoiSyncToMeDelta
     * @function getTypeUrl
     * @memberof AoiSyncToMeDelta
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    AoiSyncToMeDelta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/AoiSyncToMeDelta";
    };

    return AoiSyncToMeDelta;
})();

$root.SyncNearDeltaInfo = (function() {

    /**
     * Properties of a SyncNearDeltaInfo.
     * @exports ISyncNearDeltaInfo
     * @interface ISyncNearDeltaInfo
     * @property {Array.<IAoiSyncDelta>|null} [DeltaInfos] SyncNearDeltaInfo DeltaInfos
     */

    /**
     * Constructs a new SyncNearDeltaInfo.
     * @exports SyncNearDeltaInfo
     * @classdesc Represents a SyncNearDeltaInfo.
     * @implements ISyncNearDeltaInfo
     * @constructor
     * @param {ISyncNearDeltaInfo=} [properties] Properties to set
     */
    function SyncNearDeltaInfo(properties) {
        this.DeltaInfos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SyncNearDeltaInfo DeltaInfos.
     * @member {Array.<IAoiSyncDelta>} DeltaInfos
     * @memberof SyncNearDeltaInfo
     * @instance
     */
    SyncNearDeltaInfo.prototype.DeltaInfos = $util.emptyArray;

    /**
     * Creates a new SyncNearDeltaInfo instance using the specified properties.
     * @function create
     * @memberof SyncNearDeltaInfo
     * @static
     * @param {ISyncNearDeltaInfo=} [properties] Properties to set
     * @returns {SyncNearDeltaInfo} SyncNearDeltaInfo instance
     */
    SyncNearDeltaInfo.create = function create(properties) {
        return new SyncNearDeltaInfo(properties);
    };

    /**
     * Encodes the specified SyncNearDeltaInfo message. Does not implicitly {@link SyncNearDeltaInfo.verify|verify} messages.
     * @function encode
     * @memberof SyncNearDeltaInfo
     * @static
     * @param {ISyncNearDeltaInfo} message SyncNearDeltaInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SyncNearDeltaInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.DeltaInfos != null && message.DeltaInfos.length)
            for (var i = 0; i < message.DeltaInfos.length; ++i)
                $root.AoiSyncDelta.encode(message.DeltaInfos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SyncNearDeltaInfo message, length delimited. Does not implicitly {@link SyncNearDeltaInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SyncNearDeltaInfo
     * @static
     * @param {ISyncNearDeltaInfo} message SyncNearDeltaInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SyncNearDeltaInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SyncNearDeltaInfo message from the specified reader or buffer.
     * @function decode
     * @memberof SyncNearDeltaInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SyncNearDeltaInfo} SyncNearDeltaInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SyncNearDeltaInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SyncNearDeltaInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.DeltaInfos && message.DeltaInfos.length))
                        message.DeltaInfos = [];
                    message.DeltaInfos.push($root.AoiSyncDelta.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SyncNearDeltaInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SyncNearDeltaInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SyncNearDeltaInfo} SyncNearDeltaInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SyncNearDeltaInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SyncNearDeltaInfo message.
     * @function verify
     * @memberof SyncNearDeltaInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SyncNearDeltaInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.DeltaInfos != null && message.hasOwnProperty("DeltaInfos")) {
            if (!Array.isArray(message.DeltaInfos))
                return "DeltaInfos: array expected";
            for (var i = 0; i < message.DeltaInfos.length; ++i) {
                var error = $root.AoiSyncDelta.verify(message.DeltaInfos[i]);
                if (error)
                    return "DeltaInfos." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SyncNearDeltaInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SyncNearDeltaInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SyncNearDeltaInfo} SyncNearDeltaInfo
     */
    SyncNearDeltaInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.SyncNearDeltaInfo)
            return object;
        var message = new $root.SyncNearDeltaInfo();
        if (object.DeltaInfos) {
            if (!Array.isArray(object.DeltaInfos))
                throw TypeError(".SyncNearDeltaInfo.DeltaInfos: array expected");
            message.DeltaInfos = [];
            for (var i = 0; i < object.DeltaInfos.length; ++i) {
                if (typeof object.DeltaInfos[i] !== "object")
                    throw TypeError(".SyncNearDeltaInfo.DeltaInfos: object expected");
                message.DeltaInfos[i] = $root.AoiSyncDelta.fromObject(object.DeltaInfos[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SyncNearDeltaInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SyncNearDeltaInfo
     * @static
     * @param {SyncNearDeltaInfo} message SyncNearDeltaInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SyncNearDeltaInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.DeltaInfos = [];
        if (message.DeltaInfos && message.DeltaInfos.length) {
            object.DeltaInfos = [];
            for (var j = 0; j < message.DeltaInfos.length; ++j)
                object.DeltaInfos[j] = $root.AoiSyncDelta.toObject(message.DeltaInfos[j], options);
        }
        return object;
    };

    /**
     * Converts this SyncNearDeltaInfo to JSON.
     * @function toJSON
     * @memberof SyncNearDeltaInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SyncNearDeltaInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SyncNearDeltaInfo
     * @function getTypeUrl
     * @memberof SyncNearDeltaInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SyncNearDeltaInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SyncNearDeltaInfo";
    };

    return SyncNearDeltaInfo;
})();

$root.SyncToMeDeltaInfo = (function() {

    /**
     * Properties of a SyncToMeDeltaInfo.
     * @exports ISyncToMeDeltaInfo
     * @interface ISyncToMeDeltaInfo
     * @property {IAoiSyncToMeDelta|null} [DeltaInfo] SyncToMeDeltaInfo DeltaInfo
     */

    /**
     * Constructs a new SyncToMeDeltaInfo.
     * @exports SyncToMeDeltaInfo
     * @classdesc Represents a SyncToMeDeltaInfo.
     * @implements ISyncToMeDeltaInfo
     * @constructor
     * @param {ISyncToMeDeltaInfo=} [properties] Properties to set
     */
    function SyncToMeDeltaInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SyncToMeDeltaInfo DeltaInfo.
     * @member {IAoiSyncToMeDelta|null|undefined} DeltaInfo
     * @memberof SyncToMeDeltaInfo
     * @instance
     */
    SyncToMeDeltaInfo.prototype.DeltaInfo = null;

    /**
     * Creates a new SyncToMeDeltaInfo instance using the specified properties.
     * @function create
     * @memberof SyncToMeDeltaInfo
     * @static
     * @param {ISyncToMeDeltaInfo=} [properties] Properties to set
     * @returns {SyncToMeDeltaInfo} SyncToMeDeltaInfo instance
     */
    SyncToMeDeltaInfo.create = function create(properties) {
        return new SyncToMeDeltaInfo(properties);
    };

    /**
     * Encodes the specified SyncToMeDeltaInfo message. Does not implicitly {@link SyncToMeDeltaInfo.verify|verify} messages.
     * @function encode
     * @memberof SyncToMeDeltaInfo
     * @static
     * @param {ISyncToMeDeltaInfo} message SyncToMeDeltaInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SyncToMeDeltaInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.DeltaInfo != null && Object.hasOwnProperty.call(message, "DeltaInfo"))
            $root.AoiSyncToMeDelta.encode(message.DeltaInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SyncToMeDeltaInfo message, length delimited. Does not implicitly {@link SyncToMeDeltaInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SyncToMeDeltaInfo
     * @static
     * @param {ISyncToMeDeltaInfo} message SyncToMeDeltaInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SyncToMeDeltaInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SyncToMeDeltaInfo message from the specified reader or buffer.
     * @function decode
     * @memberof SyncToMeDeltaInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SyncToMeDeltaInfo} SyncToMeDeltaInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SyncToMeDeltaInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SyncToMeDeltaInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.DeltaInfo = $root.AoiSyncToMeDelta.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SyncToMeDeltaInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SyncToMeDeltaInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SyncToMeDeltaInfo} SyncToMeDeltaInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SyncToMeDeltaInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SyncToMeDeltaInfo message.
     * @function verify
     * @memberof SyncToMeDeltaInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SyncToMeDeltaInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.DeltaInfo != null && message.hasOwnProperty("DeltaInfo")) {
            var error = $root.AoiSyncToMeDelta.verify(message.DeltaInfo);
            if (error)
                return "DeltaInfo." + error;
        }
        return null;
    };

    /**
     * Creates a SyncToMeDeltaInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SyncToMeDeltaInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SyncToMeDeltaInfo} SyncToMeDeltaInfo
     */
    SyncToMeDeltaInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.SyncToMeDeltaInfo)
            return object;
        var message = new $root.SyncToMeDeltaInfo();
        if (object.DeltaInfo != null) {
            if (typeof object.DeltaInfo !== "object")
                throw TypeError(".SyncToMeDeltaInfo.DeltaInfo: object expected");
            message.DeltaInfo = $root.AoiSyncToMeDelta.fromObject(object.DeltaInfo);
        }
        return message;
    };

    /**
     * Creates a plain object from a SyncToMeDeltaInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SyncToMeDeltaInfo
     * @static
     * @param {SyncToMeDeltaInfo} message SyncToMeDeltaInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SyncToMeDeltaInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.DeltaInfo = null;
        if (message.DeltaInfo != null && message.hasOwnProperty("DeltaInfo"))
            object.DeltaInfo = $root.AoiSyncToMeDelta.toObject(message.DeltaInfo, options);
        return object;
    };

    /**
     * Converts this SyncToMeDeltaInfo to JSON.
     * @function toJSON
     * @memberof SyncToMeDeltaInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SyncToMeDeltaInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SyncToMeDeltaInfo
     * @function getTypeUrl
     * @memberof SyncToMeDeltaInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SyncToMeDeltaInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SyncToMeDeltaInfo";
    };

    return SyncToMeDeltaInfo;
})();

module.exports = $root;
